<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6-11</title>
    <url>/2022/06/28/ecma/ES5-11/</url>
    <content><![CDATA[<h1 id="ES6-ES11"><a href="#ES6-ES11" class="headerlink" title="ES6-ES11"></a>ES6-ES11</h1><h2 id="ECMASript-相关介绍"><a href="#ECMASript-相关介绍" class="headerlink" title="ECMASript 相关介绍"></a><strong>ECMASript</strong> <strong>相关介绍</strong></h2><h3 id="1-1-什么是-ECMA"><a href="#1-1-什么是-ECMA" class="headerlink" title="1.1. 什么是 ECMA"></a><strong>1.1.</strong> <strong>什么是</strong> <strong>ECMA</strong></h3><p>ECMA（European Computer Manufacturers Association）中文名称为欧洲计算机制</p>
<p>造商协会，这个组织的目标是评估、开发和认可电信和计算机标准。1994 年后该</p>
<p>组织改名为 Ecma 国际。</p>
<h3 id="1-2-什么是-ECMAScript"><a href="#1-2-什么是-ECMAScript" class="headerlink" title="1.2. 什么是 ECMAScript"></a><strong>1.2.</strong> <strong>什么是</strong> <strong>ECMAScript</strong></h3><p>ECMAScript 是由 Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言。</p>
<h3 id="1-3-什么是-ECMA-262"><a href="#1-3-什么是-ECMA-262" class="headerlink" title="1.3. 什么是 ECMA-262"></a><strong>1.3.</strong> <strong>什么是</strong> <strong>ECMA-262</strong></h3><p>Ecma 国际制定了许多标准，而 ECMA-262 只是其中的一个，所有标准列表查看</p>
<p><a href="http://www.ecma-international.org/publications/standards/Standard.htm">http://www.ecma-international.org/publications/standards/Standard.htm</a></p>
<h3 id="1-4-ECMA-262-历史"><a href="#1-4-ECMA-262-历史" class="headerlink" title="1.4.ECMA-262 历史"></a><strong>1.4.ECMA-262</strong> <strong>历史</strong></h3><p>ECMA-262（ECMAScript）历史版本查看网址</p>
<p><a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm">http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm</a></p>
<p>第 1 版</p>
<p>1997 年 制定了语言的基本语法</p>
<p>第 2 版</p>
<p>1998 年 较小改动</p>
<p>第 3 版</p>
<p>1999 年 引入正则、异常处理、格式化输出等。IE 开始支持</p>
<p>第 4 版</p>
<p>2007 年 过于激进，未发布</p>
<p>第 5 版</p>
<p>2009 年 引入严格模式、JSON，扩展对象、数组、原型、字符串、日期方法</p>
<p>第 6 版</p>
<p>2015 年 模块化、面向对象语法、Promise、箭头函数、let、const、数组解构赋值等等</p>
<p>第 7 版</p>
<p>2016 年 幂运算符、数组扩展、Async/await 关键字</p>
<p>第 8 版</p>
<p>2017 年 Async/await、字符串扩展</p>
<p>第 9 版</p>
<p>2018 年 对象解构赋值、正则扩展</p>
<p>第 10 版</p>
<p>2019 年 扩展对象、数组方法 ES.next 动态指向下一个版本</p>
<p><strong>注：从</strong> <strong>ES6</strong> <strong>开始，每年发布一个版本，版本号比年份最后一位大</strong> <strong>1</strong></p>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="1-let关键字"><a href="#1-let关键字" class="headerlink" title="1.let关键字"></a>1.let关键字</h3><p>let 关键字用来声明变量，使用 let 声明的变量有几个特点：</p>
<ol>
<li><p>不允许重复声明</p>
</li>
<li><p>块儿级作用域</p>
</li>
<li><p>不存在变量提升</p>
</li>
<li><p>不影响作用域链</p>
</li>
</ol>
<h3 id="2-const关键字"><a href="#2-const关键字" class="headerlink" title="2.const关键字"></a>2.const关键字</h3><p>const 关键字用来声明常量，const 声明有以下特点</p>
<ol>
<li><p>声明必须赋初始值</p>
</li>
<li><p>标识符一般为大写</p>
</li>
<li><p>不允许重复声明</p>
</li>
<li><p>值不允许修改</p>
</li>
<li><p>块儿级作用域</p>
</li>
</ol>
<h3 id="3-变量的解构赋值"><a href="#3-变量的解构赋值" class="headerlink" title="3.变量的解构赋值"></a>3.变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;张学友&#x27;</span>, <span class="string">&#x27;刘德华&#x27;</span>, <span class="string">&#x27;黎明&#x27;</span>, <span class="string">&#x27;郭富城&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [zhang, liu, li, guo] = arr;</span><br><span class="line"><span class="comment">//对象的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> lin = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;林志颖&#x27;</span>,</span><br><span class="line"> <span class="attr">tags</span>: [<span class="string">&#x27;车手&#x27;</span>, <span class="string">&#x27;歌手&#x27;</span>, <span class="string">&#x27;小旋风&#x27;</span>, <span class="string">&#x27;演员&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;name, tags&#125; = lin;</span><br><span class="line"><span class="comment">//复杂解构</span></span><br><span class="line"><span class="keyword">let</span> wangfei = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;王菲&#x27;</span>,</span><br><span class="line"> <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"> <span class="attr">songs</span>: [<span class="string">&#x27;红豆&#x27;</span>, <span class="string">&#x27;流年&#x27;</span>, <span class="string">&#x27;暧昧&#x27;</span>, <span class="string">&#x27;传奇&#x27;</span>],</span><br><span class="line"> <span class="attr">history</span>: [</span><br><span class="line"> &#123;<span class="attr">name</span>: <span class="string">&#x27;窦唯&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">name</span>: <span class="string">&#x27;李亚鹏&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">name</span>: <span class="string">&#x27;谢霆锋&#x27;</span>&#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">songs</span>: [one, two, three], <span class="attr">history</span>: [first, second, third]&#125; = </span><br><span class="line">wangfei;</span><br></pre></td></tr></table></figure>

<h3 id="4-模板字符串"><a href="#4-模板字符串" class="headerlink" title="4.模板字符串"></a>4.模板字符串</h3><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：</p>
<ol>
<li><p>字符串中可以出现换行符</p>
</li>
<li><p>可以使用 ${xxx} 形式输出变量</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;魏翔&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;艾伦&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;/ul&gt;`</span>;</span><br><span class="line"><span class="comment">// 变量拼接</span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;王宁&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`<span class="subst">$&#123;star&#125;</span>在前几年离开了开心麻花`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-简化对象写法"><a href="#5-简化对象写法" class="headerlink" title="5.简化对象写法"></a>5.简化对象写法</h3><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;sola&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> slogon = <span class="string">&#x27;永远18&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> improve = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可以提高你的技能&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性和方法简写</span></span><br><span class="line"><span class="keyword">let</span> atguigu = &#123;</span><br><span class="line"> name,</span><br><span class="line"> slogon,</span><br><span class="line"> improve,</span><br><span class="line"> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可以改变你&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6.箭头函数"></a>6.箭头函数</h3><p>ES6 允许使用「箭头」（=&gt;）定义函数。</p>
<p>箭头函数的注意点:</p>
<ol>
<li><p>如果形参只有一个，则小括号可以省略</p>
</li>
<li><p>函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果</p>
</li>
<li><p>箭头函数 this 指向声明时所在作用域下 this 的值</p>
</li>
<li><p>箭头函数不能作为构造函数实例化</p>
</li>
<li><p>不能使用 arguments</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. 通用写法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">arg1, arg2, arg3</span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> arg1 + arg2 + arg3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 2. 省略小括号的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn2</span> = num =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> num * <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 3. 省略花括号的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn3</span> = score =&gt; score * <span class="number">20</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 4. this 指向声明时所在作用域中 this 的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn4</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> school = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line"> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="keyword">let</span> <span class="title function_">fn5</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">fn5</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="7-函数参数的默认值"><a href="#7-函数参数的默认值" class="headerlink" title="7.函数参数的默认值"></a>7.函数参数的默认值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6 允许给函数参数赋值初始值</span></span><br><span class="line"><span class="comment">//1. 形参初始值 具有默认值的参数, 一般位置要靠后(潜规则)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">10</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 13</span></span><br><span class="line"><span class="comment">//2. 与解构赋值结合</span></span><br><span class="line"><span class="comment">// 注意这里参数是一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host = <span class="string">&quot;127.0.0.1&quot;</span>, username, password, port&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(host)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(password)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(port)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;atguigu.com&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="8-rest参数"><a href="#8-rest参数" class="headerlink" title="8.rest参数"></a>8.rest参数</h3><p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 作用与 arguments 类似</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...args</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* rest 参数必须是最后一个形参</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minus</span>(<span class="params">a,b,...args</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">minus</span>(<span class="number">100</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">19</span>);</span><br></pre></td></tr></table></figure>

<p><strong>注意：****rest</strong> <strong>参数非常适合不定个数参数函数的场景</strong></p>
<h3 id="9-spread扩展运算符"><a href="#9-spread扩展运算符" class="headerlink" title="9.spread扩展运算符"></a>9.spread扩展运算符</h3><p>扩展运算符（spread）也是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 展开数组</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">let</span> tfboys = [<span class="string">&#x27;德玛西亚之力&#x27;</span>,<span class="string">&#x27;德玛西亚之翼&#x27;</span>,<span class="string">&#x27;德玛西亚皇子&#x27;</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(...tfboys)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 展开对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> skillOne = &#123;</span><br><span class="line"> <span class="attr">q</span>: <span class="string">&#x27;致命打击&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> skillTwo = &#123;</span><br><span class="line"> <span class="attr">w</span>: <span class="string">&#x27;勇气&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> skillThree = &#123;</span><br><span class="line"> <span class="attr">e</span>: <span class="string">&#x27;审判&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> skillFour = &#123;</span><br><span class="line"> <span class="attr">r</span>: <span class="string">&#x27;德玛西亚正义&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> gailun = &#123;...skillOne, ...skillTwo,...skillThree,...skillFour&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="10-Symbol"><a href="#10-Symbol" class="headerlink" title="10.Symbol"></a>10.Symbol</h3><h4 id="10-1基本使用"><a href="#10-1基本使用" class="headerlink" title="10.1基本使用"></a>10.1基本使用</h4><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是</p>
<p>JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型。</p>
<p>Symbol 特点</p>
<ol>
<li><p>Symbol 的值是唯一的，用来解决命名冲突的问题</p>
</li>
<li><p>Symbol 值不能与其他数据进行运算</p>
</li>
<li><p>Symbol 定义 的 对象属 性 不能 使 用 for…in 循 环遍 历 ，但 是可 以 使 用</p>
</li>
</ol>
<p>Reflect.ownKeys 来获取对象的所有键名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1, <span class="keyword">typeof</span> s1);</span><br><span class="line"><span class="comment">//添加标识的 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2_2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 === s2_2);</span><br><span class="line"><span class="comment">//使用 Symbol for 定义</span></span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3_2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3 === s3_2);</span><br></pre></td></tr></table></figure>

<h4 id="10-2使用Symbol的几种方式"><a href="#10-2使用Symbol的几种方式" class="headerlink" title="10.2使用Symbol的几种方式"></a>10.2使用Symbol的几种方式</h4><p>方式一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加方法 up down</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;俄罗斯方块&#x27;</span>,</span><br><span class="line">  <span class="attr">up</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">down</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 我们要往game对象里面添加方法，但是怕game对象已经存在</span></span><br><span class="line"><span class="comment">// 同名方法，所以我们这时使用到了Symbol</span></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">  <span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以快速上升&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以快速下降!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.<span class="property">up</span>]();</span><br><span class="line">game[methods.<span class="property">down</span>]();</span><br></pre></td></tr></table></figure>

<p>方式二</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以发言&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;zibao&#x27;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以自爆&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">youxi[<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;say&#x27;</span>)]();</span><br><span class="line">youxi[<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;zibao&#x27;</span>)]();</span><br></pre></td></tr></table></figure>

<p>方式三</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> youxi2 = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以发言&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;zibao&#x27;</span>)]:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以自爆&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">youxi2[<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(youxi2)[<span class="number">1</span>]]();</span><br><span class="line">youxi2[<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(youxi2)[<span class="number">2</span>]]();</span><br></pre></td></tr></table></figure>

<h4 id="10-3Symbol内置值"><a href="#10-3Symbol内置值" class="headerlink" title="10.3Symbol内置值"></a>10.3Symbol内置值</h4><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行。</p>
<table>
<thead>
<tr>
<th>内置值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Symbol.hasInstance</td>
<td>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</td>
</tr>
<tr>
<td>Symbol.isConcatSpreadable</td>
<td>对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开</td>
</tr>
<tr>
<td>Symbol.species</td>
<td>创建衍生对象时，会使用该属性</td>
</tr>
<tr>
<td>Symbol.match</td>
<td>当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.replace</td>
<td>当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.search</td>
<td>当该对象被 str.search (myObject)方法调用时，会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.split</td>
<td>当该对象被 str.split(myObject)方法调用时，会返回该方法的返回值</td>
</tr>
<tr>
<td>Symbol.iterator</td>
<td>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</td>
</tr>
<tr>
<td>Symbol.toPrimitive</td>
<td>该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</td>
</tr>
<tr>
<td>Symbol. toStringTag</td>
<td>在该对象上面调用 toString 方法时，返回该方法的返回值</td>
</tr>
<tr>
<td>Symbol. unscopables</td>
<td>该对象指定了使用 with 关键字时，哪些属性会被 with环境排除</td>
</tr>
</tbody></table>
<h3 id="11-迭代器"><a href="#11-迭代器" class="headerlink" title="11.迭代器"></a>11.迭代器</h3><p>遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。</p>
<ol>
<li><p>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费</p>
</li>
<li><p>原生具备 iterator 接口的数据(可用 for of 遍历)</p>
</li>
</ol>
<p>a) Array</p>
<p>b) Arguments</p>
<p>c) Set</p>
<p>d) Map</p>
<p>e) String</p>
<p>f) TypedArray</p>
<p>g) NodeList</p>
<ol start="3">
<li>工作原理</li>
</ol>
<p>a) 创建一个指针对象，指向当前数据结构的起始位置</p>
<p>b) 第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</p>
<p>c) 接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</p>
<p>d) 每调用 next 方法返回一个包含 value 和 done 属性的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>];</span><br><span class="line"><span class="comment">// 使用 for...of 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> xiyou) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="comment">// 调用对象的next方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// 重新初始化对象，指针也会重新回到最前面</span></span><br><span class="line"><span class="keyword">let</span> iterator1 = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>

<p>自定义遍历对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> banji = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;终极一班&#x27;</span>,</span><br><span class="line">  <span class="attr">stus</span>: [</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="keyword">if</span> (index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> result = &#123;<span class="attr">value</span>: _this.<span class="property">stus</span>[index], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">          index++;</span><br><span class="line">          <span class="keyword">return</span> result</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> banji) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-生成器"><a href="#12-生成器" class="headerlink" title="12.生成器"></a>12.生成器</h3><p>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>
<p>代码说明：</p>
<ol>
<li><ul>
<li>的位置没有限制</li>
</ul>
</li>
<li><p>生成器函数返回的结果是迭代器对象，调用迭代器对象的 next 方法可以得到</p>
</li>
</ol>
<p>yield 语句后的值</p>
<ol start="3">
<li>yield 相当于函数的暂停标记，也可以认为是函数的分隔符，每调用一次 next</li>
</ol>
<p>方法，执行一段代码</p>
<ol start="4">
<li>next 方法可以传递实参，作为 yield 语句的返回值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&#x27;一只没有耳朵&#x27;</span>;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&#x27;一只没有尾巴&#x27;</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;真奇怪&#x27;</span>; &#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>

<p>生成器函数参数的传递</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line"><span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one);</span><br><span class="line"><span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line"><span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&quot;AAA&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 会执行yield 111;</span></span><br><span class="line"><span class="comment">// next()方法是可以传入参数的，传入的参数作为第一条(上一条)语句yield 111的返回</span></span><br><span class="line">结果</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;BBB&quot;</span>)); <span class="comment">// 会执行yield 222;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;CCC&quot;</span>)); <span class="comment">// 会执行yield 333;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;DDD&quot;</span>)); <span class="comment">// 继续往后走，未定义;</span></span><br></pre></td></tr></table></figure>

<p>生成器函数实例一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步编程 文件操作 网络操作（ajax，request） 数据库操作</span></span><br><span class="line"><span class="comment">// 需求：1s后控制台输出111 再过2s后控制台输出222 再过3s后控制台输出333</span></span><br><span class="line"><span class="comment">// 一种做法：回调地狱</span></span><br><span class="line"><span class="comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.log(111);</span></span><br><span class="line"><span class="comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.log(222);</span></span><br><span class="line"><span class="comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.log(333);</span></span><br><span class="line"><span class="comment">// &#125;,3000)</span></span><br><span class="line"><span class="comment">// &#125;,2000)</span></span><br><span class="line"><span class="comment">// &#125;,1000)</span></span><br><span class="line"><span class="comment">// 另一种做法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure>

<p>生成器函数实例二</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟获取: 用户数据 订单数据 商品数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> data = <span class="string">&quot;用户数据&quot;</span>;</span><br><span class="line"><span class="comment">// 第二次调用next，传入参数，作为第一个的返回值</span></span><br><span class="line">iterator.<span class="title function_">next</span>(data); <span class="comment">// 这里将data传入</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrders</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> data = <span class="string">&quot;订单数据&quot;</span>;</span><br><span class="line">iterator.<span class="title function_">next</span>(data); <span class="comment">// 这里将data传入</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGoods</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> data = <span class="string">&quot;商品数据&quot;</span>;</span><br><span class="line">iterator.<span class="title function_">next</span>(data); <span class="comment">// 这里将data传入</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> users = <span class="keyword">yield</span> <span class="title function_">getUsers</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span><br><span class="line"><span class="keyword">let</span> orders = <span class="keyword">yield</span> <span class="title function_">getOrders</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(orders);</span><br><span class="line"><span class="keyword">let</span> goods = <span class="keyword">yield</span> <span class="title function_">getGoods</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(goods); <span class="comment">// 这种操作有点秀啊！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure>

<h3 id="13-Promise"><a href="#13-Promise" class="headerlink" title="13.Promise"></a>13.Promise</h3><p>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作 并可以获取其成功或失败的结果；</p>
<ol>
<li>Promise 构造函数: Promise (excutor) {}；</li>
<li>Promise.prototype.then 方法；</li>
<li>Promise.prototype.catch 方法；</li>
</ol>
<p>基本使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化 Promise 对象</span></span><br><span class="line"><span class="comment">// Promise 对象三种状态：初始化、成功、失败</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="comment">// let data = &quot;数据&quot;;</span></span><br><span class="line"><span class="comment">// 调用resolve，这个Promise 对象的状态就会变成成功</span></span><br><span class="line"><span class="comment">// resolve(data);</span></span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line"><span class="keyword">let</span> err = <span class="string">&quot;失败了！&quot;</span>;</span><br><span class="line"><span class="title function_">reject</span>(err);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Promise</span>封装读取文件：</span><br><span class="line">一般写法：</span><br><span class="line">运行结果：</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="comment">// 调用 Promise 对象的then方法，两个参数为函数</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="comment">// 成功</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">season</span>)&#123; <span class="comment">// 失败</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(season);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Promise封装读取文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 2、调用方法，读取文件</span></span><br><span class="line"><span class="comment">// fs.readFile(&quot;resources/text.txt&quot;,(err,data)=&gt;&#123;</span></span><br><span class="line"><span class="comment">// // 如果失败则抛出错误</span></span><br><span class="line"><span class="comment">// if(err) throw err;</span></span><br><span class="line"><span class="comment">// // 如果没有出错，则输出内容</span></span><br><span class="line"><span class="comment">// console.log(data.toString());</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 3、使用Promise封装</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,data</span>)&#123;</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/text.txt&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 判断如果失败</span></span><br><span class="line"><span class="keyword">if</span>(err) <span class="title function_">reject</span>(err);</span><br><span class="line"><span class="comment">// 如果成功</span></span><br><span class="line"><span class="title function_">resolve</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 读取失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Promise封装ajax请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求地址：https://api.apiopen.top/getJoke</span></span><br><span class="line">  <span class="comment">// 原生请求</span></span><br><span class="line">  <span class="comment">// 1、创建对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  <span class="comment">// 2、初始化</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">  <span class="comment">// 3、发送</span></span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line">  <span class="comment">// 4、绑定事件，处理响应结果</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 判断状态</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="comment">// 判断响应状态码 200-299</span></span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt;= <span class="number">299</span>) &#123;</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(xhr.<span class="property">status</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//  Promise</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reason</span>) &#123;</span><br><span class="line">    <span class="comment">// 原生请求</span></span><br><span class="line">    <span class="comment">// 1、创建对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2、初始化</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">    <span class="comment">// 3、发送</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4、绑定事件，处理响应结果</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 判断状态</span></span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断响应状态码 200-299</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt;= <span class="number">299</span>) &#123;</span><br><span class="line">          <span class="comment">// 成功</span></span><br><span class="line">          <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 失败</span></span><br><span class="line">          <span class="title function_">reason</span>(xhr.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 读取失败</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>Promise解决回调地狱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3、使用Promise实现</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/text.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(data);</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/test1.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>([value, data]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/test2.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 存入数组</span></span><br><span class="line">      value.<span class="title function_">push</span>(data);</span><br><span class="line">      <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&quot;\r\n&quot;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Promise对象的catch方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise对象catch方法</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 设置p对象的状态为失败，并设置失败的值</span></span><br><span class="line"><span class="title function_">reject</span>(<span class="string">&quot;失败啦~！&quot;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// p.then(value=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;,reason=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.warn(reason);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="14-Set集合"><a href="#14-Set集合" class="headerlink" title="14.Set集合"></a>14.Set集合</h3><p>ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历，集合的属性和方法：</p>
<ol>
<li>size 返回集合的元素个数；</li>
<li>add 增加一个新元素，返回当前集合；</li>
<li>delete 删除元素，返回 boolean 值；</li>
<li>has 检测集合中是否包含某个元素，返回 boolean 值；</li>
<li>clear 清空集合，返回 undefined；</li>
</ol>
<p>基本使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set集合</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s,<span class="keyword">typeof</span> s);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;大哥&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>,<span class="string">&quot;四哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1); <span class="comment">// 自动去重</span></span><br><span class="line"><span class="comment">// 1. size 返回集合的元素个数；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">size</span>);</span><br><span class="line"><span class="comment">// 2. add 增加一个新元素，返回当前集合；</span></span><br><span class="line">s1.<span class="title function_">add</span>(<span class="string">&quot;大姐&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"><span class="comment">// 3. delete 删除元素，返回 boolean 值；</span></span><br><span class="line"><span class="keyword">let</span> result = s1.<span class="title function_">delete</span>(<span class="string">&quot;三哥&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"><span class="comment">// 4. has 检测集合中是否包含某个元素，返回 boolean 值；</span></span><br><span class="line"><span class="keyword">let</span> r1 = s1.<span class="title function_">has</span>(<span class="string">&quot;二姐&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line"><span class="comment">// 5. clear 清空集合，返回 undefined；</span></span><br><span class="line">s1.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Set实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set集合实践</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 看来我需要学学数组的一些方法</span></span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="comment">// ... 为扩展运算符，将数组转化为逗号分隔的序列</span></span><br><span class="line"><span class="keyword">let</span> union = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr, ...arr2])];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(union);</span><br><span class="line"><span class="comment">// 差集：比如集合1和集合2求差集，就是1里面有的，2里面没的</span></span><br><span class="line"><span class="keyword">let</span> result1 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br></pre></td></tr></table></figure>

<h3 id="15-Map集合"><a href="#15-Map集合" class="headerlink" title="15.Map集合"></a>15.Map集合</h3><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类 型的值（包括对象）都可以当作键。Map 也实现了iterator 接口，所以可以使用『扩展运算符』和 『for…of…』进行遍历；</p>
<p>Map 的属性和方法：</p>
<ol>
<li>size 返回 Map 的元素个数；</li>
<li>set 增加一个新元素，返回当前 Map；</li>
<li>get 返回键名对象的键值；</li>
<li>has 检测 Map 中是否包含某个元素，返回 boolean 值；</li>
<li>clear 清空集合，返回 undefined；</li>
</ol>
<p>代码实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map集合</span></span><br><span class="line"><span class="comment">// 创建一个空 map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// 创建一个非空 map</span></span><br><span class="line"><span class="keyword">let</span> m2 = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;尚硅谷&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;slogon&#x27;</span>, <span class="string">&#x27;不断提高行业标准&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 1. size 返回 Map 的元素个数；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m2.<span class="property">size</span>);</span><br><span class="line"><span class="comment">// 2. set 增加一个新元素，返回当前 Map；</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;皇帝&quot;</span>, <span class="string">&quot;大哥&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;丞相&quot;</span>, <span class="string">&quot;二哥&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"><span class="comment">// 3. get 返回键名对象的键值；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&quot;皇帝&quot;</span>));</span><br><span class="line"><span class="comment">// 4. has 检测 Map 中是否包含某个元素，返回 boolean 值；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(<span class="string">&quot;皇帝&quot;</span>));</span><br><span class="line"><span class="comment">// 5. clear 清空集合，返回 undefined；</span></span><br><span class="line">m.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br></pre></td></tr></table></figure>

<h3 id="16-class类"><a href="#16-class类" class="headerlink" title="16.class类"></a>16.class类</h3><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键 字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做 到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已；</p>
<ol>
<li>class 声明类；</li>
<li>constructor 定义构造函数初始化；</li>
<li>extends 继承父类；</li>
<li>super 调用父级构造方法；</li>
<li>static 定义静态方法和属性；</li>
<li>父类方法可以重写；</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手机 ES5写法</span></span><br><span class="line">  <span class="comment">// function Phone(brand,price)&#123;</span></span><br><span class="line">  <span class="comment">// this.brand = brand;</span></span><br><span class="line">  <span class="comment">// this.price = price;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// // 添加方法</span></span><br><span class="line">  <span class="comment">// Phone.prototype.call = function()&#123;</span></span><br><span class="line">  <span class="comment">// console.log(&quot;我可以打电话！&quot;);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// // 实例化对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// let HuaWei = new Phone(&quot;华为&quot;,5999);</span></span><br><span class="line">  <span class="comment">// HuaWei.call();</span></span><br><span class="line">  <span class="comment">// console.log(HuaWei);</span></span><br><span class="line">  <span class="comment">// ES6写法</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">// 构造方法，名字是固定的</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打电话，方法必须使用该方式写</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">HuaWei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;华为&quot;</span>, <span class="number">5999</span>);</span><br><span class="line">  <span class="title class_">HuaWei</span>.<span class="title function_">call</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HuaWei</span>);</span><br></pre></td></tr></table></figure>

<p>class静态成员</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class静态成员</span></span><br><span class="line">  <span class="comment">// ES5写法</span></span><br><span class="line">  <span class="comment">// function Phone()&#123;&#125;</span></span><br><span class="line">  <span class="comment">// Phone.name = &quot;手机&quot;;</span></span><br><span class="line">  <span class="comment">// Phone.change = function()&#123;</span></span><br><span class="line">  <span class="comment">// console.log(&quot;我可以改变世界！&quot;);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// let nokia = new Phone();</span></span><br><span class="line">  <span class="comment">// console.log(nokia.name); // undefined</span></span><br><span class="line">  <span class="comment">// // nokia.change();</span></span><br><span class="line">  <span class="comment">// // 报错：Uncaught TypeError: nokia.change is not a function</span></span><br><span class="line">  <span class="comment">// Phone.prototype.color = &quot;黑色&quot;;</span></span><br><span class="line">  <span class="comment">// console.log(nokia.color); // 黑色</span></span><br><span class="line">  <span class="comment">// console.log(Phone.name);</span></span><br><span class="line">  <span class="comment">// Phone.change();</span></span><br><span class="line">  <span class="comment">// 注意：实例对象和函数对象的属性是不相通的</span></span><br><span class="line">  <span class="comment">// ES6写法</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&quot;手机&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变世界！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>);</span><br><span class="line">  <span class="title class_">Phone</span>.<span class="title function_">change</span>();</span><br></pre></td></tr></table></figure>

<p>ES5构造函数实现继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5构造函数继承</span></span><br><span class="line"><span class="comment">// 手机</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 智能手机</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">  <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置子级构造函数的原型</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span>;</span><br><span class="line"><span class="comment">// 声明子类的方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">photo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">game</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;锤子&quot;</span>, <span class="number">2499</span>, <span class="string">&quot;黑色&quot;</span>, <span class="string">&quot;5.5inch&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">chuizi.<span class="title function_">call</span>();</span><br><span class="line">chuizi.<span class="title function_">photo</span>();</span><br><span class="line">chuizi.<span class="title function_">game</span>();</span><br></pre></td></tr></table></figure>

<p>ES6 class 类继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6class类继承</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(brand, price); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">photo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">game</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;小米&quot;</span>, <span class="number">1999</span>, <span class="string">&quot;黑色&quot;</span>, <span class="string">&quot;5.15inch&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">  chuizi.<span class="title function_">call</span>();</span><br><span class="line">  chuizi.<span class="title function_">photo</span>();</span><br><span class="line">  chuizi.<span class="title function_">game</span>();</span><br></pre></td></tr></table></figure>

<p>子类 对父类方法的重写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6class类继承</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(brand, price); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类对父类方法重写</span></span><br><span class="line"><span class="comment">// 直接写，直接覆盖</span></span><br><span class="line"><span class="comment">// 注意：子类无法调用父类同名方法</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以进行视频通话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">photo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">game</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;小米&quot;</span>, <span class="number">1999</span>, <span class="string">&quot;黑色&quot;</span>, <span class="string">&quot;5.15inch&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line"></span><br><span class="line">  chuizi.<span class="title function_">call</span>();</span><br><span class="line">  chuizi.<span class="title function_">photo</span>();</span><br><span class="line">  chuizi.<span class="title function_">game</span>();</span><br></pre></td></tr></table></figure>

<p>class中的getter和setter</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class中的getter和setter设置</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格属性被读取了！&quot;</span>);</span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格属性被修改了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">price</span>); <span class="comment">// 返回值</span></span><br><span class="line">  s.<span class="property">price</span> = <span class="number">2999</span>;</span><br></pre></td></tr></table></figure>

<h3 id="17-数值扩展"><a href="#17-数值扩展" class="headerlink" title="17.数值扩展"></a>17.数值扩展</h3><h4 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h4><p>Number.EPSILON 是 JavaScript 表示的最小精度； EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16；</p>
<h4 id="二进制和八进制"><a href="#二进制和八进制" class="headerlink" title="二进制和八进制"></a>二进制和八进制</h4><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示；</p>
<h4 id="Number-isFinite-与-Number-isNaN"><a href="#Number-isFinite-与-Number-isNaN" class="headerlink" title="Number.isFinite() 与 Number.isNaN()"></a>Number.isFinite() 与 Number.isNaN()</h4><ul>
<li>Number.isFinite() 用来检查一个数值是否为有限的；</li>
<li>Number.isNaN() 用来检查一个值是否为 NaN；</li>
</ul>
<h4 id="Number-parseInt-与-Number-parseFloat"><a href="#Number-parseInt-与-Number-parseFloat" class="headerlink" title="Number.parseInt() 与 Number.parseFloat()"></a>Number.parseInt() 与 Number.parseFloat()</h4><p>ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变；</p>
<h4 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc"></a>Math.trunc</h4><p>用于去除一个数的小数部分，返回整数部分；</p>
<h4 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger"></a>Number.isInteger</h4><p>Number.isInteger() 用来判断一个数值是否为整数；</p>
<p>例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数值扩展</span></span><br><span class="line"><span class="comment">// 0. Number.EPSILON 是 JavaScript 表示的最小精度</span></span><br><span class="line"><span class="comment">// EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16</span></span><br><span class="line"><span class="comment">// function equal(a, b)&#123;</span></span><br><span class="line"><span class="comment">// return Math.abs(a-b) &lt; Number.EPSILON;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0、Number.EPSILON 是 JavaScript 表示的最小精度&quot;</span>);</span><br><span class="line"><span class="comment">// 箭头函数简化写法</span></span><br><span class="line">equal = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(a - b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 1. 二进制和八进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1、二进制和八进制&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0o777</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0xff</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"><span class="comment">// 2. Number.isFinite 检测一个数值是否为有限数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2、Number.isFinite 检测一个数值是否为有限数&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span> / <span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>));</span><br><span class="line"><span class="comment">// 3. Number.isNaN 检测一个数值是否为 NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3. Number.isNaN 检测一个数值是否为 NaN&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">123</span>));</span><br><span class="line"><span class="comment">// 4. Number.parseInt Number.parseFloat字符串转整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4. Number.parseInt Number.parseFloat字符串转整数&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&#x27;5211314love&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.1415926神奇&#x27;</span>));</span><br><span class="line"><span class="comment">// 5. Number.isInteger 判断一个数是否为整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5. Number.isInteger 判断一个数是否为整数&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">5</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">2.5</span>));</span><br><span class="line"><span class="comment">// 6. Math.trunc 将数字的小数部分抹掉</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6. Math.trunc 将数字的小数部分抹掉 &quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">3.5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. Math.sign 判断一个数到底为正数 负数 还是零</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;7. Math.sign 判断一个数到底为正数 负数 还是零&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">100</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">20000</span>));</span><br></pre></td></tr></table></figure>

<h3 id="18-对象扩展"><a href="#18-对象扩展" class="headerlink" title="18.对象扩展"></a>18.对象扩展</h3><p>ES6 新增了一些 Object 对象的方法：</p>
<ol>
<li>Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）；</li>
<li>Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象；</li>
<li>proto、setPrototypeOf、 setPrototypeOf 可以直接设置对象的原型；</li>
</ol>
<p>例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象扩展</span></span><br><span class="line"><span class="comment">// 1. Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">120</span>, <span class="number">120</span>)); <span class="comment">// ===</span></span><br><span class="line"><span class="comment">// 注意下面的区别</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);</span><br><span class="line"><span class="comment">// NaN与任何数值做===比较都是false，跟他自己也如此！</span></span><br><span class="line"><span class="comment">// 2. Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象；</span></span><br><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">pass</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">test</span>: <span class="string">&quot;test&quot;</span> <span class="comment">// 唯一存在</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;http://zibo.com&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">300300600</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;root4444&quot;</span>,</span><br><span class="line">  <span class="attr">pass</span>: <span class="string">&quot;root4444&quot;</span>,</span><br><span class="line">  <span class="attr">test2</span>: <span class="string">&quot;test2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果前边有后边没有会添加，如果前后都有，后面的会覆盖前面的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(config1, config2));</span><br><span class="line"><span class="comment">// 3. __proto__、setPrototypeOf、 getPrototypeOf 可以直接设置对象的原型；</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;尚硅谷&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">  <span class="attr">xiaoqu</span>: [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 并不建议这么做</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(school, cities);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(school));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure>

<h3 id="19-模块化"><a href="#19-模块化" class="headerlink" title="19.模块化"></a>19.模块化</h3><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来；</p>
<p>模块化的优势有以下几点：</p>
<ol>
<li>防止命名冲突；</li>
<li>代码复用；</li>
<li>高维护性；</li>
</ol>
<p>ES6 之前的模块化规范有：</p>
<ol>
<li>CommonJS =&gt; NodeJS、Browserify；</li>
<li>AMD =&gt; requireJS；</li>
<li>CMD =&gt; seaJS；</li>
</ol>
<p>模块功能主要由两个命令构成：export 和 import；</p>
<ul>
<li>export 命令用于规定模块的对外接口（导出模块）；</li>
<li>import 命令用于输入其他模块提供的功能（导入模块）；</li>
</ul>
<p>基本使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">teach</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以教你开发技术！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>模块化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入m.js模块内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;./js/m.js&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">school</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">m.<span class="title function_">teach</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>ES6暴露数据语法汇总</p>
<ul>
<li><p>逐个导出 模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别暴露（导出）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">teach</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以教你开发技术！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>统一导出模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统一暴露（导出）</span></span><br><span class="line"><span class="keyword">let</span> school = <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findJob</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以帮你找到好工作！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;school,findJob&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>默认导出模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认暴露（导出）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">school : <span class="string">&quot;尚硅谷&quot;</span>,</span><br><span class="line">change : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以帮你改变人生！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>引入和使用模块</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>模块化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入m.js模块内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;./js/m.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">school</span>);</span></span><br><span class="line"><span class="language-javascript">m.<span class="title function_">teach</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入n.js模块内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> * <span class="keyword">as</span> n <span class="keyword">from</span> <span class="string">&quot;./js/n.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="property">school</span>);</span></span><br><span class="line"><span class="language-javascript">n.<span class="title function_">findJob</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 引入o.js模块内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> * <span class="keyword">as</span> o <span class="keyword">from</span> <span class="string">&quot;./js/o.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注意这里调用方法的时候需要加上default</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">default</span>.<span class="property">school</span>);</span></span><br><span class="line"><span class="language-javascript">o.<span class="property">default</span>.<span class="title function_">change</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="20-Babel对ES6模块化代码转换"><a href="#20-Babel对ES6模块化代码转换" class="headerlink" title="20.Babel对ES6模块化代码转换"></a>20.Babel对ES6模块化代码转换</h3><p>Babel 是一个 JavaScript 编译器；</p>
<p>Babel 能够将新的ES规范语法转换成ES5的语法；</p>
<p>因为不是所有的浏览器都支持最新的ES规范，所以，一般项目中都需要使用Babel进行转换；</p>
<p>步骤：使用Babel转换JS代码——打包成一个文件——使用时引入即可；</p>
<p>步骤：</p>
<p>第一步：安装工具babel-cli（命令行工具） babel-preset-env（ES转换工具） browserify（打包工具， 项目中使用的是webpack）；</p>
<p>第二步：初始化项目</p>
<ul>
<li>npm init -</li>
</ul>
<p>第三步：安装</p>
<ul>
<li>npm i babel-cli babel-preset-env browserify</li>
</ul>
<p>第四步：使用babel转换</p>
<ul>
<li>npx babel js（js目录） -d dist/js（转化后的js目录） –presets=babel-preset-env</li>
</ul>
<p>第五步：打包</p>
<ul>
<li>npx browserify dist/js/app.js -o dist/bundle.js</li>
</ul>
<p>第六步：使用的时候 引入bundle.js</p>
<ul>
<li><script src="./js/bundle.js" type="module"></script></li>
</ul>
<h3 id="21-ES6模块化引入NPM包"><a href="#21-ES6模块化引入NPM包" class="headerlink" title="21.ES6模块化引入NPM包"></a>21.ES6模块化引入NPM包</h3><p>第一步：安装jQuery</p>
<ul>
<li>npm i jquery</li>
</ul>
<p>第二步：在app.js中使用jQuery</p>
<ul>
<li>import $ from ‘jquery’</li>
</ul>
<h2 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h2><h3 id="1-Array-prototype-includes"><a href="#1-Array-prototype-includes" class="headerlink" title="1.Array.prototype.includes"></a>1.Array.prototype.includes</h3><p>Includes 方法用来检测数组中是否包含某个元素，返回布尔类型值； 判断数组中是否包含某元素，语法：arr.includes(元素值)；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// includes</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h3 id="2-指数操作符"><a href="#2-指数操作符" class="headerlink" title="2.指数操作符"></a>2.指数操作符</h3><p>在 ES7 中引入指数运算符<code>**</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指数操作符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>,<span class="number">10</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>**<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<h2 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h2><h3 id="1-async和await"><a href="#1-async和await" class="headerlink" title="1.async和await"></a>1.async和await</h3><p>async 和 await 两种语法结合可以让异步代码看起来像同步代码一样； 简化异步函数的写法；</p>
<p>1.async函数的返回值为 promise对象</p>
<p>2.promise对象的结果有async函数执行的返回值决定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>async函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// async函数：异步函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return 123; // 返回普通数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 若报错，则返回的Promise对象也是错误的</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// throw new Error(&quot;出错啦！&quot;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 若返回的是Promise对象，那么返回的结果就是Promise对象的结果</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// resolve(&quot;成功啦！&quot;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">reject</span>(<span class="string">&quot;失败啦！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> result = <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(result); // 返回的结果是一个Promise对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 调用then方法</span></span></span><br><span class="line"><span class="language-javascript">result.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>await表达式</p>
<ol>
<li>await 必须写在 async 函数中；</li>
<li>await 右侧的表达式一般为 promise 对象；</li>
<li>await 返回的是 promise 成功的值；</li>
<li>await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理；</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>await表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// async函数 + await表达式：异步函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建Prmise对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">resolve</span>(<span class="string">&quot;成功啦！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// await 返回的是 promise 成功的值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> result = <span class="keyword">await</span> p;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 成功啦！</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>async与await结合读取文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readText</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;../resources/text.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//如果失败</span></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">      <span class="comment">//如果成功</span></span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个 async 函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//获取为学内容</span></span><br><span class="line">  <span class="keyword">let</span> t0 = <span class="keyword">await</span> <span class="title function_">readText</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(t0.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure>

<p>async和await结合发送ajax请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async 和 await 结合发送ajax请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendAjax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建对象</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2、初始化</span></span><br><span class="line">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">    <span class="comment">// 3、发送</span></span><br><span class="line">    x.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4、事件绑定</span></span><br><span class="line">    x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; x.<span class="property">status</span> &lt;= <span class="number">299</span>) &#123;</span><br><span class="line">          <span class="comment">// 成功</span></span><br><span class="line">          <span class="title function_">resolve</span>(x.<span class="property">response</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 失败</span></span><br><span class="line">          <span class="title function_">reject</span>(x.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="comment">// const result = sendAjax(&quot;https://api.apiopen.top/getJoke&quot;);</span></span><br><span class="line"><span class="comment">// result.then(value=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;,reason=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.warn(reason);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 使用async和await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">sendAjax</span>(<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure>

<h3 id="2-对象方法扩展"><a href="#2-对象方法扩展" class="headerlink" title="2.对象方法扩展"></a>2.对象方法扩展</h3><ol>
<li>Object.values()方法：返回一个给定对象的所有可枚举属性值的数组；</li>
<li>Object.entries()方法：返回一个给定对象自身可遍历属性 [key,value] 的数组；</li>
<li>Object.getOwnPropertyDescriptors()该方法：返回指定对象所有自身属性的描述对象；</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象方法扩展</span></span><br><span class="line"><span class="keyword">let</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;訾博&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">24</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取对象所有的键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(school));</span><br><span class="line"><span class="comment">// 获取对象所有的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(school));</span><br><span class="line"><span class="comment">// 获取对象的entries</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school));</span><br><span class="line"><span class="comment">// 创建map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="comment">// 返回指定对象所有自身属性的描述对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(school));</span><br><span class="line"><span class="comment">// 参考内容：</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="comment">// 设置值</span></span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;訾博&quot;</span>,</span><br><span class="line">    <span class="comment">// 属性特性</span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configuration</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h2><h3 id="1-Rest-参数与-spread-扩展运算符"><a href="#1-Rest-参数与-spread-扩展运算符" class="headerlink" title="1.Rest 参数与 spread 扩展运算符"></a>1.Rest 参数与 spread 扩展运算符</h3><p>Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组，在 ES9 中为对象提供了 像数组一样的 rest 参数和扩展运算符；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Rest参数与spread扩展运算符</span></span><br><span class="line">  <span class="comment">// Rest 参数与 spread 扩展运算符在 ES6 中已经引入，</span></span><br><span class="line">  <span class="comment">// 不过 ES6 中只针对于数组，在 ES9 中为对象提供了像</span></span><br><span class="line">  <span class="comment">// 数组一样的 rest 参数和扩展运算符；</span></span><br><span class="line">  <span class="comment">//rest 参数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">                     host,</span></span><br><span class="line"><span class="params">                     port,</span></span><br><span class="line"><span class="params">                     ...user</span></span><br><span class="line"><span class="params">                   &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;master&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//对象合并</span></span><br><span class="line">  <span class="keyword">const</span> skillOne = &#123;</span><br><span class="line">    <span class="attr">q</span>: <span class="string">&#x27;天音波&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> skillTwo = &#123;</span><br><span class="line">    <span class="attr">w</span>: <span class="string">&#x27;金钟罩&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> skillThree = &#123;</span><br><span class="line">    <span class="attr">e</span>: <span class="string">&#x27;天雷破&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> skillFour = &#123;</span><br><span class="line">    <span class="attr">r</span>: <span class="string">&#x27;猛龙摆尾&#x27;</span>,</span><br><span class="line"><span class="comment">// 自己测试，可用</span></span><br><span class="line">    <span class="attr">z</span>: <span class="string">&#x27;胡说八道&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> mangseng = &#123;</span><br><span class="line">    ...skillOne,</span><br><span class="line">    ...skillTwo,</span><br><span class="line">    ...skillThree,</span><br><span class="line">    ...skillFour</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mangseng)</span><br><span class="line">  <span class="comment">// ...skillOne =&gt; q: &#x27;天音波&#x27;, w: &#x27;金钟罩&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-正则扩展：命名捕获分组"><a href="#2-正则扩展：命名捕获分组" class="headerlink" title="2.正则扩展：命名捕获分组"></a>2.正则扩展：命名捕获分组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则扩展：命名捕获分组</span></span><br><span class="line"><span class="comment">// 声明一个字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;訾博&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">// 需求：提取url和标签内文本</span></span><br><span class="line"><span class="comment">// 之前的写法</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span>;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 结果是一个数组，第一个元素是所匹配的所有字符串</span></span><br><span class="line"><span class="comment">// 第二个元素是第一个(.*)匹配到的字符串</span></span><br><span class="line"><span class="comment">// 第三个元素是第二个(.*)匹配到的字符串</span></span><br><span class="line"><span class="comment">// 我们将此称之为捕获</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 命名捕获分组</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>;</span><br><span class="line"><span class="keyword">const</span> result1 = reg1.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line"><span class="comment">// 这里的结果多了一个groups</span></span><br><span class="line"><span class="comment">// groups:</span></span><br><span class="line"><span class="comment">// text:&quot;訾博&quot;</span></span><br><span class="line"><span class="comment">// url:&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1.<span class="property">groups</span>.<span class="property">url</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1.<span class="property">groups</span>.<span class="property">text</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-正则扩展：反向断言"><a href="#3-正则扩展：反向断言" class="headerlink" title="3.正则扩展：反向断言"></a>3.正则扩展：反向断言</h3><p>ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则扩展：反向断言</span></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;JS5201314你知道么555啦啦啦&quot;</span>;</span><br><span class="line"><span class="comment">// 需求：我们只想匹配到555</span></span><br><span class="line"><span class="comment">// 正向断言</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\d+(?=啦)/</span>; <span class="comment">// 前面是数字后面是啦</span></span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 反向断言</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/(?&lt;=么)\d+/</span>; <span class="comment">// 后面是数字前面是么</span></span><br><span class="line"><span class="keyword">const</span> result1 = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br></pre></td></tr></table></figure>

<h3 id="4-正则扩展：dotAll模式"><a href="#4-正则扩展：dotAll模式" class="headerlink" title="4.正则扩展：dotAll模式"></a>4.正则扩展：dotAll模式</h3><p>正则表达式中点.匹配除回车外的任何单字符，标记『s』改变这种行为，允许行终止符出现；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则扩展：dotAll 模式</span></span><br><span class="line"><span class="comment">// dot就是. 元字符，表示除换行符之外的任意单个字符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="comment">// 需求：我们想要将其中的电影名称和对应上映时间提取出来，存到对象</span></span><br><span class="line"><span class="comment">// 之前的写法</span></span><br><span class="line"><span class="comment">// const reg = /&lt;li&gt;\s+&lt;a&gt;(.*?)&lt;\/a&gt;\s+&lt;p&gt;(.*?)&lt;\/p&gt;/;</span></span><br><span class="line"><span class="comment">// dotAll 模式</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s;</span><br><span class="line"><span class="comment">// const result = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line"><span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(str))&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">data.<span class="title function_">push</span>(&#123;<span class="attr">title</span>:result[<span class="number">1</span>],<span class="attr">time</span>:result[<span class="number">2</span>]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h2><h3 id="1-Object-fromEntries"><a href="#1-Object-fromEntries" class="headerlink" title="1.Object.fromEntries"></a>1.Object.fromEntries</h3><p>将二维数组或者map转换成对象； 之前学的Object.entries是将对象转换成二维数组；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.fromEntries：将二维数组或者map转换成对象</span></span><br><span class="line"><span class="comment">// 之前学的Object.entries是将对象转换成二维数组</span></span><br><span class="line"><span class="comment">// 此方法接收的是一个二维数组，或者是一个map集合</span></span><br><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;訾博&quot;</span>],</span><br><span class="line">[<span class="string">&quot;age&quot;</span>,<span class="number">24</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;訾博&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;age&quot;</span>,<span class="number">24</span>);</span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(m);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br></pre></td></tr></table></figure>

<h3 id="2-trimStart和-trimEnd"><a href="#2-trimStart和-trimEnd" class="headerlink" title="2.trimStart和 trimEnd"></a>2.trimStart和 trimEnd</h3><p>去掉字符串前后的空白字符；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// trimStart 和 trimEnd</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot; zibo &quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimLeft</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimRight</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimStart</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimEnd</span>());</span><br></pre></td></tr></table></figure>

<h3 id="3-Array-prototype-flat与flatMap"><a href="#3-Array-prototype-flat与flatMap" class="headerlink" title="3.Array.prototype.flat与flatMap"></a>3.Array.prototype.flat与flatMap</h3><p>将多维数组转换成低维数组；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.flat 与 flatMap</span></span><br><span class="line"><span class="comment">// flat</span></span><br><span class="line"><span class="comment">// 将多维数组转换成低维数组</span></span><br><span class="line"><span class="comment">// 将二维数组转换成一维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>],<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>());</span><br><span class="line"><span class="comment">// 将三维数组转换成二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,[<span class="number">6</span>,<span class="number">7</span>]],<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">flat</span>());</span><br><span class="line"><span class="comment">// 将三维数组转换成一维数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">flat</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// flatMap</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result0 = arr3.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result0);</span><br><span class="line"><span class="keyword">const</span> result = arr3.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="keyword">const</span> result1 = arr3.<span class="title function_">flatMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br></pre></td></tr></table></figure>

<h3 id="4-Symbol-prototype-description"><a href="#4-Symbol-prototype-description" class="headerlink" title="4.Symbol.prototype.description"></a>4.Symbol.prototype.description</h3><p>获取Symbol的描述字符串；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Symbol.prototype.description</span></span><br><span class="line"><span class="comment">// 获取Symbol的描述字符串</span></span><br><span class="line"><span class="comment">// 创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&quot;訾博&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>)</span><br></pre></td></tr></table></figure>

<h2 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a>ES11</h2><h3 id="1-String-prototype-matchAll"><a href="#1-String-prototype-matchAll" class="headerlink" title="1.String.prototype.matchAll"></a>1.String.prototype.matchAll</h3><p>用来得到正则批量匹配的结果；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String.prototype.matchAll</span></span><br><span class="line"><span class="comment">// 用来得到正则批量匹配的结果</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="comment">// 正则</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>sg;</span><br><span class="line"><span class="keyword">const</span> result = str.<span class="title function_">matchAll</span>(reg);</span><br><span class="line"><span class="comment">// 返回的是可迭代对象，可用扩展运算符展开</span></span><br><span class="line"><span class="comment">// console.log(...result);</span></span><br><span class="line"><span class="comment">// 使用for...of...遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> result)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-类的私有属性"><a href="#2-类的私有属性" class="headerlink" title="2.类的私有属性"></a>2.类的私有属性</h3><p>私有属性外部不可访问直接；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类的私有属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 公有属性</span></span><br><span class="line">  name;</span><br><span class="line">  <span class="comment">// 私有属性</span></span><br><span class="line">  #age;</span><br><span class="line">  #weight;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, weight</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.#age = age;</span><br><span class="line">    <span class="variable language_">this</span>.#weight = weight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">intro</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#age);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#weight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> girl = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小兰&quot;</span>, <span class="number">18</span>, <span class="string">&quot;90kg&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl);</span><br><span class="line"><span class="comment">// 公有属性的访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有属性的访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.<span class="property">age</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 报错Private field &#x27;#age&#x27; must be declared in an enclosing class</span></span><br><span class="line"><span class="comment">// console.log(girl.#age);</span></span><br><span class="line">girl.<span class="title function_">intro</span>();</span><br></pre></td></tr></table></figure>

<h3 id="3-Promise-allSettled"><a href="#3-Promise-allSettled" class="headerlink" title="3.Promise.allSettled"></a>3.Promise.allSettled</h3><p>获取多个promise执行的结果集；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise.allSettled</span></span><br><span class="line"><span class="comment">// 获取多个promise执行的结果集</span></span><br><span class="line"><span class="comment">// 声明两个promise对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;商品数据——1&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;失败啦&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用Promise.allSettled方法</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]); <span class="comment">// 注意区别</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br></pre></td></tr></table></figure>

<h3 id="4-可选链操作符"><a href="#4-可选链操作符" class="headerlink" title="4.可选链操作符"></a>4.可选链操作符</h3><p>如果存在则往下走，省略对对象是否传入的层层判断；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可选链操作符</span></span><br><span class="line"><span class="comment">// ?.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 传统写法</span></span><br><span class="line">  <span class="comment">// const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;</span></span><br><span class="line">  <span class="comment">// 可选链操作符写法</span></span><br><span class="line">  <span class="keyword">const</span> dbHost = config?.<span class="property">db</span>?.<span class="property">host</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dbHost);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>(&#123;</span><br><span class="line">  <span class="attr">db</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;192.168.1.100&quot;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;root&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cache</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;192.168.1.200&quot;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-动态import导入"><a href="#5-动态import导入" class="headerlink" title="5.动态import导入"></a>5.动态import导入</h3><p>动态导入模块，什么时候使用时候导入；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;	</span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line">  <span class="comment">// import * as m1 from &quot;./hello.js&quot;; // 传统静态导入</span></span><br><span class="line">  <span class="comment">//获取元素</span></span><br><span class="line">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">module</span>.<span class="title function_">hello</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-BigInt"><a href="#6-BigInt" class="headerlink" title="6.BigInt"></a>6.BigInt</h3><p>更大的整数；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BigInt</span></span><br><span class="line"><span class="comment">// 大整型</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">100n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n,<span class="title function_">typeof</span>(n));</span><br><span class="line"><span class="comment">// 函数：普通整型转大整型</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(m));</span><br><span class="line"><span class="comment">// 用于更大数值的运算</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max+<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max+<span class="number">2</span>); <span class="comment">// 出错了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max)+<span class="title class_">BigInt</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max)+<span class="title class_">BigInt</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<h3 id="7-globalThis对象"><a href="#7-globalThis对象" class="headerlink" title="7.globalThis对象"></a>7.globalThis对象</h3><p>globalThis 对象 : 始终指向全局对象window </p>
]]></content>
      <categories>
        <category>ECMA</category>
      </categories>
      <tags>
        <tag>ECMA</tag>
      </tags>
  </entry>
  <entry>
    <title>react——diff</title>
    <url>/2021/06/10/react/react%20%20diff/</url>
    <content><![CDATA[<h2 id="DOM的Diffing算法"><a href="#DOM的Diffing算法" class="headerlink" title="DOM的Diffing算法"></a>DOM的Diffing算法</h2><p>什么是虚拟DOM<br>当我们更新了state中的值的时候，React会去调用render()方法来重新渲染整个组件的UI，但是如果我们真的去操作这么大量的DOM，显然性能是堪忧的。所以React实现了一个Virtual DOM，组件的真实DOM结构和Virtual DOM之间有一个映射的关系，React在虚拟DOM上实现了一个diff算法，当render()去重新渲染组件的时候，diff会找到需要变更的DOM，然后再把修改更新到浏览器上面的真实DOM上，所以，React并不是渲染了整个DOM树，Virtual DOM就是JS数据结构，所以比原生的DOM快得多。</p>
<h3 id="virtual-dom-基本步骤"><a href="#virtual-dom-基本步骤" class="headerlink" title="virtual dom 基本步骤"></a>virtual dom 基本步骤</h3><p>①用JS对象构建一颗虚拟DOM树，然后用虚拟树构建一颗真实的DOM树，然后插入到文档中。<br>②当状态变更时，重新构造一颗新的对象树，然后新树旧树进行比较，记录两树差异。<br>③把步骤2的差异应用到步骤1所构建的真实DOM树上，视图就更新了。</p>
<h3 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h3><p>其实React的 <code>virtual dom</code>的性能好也离不开它本身特殊的<code>diff</code>算法。传统的<code>diff</code>算法时间复杂度达到o(n3)，而react的<code>diff</code>算法时间复杂度只是o(n)，react的diff能减少到o(n)依靠的是<code>react diff</code>的三大策略。</p>
<h3 id="传统diff-对比-react-diff"><a href="#传统diff-对比-react-diff" class="headerlink" title="传统diff 对比 react diff"></a>传统diff 对比 react diff</h3><p>传统的diff算法追求的是“完全”以及“最小”，而react diff则是放弃了这两种追求：<br>在传统的diff算法下，对比前后两个节点，如果发现节点改变了，会继续去比较节点的子节点，一层一层去对比。就这样循环递归去进行对比，复杂度就达到了o(n3)，n是树的节点数，想象一下如果这棵树有1000个节点，我们得执行上十亿次比较，这种量级的对比次数，时间基本要用秒来做计数单位了。那么react究竟是如何把复杂度降低到o(n)的呢？</p>
<h3 id="React-diff-三大策略"><a href="#React-diff-三大策略" class="headerlink" title="React diff 三大策略"></a>React diff 三大策略</h3><p>策略一（tree diff）：Web UI中DOM节点跨层级的移动操作特别少，可以忽略不计。（DOM结构发生改变—–直接卸载并重新creat）<br>策略二（component diff）：DOM结构一样—–不会卸载,但是会update<br>策略三（element diff）：所有同一层级的子节点.他们都可以通过key来区分—–同时遵循1.2两点</p>
<h4 id="虚拟DOM树分层比较（tree-diff）"><a href="#虚拟DOM树分层比较（tree-diff）" class="headerlink" title="虚拟DOM树分层比较（tree diff）"></a>虚拟DOM树分层比较（tree diff）</h4><p>两棵树只会对同一层次的节点进行比较，忽略DOM节点跨层级的移动操作。React只会对相同颜色方框内的DOM节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个DOM树的比较。由此一来，最直接的提升就是复杂度变为线型增长而不是原先的指数增长。<br><img src="https://img-blog.csdnimg.cn/20181213112349545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDA3ODc1,size_16,color_FFFFFF,t_70" alt="Diff"></p>
<h4 id="组件间的比较（component-diff）"><a href="#组件间的比较（component-diff）" class="headerlink" title="组件间的比较（component diff）"></a>组件间的比较（component diff）</h4><p>如果是同一个类型的组件，则按照原策略进行Virtual DOM比较。<br>如果不是同一类型的组件，则将其判断为dirty component，从而替换整个组价下的所有子节点。<br>如果是同一个类型的组件，有可能经过一轮Virtual DOM比较下来，并没有发生变化。如果我们能够提前确切知道这一点，那么就可以省下大量的diff运算时间。因此，React允许用户通过shouldComponentUpdate()来判断该组件是否需要进行diff算法分析。</p>
<p><img src="https://img-blog.csdnimg.cn/20181213152745415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NDA3ODc1,size_16,color_FFFFFF,t_70" alt="组件对比"></p>
<p>如上图所示，当组件D变为组件G时，哪怕这两个组件结构相似，一旦React判断D和G是不用类型的组件，就不会比较两者的结构，而是直接删除组件D，重新创建组件G及其子节点。也就是说，如果当两个组件是不同类型但结构相似时，其实进行diff算法分析会影响性能，但是毕竟不同类型的组件存在相似DOM树的情况在实际开发过程中很少出现，因此这种极端因素很难在实际开发过程中造成重大影响。</p>
<h4 id="元素间的比较（element-diff）"><a href="#元素间的比较（element-diff）" class="headerlink" title="元素间的比较（element diff）"></a>元素间的比较（element diff）</h4><p>当节点处于同一层级的时候，react diff 提供了三种节点操作：插入、删除、移动。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>插入</td>
<td>新节点不存在于老集合当中，即全新的节点，就会执行插入操作</td>
</tr>
<tr>
<td>移动</td>
<td>新节点在老集合中存在，并且只做了位置上的更新，就会复用之前的节点，做移动操作（依赖于Key）</td>
</tr>
<tr>
<td>删除</td>
<td>新节点在老集合中存在，但节点做出了更改不能直接复用，做出删除操作</td>
</tr>
</tbody></table>
<p>经典面试题：</p>
<p>1.react/vue中的key有什么作用？（key的内部原理是什么）</p>
<p>2.为什么遍历列表时，key最好不用index</p>
<p>1.虚拟DOM中key的作用：</p>
<ol>
<li>简单的说：key是虚拟DOM对象的标识，在更新显示时，key起着至关重要的作用</li>
<li>详细的说：当状态中的数据发生变化时，react会根据新数据生成新的虚拟DOM，随后react进行新虚拟DOM和旧虚拟DOM的diff对比，比较规则如下<ol>
<li>旧虚拟 DOM中找到了与新虚拟DOM相同的key：<ol>
<li>若虚拟DOM中内容没有变化，直接使用之前的真实DOM</li>
<li>若虚拟DOM中的内容变了，则生成真实DOM，随后替换掉页面之前的真实DOM</li>
</ol>
</li>
<li>旧虚拟DOM中未找到与新虚拟DOM相同的key<ol>
<li>根据数据创建新的真实DOM，随后渲染到页面</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>2.用index作为key可能引发的问题</p>
<ol>
<li>若对数据进行：逆序添加、逆序删除等破坏顺序的操作：会产生没有必要的真实DOM更新 ==&gt; 页面没有问题，但是效率会很低</li>
<li>如果结构中还包含输入类DOM：会产生错误DOM == &gt; 页面有问题</li>
</ol>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">		<span class="variable language_">super</span>(props)</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">			<span class="attr">list</span>: [&#123;<span class="attr">id</span>: <span class="number">1</span>,<span class="attr">val</span>: <span class="string">&#x27;A&#x27;</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">val</span>: <span class="string">&#x27;B&#x27;</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">val</span>: <span class="string">&#x27;C&#x27;</span>&#125;]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">reverse</span>()</span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                	this.state.list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                        return (</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">val</span>=<span class="string">&#123;item.val&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                		)</span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.click.bind(this)&#125;</span>&gt;</span>Reverse<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Li</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">		<span class="variable language_">super</span>(props)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;===mount===&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">componentWillUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;===update====&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;this.props.val&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——hooks(拓展hook之useImperativeHandle、useLayoutEffect、useDebugValue)</title>
    <url>/2022/06/15/react/react%20hooks(%E4%B8%89)/</url>
    <content><![CDATA[<h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>
<h3 id="7-useImperativeHandle"><a href="#7-useImperativeHandle" class="headerlink" title="7.useImperativeHandle"></a>7.useImperativeHandle</h3><p><code>useImperativeHandle</code> 可以让你在使用 <code>ref</code> 时自定义暴露给父组件的实例值。在大多数情况下，应当避免使用 ref 这样的命令式代码。<code>useImperativeHandle</code> 应当与 <a href="https://react.docschina.org/docs/react-api.html#reactforwardref"><code>forwardRef</code></a> 一起使用：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FancyInput</span>(<span class="params">props, ref</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>();</span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">focus</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> <span class="attr">...</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">FancyInput</span> = <span class="title function_">forwardRef</span>(<span class="title class_">FancyInput</span>);</span><br></pre></td></tr></table></figure>

<p>在本例中，渲染 <code>&lt;FancyInput ref=&#123;inputRef&#125; /&gt;</code> 的父组件可以调用 <code>inputRef.current.focus()</code>。</p>
<h3 id="8-useLayoutEffect"><a href="#8-useLayoutEffect" class="headerlink" title="8.useLayoutEffect"></a>8.useLayoutEffect</h3><p>1.useEffect会在渲染的内容更新到DOM上后执行,不会阻塞DOM的更新<br>2.useLayoutEffect会在渲染的内容更新到DOM上之前进行,会阻塞DOM的更新</p>
<p>其函数签名与 <code>useEffect</code> 相同，但它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前，<code>useLayoutEffect</code> 内部的更新计划将被同步刷新。</p>
<p>尽可能使用标准的 <code>useEffect</code> 以避免阻塞视觉更新。</p>
<p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState, useEffect, useLayoutEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">UseLayoutEffect</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count,setCount] = <span class="title function_">useState</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(count ===<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[count])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>数字:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>setCount(0)&#125;&gt;修改数字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们把count变成一个随机数， 虽然可以实现，但是当我们点击修改的时候其实是有一个闪烁的 因为它先把数字变为了0，再变成了随机数</p>
<p>但是当我们这样写把里面的useEffect换成了useLayoutEffect，页面就不会发生这个闪烁了，这个useLayoutEffect其实在开发中不太常用，一些特殊情况才会用。</p>
<h3 id="9-useDebugValue"><a href="#9-useDebugValue" class="headerlink" title="9.useDebugValue"></a>9.useDebugValue</h3><p><code>useDebugValue</code> 可用于在 React 开发者工具中显示自定义 hook 的标签。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useFriendStatus</span>(<span class="params">friendID</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在开发者工具中的这个 Hook 旁边显示标签  // e.g. &quot;FriendStatus: Online&quot;  useDebugValue(isOnline ? &#x27;Online&#x27; : &#x27;Offline&#x27;);</span></span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在某些情况下，格式化值的显示可能是一项开销很大的操作。除非需要检查 Hook，否则没有必要这么做。</p>
<p>因此，<code>useDebugValue</code> 接受一个格式化函数作为可选的第二个参数。该函数只有在 Hook 被检查时才会被调用。它接受 debug 值作为参数，并且会返回一个格式化的显示值。</p>
<p>例如，一个返回 <code>Date</code> 值的自定义 Hook 可以通过格式化函数来避免不必要的 <code>toDateString</code> 函数调用：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useDebugValue</span>(date, <span class="function"><span class="params">date</span> =&gt;</span> date.<span class="title function_">toDateString</span>());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——hooks(基础hook)</title>
    <url>/2022/06/15/react/react%20hooks(%E4%B8%80)/</url>
    <content><![CDATA[<h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>
<h3 id="1-useState"><a href="#1-useState" class="headerlink" title="1.useState()"></a>1.useState()</h3><p><strong>调用 useState 方法的时候做了什么?</strong> 它定义一个 “state 变量”。我们的变量叫 <code>count</code>， 但是我们可以叫他任何名字，比如 <code>banana</code>。这是一种在函数调用时保存变量的方式 —— <code>useState</code> 是一种新方法，它与 class 里面的 <code>this.state</code> 提供的功能完全相同。一般来说，在函数退出后变量就会”消失”，而 state 中的变量会被 React 保留。</p>
<p><strong>useState 需要哪些参数？</strong> <code>useState()</code> 方法里面唯一的参数就是初始 state。不同于 class 的是，我们可以按照需要使用数字或字符串对其进行赋值，而不一定是对象。在示例中，只需使用数字来记录用户点击次数，所以我们传了 <code>0</code> 作为变量的初始 state。（如果我们想要在 state 中存储两个不同的变量，只需调用 <code>useState()</code> 两次即可。）</p>
<p><strong>useState 方法的返回值是什么？</strong> 返回值为：当前 state 以及更新 state 的函数。这就是我们写 <code>const [count, setCount] = useState()</code> 的原因。这与 class 里面 <code>this.state.count</code> 和 <code>this.setState</code> 类似，唯一区别就是你需要成对的获取它们。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [name,setName] = <span class="title function_">useState</span>(<span class="string">&quot;sola&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> [age,setAge] = <span class="title function_">useState</span>(<span class="number">100</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setName(&quot;jerry&quot;);</span></span><br><span class="line"><span class="language-xml">          setAge(12)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        app -&#123;name&#125;</span></span><br><span class="line"><span class="language-xml">        age -&#123;age&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2.useEffect()"></a>2.useEffect()</h3><p><em>Effect Hook</em> 可以让你在函数组件中执行副作用操作,有时候，我们只想<strong>在 React 更新 DOM 之后运行一些额外的代码。</strong>比如发送网络请求，手动变更 DOM，记录日志，这些都是常见的无需清除的操作。</p>
<p><strong>useEffect 做了什么？</strong> 通过使用这个 Hook，你可以告诉 React 组件需要在渲染后执行某些操作。React 会保存你传递的函数（我们将它称之为 “effect”），并且在执行 DOM 更新之后调用它。在这个 effect 中，我们设置了 document 的 title 属性，不过我们也可以执行数据获取或调用其他命令式的 API。</p>
<p><strong>为什么在组件内部调用 useEffect？</strong> 将 <code>useEffect</code> 放在组件内部让我们可以在 effect 中直接访问 <code>count</code> state 变量（或其他 props）。我们不需要特殊的 API 来读取它 —— 它已经保存在函数作用域中。Hook 使用了 JavaScript 的闭包机制，而不用在 JavaScript 已经提供了解决方案的情况下，还引入特定的 React API。</p>
<p><strong>useEffect 会在每次渲染后都执行吗？</strong> 是的，默认情况下，它在第一次渲染之后<em>和</em>每次更新之后都会执行。你可能会更容易接受 effect 发生在“渲染之后”这种概念，不用再去考虑“挂载”还是“更新”。React 保证了每次运行 effect 的同时，DOM 都已经更新完毕。</p>
<h4 id="不需要清除的effect"><a href="#不需要清除的effect" class="headerlink" title="不需要清除的effect"></a><strong>不需要清除的effect</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="需要清除的effect"><a href="#需要清除的effect" class="headerlink" title="需要清除的effect"></a><strong>需要清除的effect</strong></h4><p>之前，我们研究了如何使用不需要清除的副作用，还有一些副作用是需要清除的。例如<strong>订阅外部数据源</strong>。这种情况下，清除工作是非常重要的，可以防止引起内存泄露！</p>
<p>如果你的 effect 返回一个函数，React 将会在执行清除操作时调用它：</p>
<p><strong>为什么要在 effect 中返回一个函数？</strong> 这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。</p>
<p><strong>React 何时清除 effect？</strong> React 会在组件卸载的时候执行清除操作。正如之前学到的，effect 在每次渲染的时候都会执行。这就是为什么 React <em>会</em>在执行当前 effect 之前对上一个 effect 进行清除。我们稍后将讨论<a href="https://react.docschina.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update">为什么这将助于避免 bug</a>以及<a href="https://react.docschina.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects">如何在遇到性能问题时跳过此行为</a>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>, useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">isShow</span>:<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">              isShow:!this.state.isShow</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.state.isShow &amp;&amp; <span class="tag">&lt;<span class="name">Child</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resize&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="literal">null</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    child</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="使用多个-Effect-实现关注点分离"><a href="#使用多个-Effect-实现关注点分离" class="headerlink" title="使用多个 Effect 实现关注点分离"></a><strong>使用多个 Effect 实现关注点分离</strong></h4><p><strong>Hook 允许我们按照代码的用途分离他们，</strong> 而不是像生命周期函数那样。React 将按照 effect 声明的顺序依次调用组件中的<em>每一个</em> effect。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FriendStatusWithCounter</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleStatusChange</span>(<span class="params">status</span>) &#123;</span><br><span class="line">      <span class="title function_">setIsOnline</span>(status.<span class="property">isOnline</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">ChatAPI</span>.<span class="title function_">subscribeToFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">ChatAPI</span>.<span class="title function_">unsubscribeFromFriendStatus</span>(props.<span class="property">friend</span>.<span class="property">id</span>, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="通过跳过-Effect-进行性能优化"><a href="#通过跳过-Effect-进行性能优化" class="headerlink" title="通过跳过 Effect 进行性能优化"></a><strong>通过跳过 Effect 进行性能优化</strong></h4><p>如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React <strong>跳过</strong>对 effect 的调用，只要传递数组作为 <code>useEffect</code> 的第二个可选参数即可。对于有清除操作的 effect 同样适用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// 仅在 count 更改时更新</span></span><br></pre></td></tr></table></figure>

<h3 id="3-useContext"><a href="#3-useContext" class="headerlink" title="3.useContext()"></a>3.useContext()</h3><p>Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。举个例子，在下面的代码中，我们通过一个 “theme” 属性手动调整一个按钮组件的样式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。</span></span><br><span class="line"><span class="comment">// 为当前的 theme 创建一个 context（“light”为默认值）。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="string">&#x27;light&#x27;</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用一个 Provider 来将当前的 theme 传递给以下的组件树。</span></span><br><span class="line">    <span class="comment">// 无论多深，任何组件都能读取这个值。</span></span><br><span class="line">    <span class="comment">// 在这个例子中，我们将 “dark” 作为当前的值传递下去。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&quot;dark&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Toolbar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间的组件再也不必指明往下传递 theme 了。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Toolbar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemedButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThemedButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 指定 contextType 读取当前的 theme context。</span></span><br><span class="line">  <span class="comment">// React 会往上找到最近的 theme Provider，然后使用它的值。</span></span><br><span class="line">  <span class="comment">// 在这个例子中，当前的 theme 值为 “dark”。</span></span><br><span class="line">  <span class="keyword">static</span> contextType = <span class="title class_">ThemeContext</span>;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">theme</span>=<span class="string">&#123;this.context&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Context-Provider"><a href="#Context-Provider" class="headerlink" title="Context.Provider"></a>Context.Provider</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyContext</span>.<span class="property">Provider</span> value=&#123;<span class="comment">/* 某个值 */</span>&#125;&gt;</span><br></pre></td></tr></table></figure>

<p>每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。</p>
<p>Provider 接收一个 <code>value</code> 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。</p>
<p>当 Provider 的 <code>value</code> 值发生变化时，它内部的所有消费组件都会重新渲染。从 Provider 到其内部 consumer 组件（包括 <a href="https://react.docschina.org/docs/context.html#classcontexttype">.contextType</a> 和 <a href="https://react.docschina.org/docs/hooks-reference.html#usecontext">useContext</a>）的传播不受制于 <code>shouldComponentUpdate</code> 函数，因此当 consumer 组件在其祖先组件跳过更新的情况下也能更新。</p>
<h4 id="Class-contextType"><a href="#Class-contextType" class="headerlink" title="Class.contextType"></a>Class.contextType</h4><p>挂载在 class 上的 <code>contextType</code> 属性可以赋值为由 <a href="https://react.docschina.org/docs/context.html#reactcreatecontext"><code>React.createContext()</code></a> 创建的 Context 对象。此属性可以让你使用 <code>this.context</code> 来获取最近 Context 上的值。你可以在任何生命周期中访问到它，包括 render 函数中。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">    <span class="comment">/* 在组件挂载完成后，使用 MyContext 组件的值来执行一些有副作用的操作 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">    <span class="comment">/* 基于 MyContext 组件的值进行渲染 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property">contextType</span> = <span class="title class_">MyContext</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Context-Consumer"><a href="#Context-Consumer" class="headerlink" title="Context.Consumer"></a>Context.Consumer</h4><p>一个 React 组件可以订阅 context 的变更，此组件可以让你在<a href="https://react.docschina.org/docs/components-and-props.html#function-and-class-components">函数式组件</a>中可以订阅 context。</p>
<p>这种方法需要一个<a href="https://react.docschina.org/docs/render-props.html#using-props-other-than-render">函数作为子元素（function as a child）</a>。这个函数接收当前的 context 值，并返回一个 React 节点。传递给函数的 <code>value</code> 值等价于组件树上方离这个 context 最近的 Provider 提供的 <code>value</code> 值。如果没有对应的 Provider，<code>value</code> 参数等同于传递给 <code>createContext()</code> 的 <code>defaultValue</code>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyContext</span>.<span class="property">Consumer</span>&gt;</span><br><span class="line">  &#123;<span class="function"><span class="params">value</span> =&gt;</span> <span class="comment">/* 基于 context 值进行渲*/</span>&#125;</span><br><span class="line">&lt;/<span class="title class_">MyContext</span>.<span class="property">Consumer</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Context-displayName"><a href="#Context-displayName" class="headerlink" title="Context.displayName"></a>Context.displayName</h4><p>context 对象接受一个名为 <code>displayName</code> 的 property，类型为字符串。React DevTools 使用该字符串来确定 context 要显示的内容。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="comment">/* some value */</span>);</span><br><span class="line"><span class="title class_">MyContext</span>.<span class="property">displayName</span> = <span class="string">&#x27;MyDisplayName&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">MyContext</span>.<span class="property">Provider</span>&gt; <span class="comment">// &quot;MyDisplayName.Provider&quot; 在 DevTools 中</span></span><br><span class="line">&lt;<span class="title class_">MyContext</span>.<span class="property">Consumer</span>&gt; <span class="comment">// &quot;MyDisplayName.Consumer&quot; 在 DevTools 中</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>, useContext, useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/03-communication.css&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GlobalContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [filmList, setFilmlist] = <span class="title function_">useState</span>([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;filmId&quot;</span>: <span class="number">5386</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;我的姐姐&quot;</span>,</span><br><span class="line">        <span class="string">&quot;poster&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/75c67d58c49822d782561cdcca65189c.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;actors&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;殷若昕&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;导演&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/5c9574f920a21bfea0a35b0557c6dd43.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张子枫&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;安然&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/2bddc157bd0faf6029bbae14ba8d92fc.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖央&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;舅舅&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/3ce5eeb8f056391d655c2d0a6ec35675.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;金遥源&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;弟弟&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/ecda1a57d366c843f28dc68293d4ae63.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;王圣迪&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;童年安然&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/a7eb39e0b652da91c4e3a1c1c7a17a85.jpg&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;director&quot;</span>: <span class="string">&quot;殷若昕&quot;</span>,</span><br><span class="line">        <span class="string">&quot;category&quot;</span>: <span class="string">&quot;剧情|家庭&quot;</span>,</span><br><span class="line">        <span class="string">&quot;synopsis&quot;</span>: <span class="string">&quot;电影讲述失去父母的姐姐在面对追求个人独立生活还是抚养弟弟的问题上展开的一段亲情故事。&quot;</span>,</span><br><span class="line">        <span class="string">&quot;filmType&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;nation&quot;</span>: <span class="string">&quot;中国大陆&quot;</span>,</span><br><span class="line">        <span class="string">&quot;language&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;videoId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;premiereAt&quot;</span>: <span class="number">1617321600</span>,</span><br><span class="line">        <span class="string">&quot;timeType&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;runtime&quot;</span>: <span class="number">127</span>,</span><br><span class="line">        <span class="string">&quot;grade&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;item&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;isPresale&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;isSale&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;filmId&quot;</span>: <span class="number">5391</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;哥斯拉大战金刚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;poster&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/b624c348ee645c004b1e349dbe162ec9.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;actors&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;亚当·温加德&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;导演&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/885b9e96f320408abfc9d172588e753a.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;亚历山大·斯卡斯加德&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Nathan Lind&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/8e6b49c18a8311d8665bf013ea1aa73a.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;米莉·波比·布朗&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Madison Russell&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/c05f1e2481e04f737cd91f4d03c9ff85.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;丽贝卡·豪尔&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Ilene Andrews&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/290e19d60a61ecc877bcd20d1969c599.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;布莱恩·泰里·亨利&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Bernie Hayes&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/323a79599476310db5bde745910857e4.jpg&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;director&quot;</span>: <span class="string">&quot;亚当·温加德&quot;</span>,</span><br><span class="line">        <span class="string">&quot;category&quot;</span>: <span class="string">&quot;动作|冒险&quot;</span>,</span><br><span class="line">        <span class="string">&quot;synopsis&quot;</span>: <span class="string">&quot;影片中，这两位宛如神衹一般强大的对手于一场壮观的战争中相遇，彼时世界命运正悬于一线。为了找到真正的家园，金刚与他的保护者们踏上了一次艰难的旅程。与他们一道前行的还有一个年轻的孤儿女孩——吉雅，这个女孩与金刚之间存在着一种独特而强大的紧密联系。但意想不到的是，他们在前行的航道上与愤怒的哥斯拉狭路相逢，也由此在全球引起了一系列破坏。一股无形的力量造成了这两只巨兽之间的巨大冲突，深藏在地心深处的奥秘也由此揭开。&quot;</span>,</span><br><span class="line">        <span class="string">&quot;filmType&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;nation&quot;</span>: <span class="string">&quot;美国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;language&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;videoId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;premiereAt&quot;</span>: <span class="number">1616716800</span>,</span><br><span class="line">        <span class="string">&quot;timeType&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;runtime&quot;</span>: <span class="number">113</span>,</span><br><span class="line">        <span class="string">&quot;grade&quot;</span>: <span class="string">&quot;7.2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;item&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;isPresale&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;isSale&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,)</span><br><span class="line">  <span class="keyword">const</span> [info, setInfo] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">GlobalContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">call:</span> &#x27;<span class="attr">phone</span>&#x27;, <span class="attr">info:</span> <span class="attr">info</span>, <span class="attr">changeInfo:</span> (<span class="attr">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setInfo(value)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            filmList.map(item =&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">FilmItem</span> <span class="attr">key</span>=<span class="string">&#123;item.filmId&#125;</span>  &#123;<span class="attr">...item</span>&#125;  /&gt;</span></span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">FilmDetail</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">GlobalContext.Provider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FilmItem</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useContext</span>(<span class="title class_">GlobalContext</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="keyword">let</span> &#123;name, poster, grade, synopsis&#125; = props</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filmItem&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        value.changeInfo(synopsis)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;poster&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>观众评分：&#123;grade&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FilmDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useContext</span>(<span class="title class_">GlobalContext</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filmdetail&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        detail-&#123;value.info&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——hooks(拓展hook之useReduce、useMemo、useCallback、useRef)</title>
    <url>/2022/06/15/react/react%20hooks(%E4%BA%8C)/</url>
    <content><![CDATA[<h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>
<h3 id="4-useReduce"><a href="#4-useReduce" class="headerlink" title="4.useReduce()"></a>4.useReduce()</h3><p><a href="https://react.docschina.org/docs/hooks-reference.html#usestate"><code>useState</code></a> 的替代方案。它接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 以及与其配套的 <code>dispatch</code> 方法。</p>
<p>在某些场景下，<code>useReducer</code> 会比 <code>useState</code> 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 <code>useReducer</code> 还能给那些会触发深更新的组件做性能优化，因为<a href="https://react.docschina.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down">你可以向子组件传递 <code>dispatch</code> 而不是回调函数</a> 。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="惰性初始化"><a href="#惰性初始化" class="headerlink" title="惰性初始化"></a>惰性初始化</h4><p>你可以选择惰性地创建初始 state。为此，需要将 <code>init</code> 函数作为 <code>useReducer</code> 的第三个参数传入，这样初始 state 将被设置为 <code>init(initialArg)</code>。</p>
<p>这么做可以将用于计算 state 的逻辑提取到 reducer 外部，这也为将来对重置 state 的 action 做处理提供了便利：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">initialCount</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">count</span>: initialCount&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;reset&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">init</span>(action.<span class="property">payload</span>);</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params">&#123;initialCount&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialCount, init);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;reset&#x27;, payload: initialCount&#125;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Reset</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-useMemo-与useCallback"><a href="#5-useMemo-与useCallback" class="headerlink" title="5.useMemo()与useCallback()"></a>5.useMemo()与useCallback()</h3><p>把内联回调函数及依赖项数组作为参数传入 <code>useCallback</code>，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 <code>shouldComponentUpdate</code>）的子组件时，它将非常有用。</p>
<p>memo是用来优化<strong>函数组件</strong>的重渲染问题，当传入的属性值都没变化时就不会触发组件的重渲染，否则组件就会重渲染。和类组件中的<code>PureComponent</code>组件是类似。</p>
<p>useMemo功能是判断组件中的函数逻辑是否重新执行，用来优化性能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// , PureComponent, memo, useState, useMemo, useCallback</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Count</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件count值：&#123;props.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//第一个参数是要执行的函数</span></span><br><span class="line">  <span class="comment">//第二个参数是执行函数依赖的变量组成的数据</span></span><br><span class="line">  <span class="comment">//这里只有count发生变化double才会重新计算</span></span><br><span class="line">  <span class="keyword">const</span> double = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> count * <span class="number">2</span>;</span><br><span class="line">  &#125;, [count])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件count值：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Count</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Add</span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>double值：&#123;double&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>此时的父组件、子组件以及double值都会随着一起改变</p>
<p><img src="https://img-blog.csdnimg.cn/20200116115348635.gif" alt="在这里插入图片描述"></p>
<p>现在修改传入函数的值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> double = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> count * <span class="number">2</span>;</span><br><span class="line">&#125;, [count===<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://img-blog.csdnimg.cn/20200116115517936.gif" alt="在这里插入图片描述"></p>
<p><code>count===3</code>会从false变为true，再变成false。中间发生了两次变化。所以double的值发生了两次变化。</p>
<p>接着优化组件渲染问题：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, memo, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// , PureComponent, memo, useState, useMemo, useCallback</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Count</span> = <span class="title function_">memo</span>(<span class="keyword">function</span> <span class="title function_">Count</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count render&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件count值：&#123;props.double&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//第一个参数是要执行的函数</span></span><br><span class="line">  <span class="comment">//第二个参数是执行函数依赖的变量组成的数据</span></span><br><span class="line">  <span class="comment">//这里只有count发生变化double才会重新计算</span></span><br><span class="line">  <span class="keyword">const</span> double = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> count * <span class="number">2</span>;</span><br><span class="line">  &#125;, [count === <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件count值：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Count</span> <span class="attr">double</span>=<span class="string">&#123;double&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Add</span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>double值：&#123;double&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://img-blog.csdnimg.cn/2020011612024960.gif" alt="在这里插入图片描述"></p>
<p>接着向Count子组件中传入onClick方法，看Count子组件是否会被重新渲染：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, memo, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// , PureComponent, memo, useState, useMemo, useCallback</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Count</span> = <span class="title function_">memo</span>(<span class="keyword">function</span> <span class="title function_">Count</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count render&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span>子组件count值：&#123;props.double&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//第一个参数是要执行的函数</span></span><br><span class="line">  <span class="comment">//第二个参数是执行函数依赖的变量组成的数据</span></span><br><span class="line">  <span class="comment">//这里只有count发生变化double才会重新计算</span></span><br><span class="line">  <span class="keyword">const</span> double = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> count * <span class="number">2</span>;</span><br><span class="line">  &#125;, [count === <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onClick</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件count值：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Count</span> <span class="attr">double</span>=<span class="string">&#123;double&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Add</span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>double值：&#123;double&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://img-blog.csdnimg.cn/20200116120603456.gif" alt="在这里插入图片描述"></p>
<p>App父组件发生变化重新渲染后，onClick句柄也发生了变化，导致Count子组件每次也会被重渲染，即使传入的double值没有发生变化。此时就需要让onClick句柄不发生变化。让onClick为<code>useMemo</code>的返回值：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const onClick = () =&gt;&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;click&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这样返回的函数就会在组件重渲染时产生相同的句柄</span></span><br><span class="line"><span class="keyword">const</span> onClick = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//这里返回的依然是函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果<code>useMemo</code>返回的是一个函数，则可以用<code>useCallback</code>省略顶层的函数。 将包裹的onClick函数用<code>useCallback</code>包裹：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const onClick = () =&gt;&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;click&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这样返回的函数就会在组件重渲染时产生相同的句柄</span></span><br><span class="line"><span class="comment">//useMemo使用</span></span><br><span class="line"><span class="comment">// const onClick = useMemo(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   //这里返回的依然是函数</span></span><br><span class="line"><span class="comment">//   return () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;click&#x27;)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;, []);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//useCallback使用</span></span><br><span class="line"><span class="keyword">const</span> onClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>

<p>因此<code>useCallback</code>是<code>useMemo</code>的变体。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useMemo</span>(<span class="function">()=&gt;</span><span class="keyword">return</span> fn,deps);</span><br><span class="line"><span class="comment">//等价</span></span><br><span class="line"><span class="title function_">useCallback</span>(fn,deps);</span><br></pre></td></tr></table></figure>

<h3 id="6-useRef"><a href="#6-useRef" class="headerlink" title="6.useRef"></a>6.useRef</h3><p><code>useRef</code> 返回一个可变的 ref 对象，其 <code>.current</code> 属性被初始化为传入的参数（<code>initialValue</code>）。返回的 ref 对象在组件的整个生命周期内持续存在。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TextInputWithFocusButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onButtonClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class="line">    inputEl.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——入门</title>
    <url>/2020/04/06/react/react%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="React起源与发展"><a href="#React起源与发展" class="headerlink" title="React起源与发展"></a>React起源与发展</h2><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了</p>
<p>当前版本：18.1.0</p>
<p>什么是React？</p>
<ul>
<li>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。</li>
</ul>
<h3 id="react特点"><a href="#react特点" class="headerlink" title="react特点"></a>react特点</h3><p><img src="/images/react/1.png"></p>
<h2 id="JSX语法规则"><a href="#JSX语法规则" class="headerlink" title="JSX语法规则"></a>JSX语法规则</h2><p>JSX 是javaScript语法的扩展，如同tsx是typescript的扩展一样。</p>
<p>JSX 将 HTML 语法直接加入到 JavaScript 代码中，再通过翻译器转换到纯 JavaScript 后由浏览器执行。在实际开发中，JSX 在产品打包阶段都已经编译成纯 JavaScript，不会带来任何副作用，反而会让代码更加直观并易于维护。编译过程由Babel 的 JSX 编译器实现。</p>
<ol>
<li>定义虚拟dom不要写引号</li>
<li>标签中混入JS表达式时要引用<code>&#123;&#125;</code></li>
<li>样式的类名指定不要用class，要用className</li>
<li>内联样式，要用 <code>style=&#123;&#123;key:value&#125;&#125;</code></li>
<li>虚拟dom 必须只有一个根标签</li>
<li>标签必须闭合</li>
<li>标签首字母<ol>
<li>若小写字母开头，则将该标签转成html中同名元素</li>
<li>若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错</li>
</ol>
</li>
</ol>
<h2 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h2><h3 id="1-函数式组件"><a href="#1-函数式组件" class="headerlink" title="1.函数式组件"></a>1.函数式组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.创建函数式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// 此处的this是undefined 因为babel开启了严格模式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件，适用于简单组件的定义<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-类式组件"><a href="#2-类式组件" class="headerlink" title="2.类式组件"></a>2.类式组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// render是放在哪里的 MyComponent的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件，适用于复杂组件的定义<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——hooks(拓展hook之useTransition、useDeferredValue、useId)</title>
    <url>/2022/06/15/react/react%20hooks(%E5%9B%9B)/</url>
    <content><![CDATA[<h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>
<h3 id="10-useTransition与useDeferredValue（React18）"><a href="#10-useTransition与useDeferredValue（React18）" class="headerlink" title="10.useTransition与useDeferredValue（React18）"></a>10.useTransition与useDeferredValue（React18）</h3><p>1.对于同一资源的优化，这两个接口提供的优化效果是一样的，因此不需要同时使用，一旦使用两个中的任意一个都会带来一定性能上的损耗</p>
<p>2.建议只有数量大的时候 考虑使用这两个接口中的一个，平时的普通组件不需要使用。</p>
<p>3.两个接口的区别：</p>
<ul>
<li>useTransition是用来处理更新函数的。useTransition的优点在于一次性可以处理好几个更新函数</li>
<li>useDeferredValue是用来处理更新函数执行后所更新的数据本身 的。有些情况，你并不能直接获得更新函数，比如第三方的hooks库，这时就只能使用useDeferredValue</li>
</ul>
<p>当交互的时效性没有那么强的操作时，可以通过该api，将数据放入到慢速通道中</p>
<p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useDeferredValue, useState, useTransition&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Product</span> = (<span class="params">&#123;product&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;product&quot;</span>&gt;</span>&#123;product.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getProductData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> products = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    products.<span class="title function_">push</span>(&#123;<span class="attr">id</span>: i, <span class="attr">name</span>: <span class="string">&#x27;产品&#x27;</span> + i&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> products;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TransitionApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [searchText, setSearchText] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> [isPending, startTransition] = <span class="title function_">useTransition</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">filterProducts</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!searchText) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getProductData</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getProductData</span>().<span class="title function_">filter</span>(<span class="function"><span class="params">product</span> =&gt;</span> product.<span class="property">name</span>.<span class="title function_">includes</span>(searchText))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> products = <span class="title function_">filterProducts</span>()</span><br><span class="line">  <span class="comment">// useDeferredValue主要用于将得到的值进行处理进入慢速通道</span></span><br><span class="line">  <span class="keyword">const</span> deferredValue = <span class="title function_">useDeferredValue</span>(products);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleFilterChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// useTransition主要用于处理回调，并且可以同时处理多个数据处理函数</span></span><br><span class="line">    <span class="comment">// startTransition(()  =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   setSearchText(e.target.value)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="title function_">setSearchText</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;search&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&#x27;输入产品名称&#x27;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleFilterChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;products.map((product, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (<span class="tag">&lt;<span class="name">Product</span> <span class="attr">product</span>=<span class="string">&#123;product&#125;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;/</span>&gt;</span>)</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TransitionApp</span>;</span><br></pre></td></tr></table></figure>

<h3 id="11-useId"><a href="#11-useId" class="headerlink" title="11.useId"></a>11.useId</h3><p>useId是一个钩子，用于生成在服务器和客户端之间稳定的唯一ID</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NameFields</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title function_">useId</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&#123;id</span> + &#x27;<span class="attr">-firstName</span>&#x27;&#125;&gt;</span>First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&#123;id</span> + &#x27;<span class="attr">-firstName</span>&#x27;&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&#123;id</span> + &#x27;<span class="attr">-lastName</span>&#x27;&#125;&gt;</span>Last Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&#123;id</span> + &#x27;<span class="attr">-lastName</span>&#x27;&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20GraphQL/</url>
    <content><![CDATA[<h2 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h2><p>GraphQL是Facebook开发的一种数据查询语言，并于2015公开发布，它是rest API的替代品。</p>
<p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>
<p>官网：<a href="https://graphql.org/">https://graphql.org/</a></p>
<p>中文网：<a href="https://graphql.cn/">https://graphql.cn/</a></p>
<h3 id="请求数据："><a href="#请求数据：" class="headerlink" title="请求数据："></a>请求数据：</h3><p>向你的 API 发出一个 GraphQL 请求就能准确获得你想要的数据，不多不少。 GraphQL 查询总是返回可预测的结果。使用 GraphQL 的应用可以工作得又快又稳，因为控制数据的是应用，而不是服务器。</p>
<h3 id="获取多个资源，只用一个请求"><a href="#获取多个资源，只用一个请求" class="headerlink" title="获取多个资源，只用一个请求"></a>获取多个资源，只用一个请求</h3><p>GraphQL 查询不仅能够获得资源的属性，还能沿着资源间引用进一步查询。典型的 REST API 请求多个资源时得载入多个 URL，而 GraphQL 可以通过一次请求就获取你应用所需的所有数据。这样一来，即使是比较慢的移动网络连接下，使用 GraphQL 的应用也能表现得足够迅速。</p>
<h3 id="描述所有的可能类型系统"><a href="#描述所有的可能类型系统" class="headerlink" title="描述所有的可能类型系统"></a>描述所有的可能类型系统</h3><p>GraphQL API 基于类型和字段的方式进行组织，而非入口端点。你可以通过一个单一入口端点得到你所有的数据能力。GraphQL 使用类型来保证应用只请求可能的数据，还提供了清晰的辅助性错误信息。应用可以使用类型，而避免编写手动解析代码。</p>
<h3 id="快步前进强大的开发者工具"><a href="#快步前进强大的开发者工具" class="headerlink" title="快步前进强大的开发者工具"></a>快步前进强大的开发者工具</h3><p>不用离开编辑器就能准确知道你可以从 API 中请求的数据，发送查询之前就能高亮潜在问题，高级代码智能提示。利用 API 的类型系统，GraphQL 让你可以更简单地构建如同<a href="https://github.com/graphql/graphiql">Graph<em>i</em>QL</a>的强大工具。</p>
<h3 id="API-演进-无需划分版本"><a href="#API-演进-无需划分版本" class="headerlink" title="API 演进 无需划分版本"></a>API 演进 无需划分版本</h3><p>给你的 GraphQL API 添加字段和类型而无需影响现有查询。老旧的字段可以废弃，从工具中隐藏。通过使用单一演进版本，GraphQL API 使得应用始终能够使用新的特性，并鼓励使用更加简洁、更好维护的服务端代码。</p>
<h3 id="使用你现有的-数据和代码"><a href="#使用你现有的-数据和代码" class="headerlink" title="使用你现有的 数据和代码"></a>使用你现有的 数据和代码</h3><p>GraphQL 让你的整个应用共享一套 API，而不用被限制于特定存储引擎。GraphQL 引擎已经有多种语言实现，通过 GraphQL API 能够更好利用你的现有数据和代码。你只需要为类型系统的字段编写函数，GraphQL 就能通过优化并发的方式来调用它们。</p>
<h3 id="学习GraphQL"><a href="#学习GraphQL" class="headerlink" title="学习GraphQL"></a>学习GraphQL</h3><p>nodejs环境基本信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;code&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;helloWorld.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.16.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;express-graphql&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.7.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;graphql&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^14.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mongoose&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.13.14&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;buildSchema&#125; = <span class="built_in">require</span>(<span class="string">&quot;graphql&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> graphqlHttp = <span class="built_in">require</span>(<span class="string">&quot;express-graphql&quot;</span>)</span><br><span class="line"><span class="comment">// 定义schema类型</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Schema</span> = <span class="title function_">buildSchema</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  type Query&#123;</span></span><br><span class="line"><span class="string">    hello: String,</span></span><br><span class="line"><span class="string">    getName: String,</span></span><br><span class="line"><span class="string">    getAge: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现schema中的hello、getName、getAge</span></span><br><span class="line"><span class="keyword">const</span> root = &#123;</span><br><span class="line">  <span class="attr">hello</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过数据库查询</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;hello world sola&quot;</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getName</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过数据库查询</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;i am groot&quot;</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getAge</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过数据库查询</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">12</span></span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/home&quot;</span>,<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;home data&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/list&quot;</span>,<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;list data&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/graphql&quot;</span>,<span class="title function_">graphqlHttp</span>(&#123;</span><br><span class="line">  <span class="attr">schema</span>:<span class="title class_">Schema</span>, <span class="comment">// 绑定schema</span></span><br><span class="line">  <span class="attr">rootValue</span>:root, <span class="comment">// 绑定root</span></span><br><span class="line">  <span class="attr">graphiql</span>:<span class="literal">true</span> <span class="comment">// 开启graphql调试</span></span><br><span class="line">&#125;))</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-参数类型与传递"><a href="#2-参数类型与传递" class="headerlink" title="2.参数类型与传递"></a>2.参数类型与传递</h4><ul>
<li><p>基本类型：String、Int、Float、Boolean和ID。可以在schema声明的时候直接使用</p>
</li>
<li><p>[类型]代表数组，例如：[Int]代表整形数组</p>
</li>
<li><p>和JS传递参数一样，小括号定义形参，但是注意：参数需要定义类型</p>
</li>
<li><p><code>!</code>代表参数不能为空</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="title function_">rollDice</span>(<span class="attr">numDice</span>: <span class="title class_">Int</span>!,<span class="attr">numSides</span>:<span class="title class_">Int</span>):[<span class="title class_">Int</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>当查询需要返回负责数据类型的时候，需要在buildSchema中自定义复杂数据类型，如下，Account、Film为自定义数据类型。</p>
<p>当查询需要传参时，getFilmDetail(id:Int!):Film</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Schema</span> = <span class="title function_">buildSchema</span>(<span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  type Account&#123;</span></span><br><span class="line"><span class="string">    name: String,</span></span><br><span class="line"><span class="string">    age: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  type Film&#123;</span></span><br><span class="line"><span class="string">    id:Int,</span></span><br><span class="line"><span class="string">    name: String,</span></span><br><span class="line"><span class="string">    poster: String</span></span><br><span class="line"><span class="string">    price: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  type Query&#123;</span></span><br><span class="line"><span class="string">    getAccountInfo: Account,</span></span><br><span class="line"><span class="string">    getNowplayingList:[Film],</span></span><br><span class="line"><span class="string">    getFilmDetail(id:Int!):Film</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>)</span><br></pre></td></tr></table></figure>



<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;buildSchema&#125; = <span class="built_in">require</span>(<span class="string">&quot;graphql&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> graphqlHttp = <span class="built_in">require</span>(<span class="string">&quot;express-graphql&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Schema</span> = <span class="title function_">buildSchema</span>(<span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  type Account&#123;</span></span><br><span class="line"><span class="string">    name: String,</span></span><br><span class="line"><span class="string">    age: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  type Film&#123;</span></span><br><span class="line"><span class="string">    id:Int,</span></span><br><span class="line"><span class="string">    name: String,</span></span><br><span class="line"><span class="string">    poster: String</span></span><br><span class="line"><span class="string">    price: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  type Query&#123;</span></span><br><span class="line"><span class="string">    hello: String,</span></span><br><span class="line"><span class="string">    getName: String,</span></span><br><span class="line"><span class="string">    getAge: Int,</span></span><br><span class="line"><span class="string">    getAllNames:[String],</span></span><br><span class="line"><span class="string">    getAllAges:[Int],</span></span><br><span class="line"><span class="string">    getAccountInfo: Account,</span></span><br><span class="line"><span class="string">    getNowplayingList:[Film],</span></span><br><span class="line"><span class="string">    getFilmDetail(id:Int!):Film</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"><span class="keyword">var</span> fakeDb = [&#123;</span><br><span class="line">  <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;111&#x27;</span>,</span><br><span class="line">  <span class="attr">poster</span>:<span class="string">&quot;http://1111&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>:<span class="number">100</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;222&#x27;</span>,</span><br><span class="line">  <span class="attr">poster</span>:<span class="string">&quot;http://2222&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>:<span class="number">200</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">id</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;333&#x27;</span>,</span><br><span class="line">  <span class="attr">poster</span>:<span class="string">&quot;http://3333&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>:<span class="number">300</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">const</span> root = &#123;</span><br><span class="line">  <span class="attr">hello</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过数据库查询</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getName</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过数据库查询</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;i am groot&quot;</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getAge</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过数据库查询</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">12</span></span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getAllNames</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getAllAges</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getAccountInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;sola&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getNowplayingList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> fakeDb</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getFilmDetail</span>(<span class="params">&#123;id&#125;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fakeDb.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === id));</span><br><span class="line">    <span class="keyword">return</span> fakeDb.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === id)[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/graphql&quot;</span>,<span class="title function_">graphqlHttp</span>(&#123;</span><br><span class="line">  <span class="attr">schema</span>:<span class="title class_">Schema</span>,</span><br><span class="line">  <span class="attr">rootValue</span>:root,</span><br><span class="line">  <span class="attr">graphiql</span>:<span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3-mutation实现增删改"><a href="#3-mutation实现增删改" class="headerlink" title="3.mutation实现增删改"></a>3.mutation实现增删改</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;buildSchema&#125; = <span class="built_in">require</span>(<span class="string">&quot;graphql&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> graphqlHttp = <span class="built_in">require</span>(<span class="string">&quot;express-graphql&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Schema</span> = <span class="title function_">buildSchema</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  type Film&#123;</span></span><br><span class="line"><span class="string">    id:Int,</span></span><br><span class="line"><span class="string">    name: String,</span></span><br><span class="line"><span class="string">    poster: String</span></span><br><span class="line"><span class="string">    price: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  input FilmInput&#123;</span></span><br><span class="line"><span class="string">    name: String,</span></span><br><span class="line"><span class="string">    poster: String</span></span><br><span class="line"><span class="string">    price: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  type Query&#123;</span></span><br><span class="line"><span class="string">    getNowplayingList:[Film]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  type Mutation&#123;</span></span><br><span class="line"><span class="string">    createFilm(input:FilmInput):Film,</span></span><br><span class="line"><span class="string">    updateFilm(id:Int!,input:FilmInput):Film,</span></span><br><span class="line"><span class="string">    deleteFilm(id:Int!):Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"><span class="keyword">var</span> fakeDb = [&#123;</span><br><span class="line">  <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;111&#x27;</span>,</span><br><span class="line">  <span class="attr">poster</span>:<span class="string">&quot;http://1111&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>:<span class="number">100</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;222&#x27;</span>,</span><br><span class="line">  <span class="attr">poster</span>:<span class="string">&quot;http://2222&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>:<span class="number">200</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">id</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;333&#x27;</span>,</span><br><span class="line">  <span class="attr">poster</span>:<span class="string">&quot;http://3333&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>:<span class="number">300</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">const</span> root = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getNowplayingList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> fakeDb</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">createFilm</span>(<span class="params">&#123;input&#125;</span>)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     mutation &#123;</span></span><br><span class="line"><span class="comment">        createFilm(input:&#123;</span></span><br><span class="line"><span class="comment">          name:&quot;test&quot;,</span></span><br><span class="line"><span class="comment">          poster:&quot;aa&quot;,</span></span><br><span class="line"><span class="comment">          price:300</span></span><br><span class="line"><span class="comment">        &#125;) &#123;</span></span><br><span class="line"><span class="comment">          id,</span></span><br><span class="line"><span class="comment">          name,</span></span><br><span class="line"><span class="comment">          price,</span></span><br><span class="line"><span class="comment">          poster</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;...input,<span class="attr">id</span>:fakeDb.<span class="property">length</span>+<span class="number">1</span>&#125;</span><br><span class="line">    fakeDb.<span class="title function_">push</span>(obj)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updateFilm</span>(<span class="params">&#123;id,input&#125;</span>)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    mutation &#123;</span></span><br><span class="line"><span class="comment">      updateFilm(id:3,input:&#123;</span></span><br><span class="line"><span class="comment">        name:&quot;修改name&quot;,</span></span><br><span class="line"><span class="comment">            poster:&quot;修改poster&quot;,</span></span><br><span class="line"><span class="comment">            price:77777</span></span><br><span class="line"><span class="comment">      &#125;) &#123;</span></span><br><span class="line"><span class="comment">        id,</span></span><br><span class="line"><span class="comment">            name,</span></span><br><span class="line"><span class="comment">            poster,</span></span><br><span class="line"><span class="comment">            price</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> current = <span class="literal">null</span></span><br><span class="line">    fakeDb = fakeDb.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">id</span>  === id)&#123;</span><br><span class="line">        current = &#123;...item,...input&#125;</span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> item</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> current</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deleteFilm</span>(<span class="params">&#123;id&#125;</span>)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    mutation &#123;</span></span><br><span class="line"><span class="comment">      deleteFilm(id:2)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    fakeDb = fakeDb.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span>item.<span class="property">id</span> !== id)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/graphql&quot;</span>,<span class="title function_">graphqlHttp</span>(&#123;</span><br><span class="line">  <span class="attr">schema</span>:<span class="title class_">Schema</span>,</span><br><span class="line">  <span class="attr">rootValue</span>:root,</span><br><span class="line">  <span class="attr">graphiql</span>:<span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4-结合数据库（mongo）"><a href="#4-结合数据库（mongo）" class="headerlink" title="4.结合数据库（mongo）"></a>4.结合数据库（mongo）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;buildSchema&#125; = <span class="built_in">require</span>(<span class="string">&quot;graphql&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> graphqlHttp = <span class="built_in">require</span>(<span class="string">&quot;express-graphql&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库服务</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost:27017/maizuo&quot;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>  &#125;)</span><br><span class="line"><span class="comment">// 限制表的字段类型，及个数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FilmModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;film&quot;</span>,<span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">poster</span>:<span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">price</span>:<span class="title class_">Number</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* FilmModel.create</span></span><br><span class="line"><span class="comment">* FilmModel.find</span></span><br><span class="line"><span class="comment">* FilmModel.update</span></span><br><span class="line"><span class="comment">* FilmModel.delete</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Schema</span> = <span class="title function_">buildSchema</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  type Film&#123;</span></span><br><span class="line"><span class="string">    id:String,</span></span><br><span class="line"><span class="string">    name: String,</span></span><br><span class="line"><span class="string">    poster: String</span></span><br><span class="line"><span class="string">    price: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  input FilmInput&#123;</span></span><br><span class="line"><span class="string">    name: String,</span></span><br><span class="line"><span class="string">    poster: String</span></span><br><span class="line"><span class="string">    price: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  type Query&#123;</span></span><br><span class="line"><span class="string">    getNowplayingList(id:String!):[Film]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  type Mutation&#123;</span></span><br><span class="line"><span class="string">    createFilm(input:FilmInput):Film,</span></span><br><span class="line"><span class="string">    updateFilm(id:String!,input:FilmInput):Film,</span></span><br><span class="line"><span class="string">    deleteFilm(id:String!):Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getNowplayingList</span>(<span class="params">&#123;id&#125;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!id) <span class="keyword">return</span> <span class="title class_">FilmModel</span>.<span class="title function_">find</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">FilmModel</span>.<span class="title function_">find</span>(&#123;<span class="attr">_id</span>:id&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">createFilm</span>(<span class="params">&#123;input&#125;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">FilmModel</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">      ...input</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updateFilm</span>(<span class="params">&#123;id,input&#125;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">FilmModel</span>.<span class="title function_">updateOne</span>(&#123;</span><br><span class="line">      <span class="attr">_id</span>:id</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      ...input</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="title class_">FilmModel</span>.<span class="title function_">find</span>(&#123;<span class="attr">_id</span>:id&#125;)).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res[<span class="number">0</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deleteFilm</span>(<span class="params">&#123;id&#125;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">FilmModel</span>.<span class="title function_">deleteOne</span>(&#123;<span class="attr">_id</span>:id&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span><span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/graphql&quot;</span>,<span class="title function_">graphqlHttp</span>(&#123;</span><br><span class="line">  <span class="attr">schema</span>:<span class="title class_">Schema</span>,</span><br><span class="line">  <span class="attr">rootValue</span>:root,</span><br><span class="line">  <span class="attr">graphiql</span>:<span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置静态资源 目录</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>))</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h4 id="5-客户端访问"><a href="#5-客户端访问" class="headerlink" title="5.客户端访问"></a>5.客户端访问</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getData()&quot;</span>&gt;</span>查询数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;createData()&quot;</span>&gt;</span>创建数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;updateData()&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myquery = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    query&#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      getNowplayingList &#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        id,</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        name,</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        price,</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        poster</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    `</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&quot;/graphql&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">headers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">query</span>:myquery</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">createData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myquery = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    mutation($input:FilmInput)&#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      createFilm(input:$input) &#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        id,</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        name</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    `</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&quot;/graphql&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">headers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">query</span>:myquery,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">variables</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">input</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;piggy77777&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">price</span>:<span class="number">7878787</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">poster</span>:<span class="string">&quot;http://123456.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">updateData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myquery = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    mutation($id:String!,$input:FilmInput)&#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      updateFilm(id:$id,input:$input) &#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        id,</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        name</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    `</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&quot;/graphql&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">headers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">query</span>:myquery,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">variables</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>:<span class="string">&quot;6267a2634b452527c04c7a65&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">input</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;sola is cool&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">price</span>:<span class="number">7878787</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">poster</span>:<span class="string">&quot;http://123456.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">deleteData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myquery = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    mutation($id:String!)&#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      deleteFilm(id:$id)</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    `</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&quot;/graphql&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">headers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">query</span>:myquery,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">variables</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>:<span class="string">&quot;6267a2634b452527c04c7a65&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-结合react"><a href="#6-结合react" class="headerlink" title="6.结合react"></a>6.结合react</h4><p>npm i react-apollo apollo-boost graphql graphql-tag</p>
<h5 id="1-普通query"><a href="#1-普通query" class="headerlink" title="1.普通query"></a>1.普通query</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ApolloProvider</span>,<span class="title class_">Query</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-apollo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ApolloClient</span> <span class="keyword">from</span> <span class="string">&#x27;apollo-boost&#x27;</span></span><br><span class="line"><span class="keyword">import</span> gql <span class="keyword">from</span>  <span class="string">&#x27;graphql-tag&#x27;</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">ApolloClient</span>(&#123;</span><br><span class="line">  <span class="attr">uri</span>:<span class="string">&quot;/graphql&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ApolloProvider</span> <span class="attr">client</span>=<span class="string">&#123;client&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">SolaQuery</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ApolloProvider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SolaQuery</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">  query = gql<span class="string">`</span></span><br><span class="line"><span class="string">  query&#123;</span></span><br><span class="line"><span class="string">    getNowplayingList &#123;</span></span><br><span class="line"><span class="string">      id,</span></span><br><span class="line"><span class="string">      name,</span></span><br><span class="line"><span class="string">      price,</span></span><br><span class="line"><span class="string">      poster</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Query</span> <span class="attr">query</span>=<span class="string">&#123;this.query&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;</span></span><br><span class="line"><span class="language-xml">        (&#123;loading, data&#125;)  =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          console.log(data);</span></span><br><span class="line"><span class="language-xml">          return loading? <span class="tag">&lt;<span class="name">div</span>&gt;</span>正在加载。。<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              data.getNowplayingList.map(item =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item.price&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item.poster&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              )</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Query</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-参数query"><a href="#2-参数query" class="headerlink" title="2.参数query"></a>2.参数query</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ApolloProvider</span>,<span class="title class_">Query</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-apollo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ApolloClient</span> <span class="keyword">from</span> <span class="string">&#x27;apollo-boost&#x27;</span></span><br><span class="line"><span class="keyword">import</span> gql <span class="keyword">from</span>  <span class="string">&#x27;graphql-tag&#x27;</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">ApolloClient</span>(&#123;</span><br><span class="line">  <span class="attr">uri</span>:<span class="string">&quot;/graphql&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ApolloProvider</span> <span class="attr">client</span>=<span class="string">&#123;client&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">SolaQuery</span>&gt;</span><span class="tag">&lt;/<span class="name">SolaQuery</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ApolloProvider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SolaQuery</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  query = gql<span class="string">`</span></span><br><span class="line"><span class="string">  query getNowplayingList($id:String!)&#123;</span></span><br><span class="line"><span class="string">    getNowplayingList(id:$id) &#123;</span></span><br><span class="line"><span class="string">      id,</span></span><br><span class="line"><span class="string">      name,</span></span><br><span class="line"><span class="string">      price,</span></span><br><span class="line"><span class="string">      poster</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  state= &#123;</span><br><span class="line">    <span class="attr">id</span>:  <span class="string">&quot;6267b2b08c4fba1718ef496f&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;(evt)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">        this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">          id:evt.target.value</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Query</span> <span class="attr">query</span>=<span class="string">&#123;this.query&#125;</span>  <span class="attr">variables</span>=<span class="string">&#123;&#123;id:this.state.id&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          (&#123;loading, data&#125;)  =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            console.log(data);</span></span><br><span class="line"><span class="language-xml">            return loading? <span class="tag">&lt;<span class="name">div</span>&gt;</span>正在加载。。<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;</span></span><br><span class="line"><span class="language-xml">                data.getNowplayingList.map(item =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item.price&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item.poster&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                )</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Query</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h5 id="3-mutation-create"><a href="#3-mutation-create" class="headerlink" title="3.mutation_create"></a>3.mutation_create</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ApolloProvider</span>,<span class="title class_">Mutation</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-apollo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ApolloClient</span> <span class="keyword">from</span> <span class="string">&#x27;apollo-boost&#x27;</span></span><br><span class="line"><span class="keyword">import</span> gql <span class="keyword">from</span>  <span class="string">&#x27;graphql-tag&#x27;</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">ApolloClient</span>(&#123;</span><br><span class="line">  <span class="attr">uri</span>:<span class="string">&quot;/graphql&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ApolloProvider</span> <span class="attr">client</span>=<span class="string">&#123;client&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">SolaCreate</span>&gt;</span><span class="tag">&lt;/<span class="name">SolaCreate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ApolloProvider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SolaCreate</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  createFilm = gql<span class="string">`</span></span><br><span class="line"><span class="string">  mutation createFilm($input:FilmInput)&#123;</span></span><br><span class="line"><span class="string">  createFilm(input:$input) &#123;</span></span><br><span class="line"><span class="string">    id,</span></span><br><span class="line"><span class="string">    name,</span></span><br><span class="line"><span class="string">    price,</span></span><br><span class="line"><span class="string">    poster</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  state= &#123;</span><br><span class="line">    <span class="attr">id</span>:  <span class="string">&quot;6267b2b08c4fba1718ef496f&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Mutation</span> <span class="attr">mutation</span>=<span class="string">&#123;this.createFilm&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          (createFilm,&#123;data&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            console.log(data);</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">               createFilm(&#123;</span></span><br><span class="line"><span class="language-xml">                 variables:&#123;</span></span><br><span class="line"><span class="language-xml">                   input:&#123;</span></span><br><span class="line"><span class="language-xml">                     name:&quot;888&quot;,</span></span><br><span class="line"><span class="language-xml">                     price:888,</span></span><br><span class="line"><span class="language-xml">                     poster:&#x27;http://888&#x27;</span></span><br><span class="line"><span class="language-xml">                   &#125;</span></span><br><span class="line"><span class="language-xml">                 &#125;</span></span><br><span class="line"><span class="language-xml">               &#125;)</span></span><br><span class="line"><span class="language-xml">             &#125;</span></span><br><span class="line"><span class="language-xml">             &#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Mutation</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h5 id="4-mutation-update"><a href="#4-mutation-update" class="headerlink" title="4.mutation_update"></a>4.mutation_update</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ApolloProvider</span>,<span class="title class_">Mutation</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-apollo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ApolloClient</span> <span class="keyword">from</span> <span class="string">&#x27;apollo-boost&#x27;</span></span><br><span class="line"><span class="keyword">import</span> gql <span class="keyword">from</span>  <span class="string">&#x27;graphql-tag&#x27;</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">ApolloClient</span>(&#123;</span><br><span class="line">  <span class="attr">uri</span>:<span class="string">&quot;/graphql&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ApolloProvider</span> <span class="attr">client</span>=<span class="string">&#123;client&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">SolaUpdate</span>&gt;</span><span class="tag">&lt;/<span class="name">SolaUpdate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ApolloProvider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SolaUpdate</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  updateFilm = gql<span class="string">`</span></span><br><span class="line"><span class="string">  mutation updateFilm($id:String!,$input:FilmInput)&#123;</span></span><br><span class="line"><span class="string">  updateFilm(id:$id,input:$input) &#123;</span></span><br><span class="line"><span class="string">    id,</span></span><br><span class="line"><span class="string">    name,</span></span><br><span class="line"><span class="string">    price,</span></span><br><span class="line"><span class="string">    poster</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  state= &#123;</span><br><span class="line">    <span class="attr">id</span>:  <span class="string">&quot;6267b2b08c4fba1718ef496f&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Mutation</span> <span class="attr">mutation</span>=<span class="string">&#123;this.updateFilm&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          (updateFilm,&#123;data&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            console.log(data);</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">               updateFilm(&#123;</span></span><br><span class="line"><span class="language-xml">                 variables:&#123;</span></span><br><span class="line"><span class="language-xml">                   id:&quot;6267ba1ba47c570fe062081a&quot;,</span></span><br><span class="line"><span class="language-xml">                   input:&#123;</span></span><br><span class="line"><span class="language-xml">                     name:&quot;888-修改 &quot;,</span></span><br><span class="line"><span class="language-xml">                     price:8989,</span></span><br><span class="line"><span class="language-xml">                     poster:&#x27;http://888修改&#x27;</span></span><br><span class="line"><span class="language-xml">                   &#125;</span></span><br><span class="line"><span class="language-xml">                 &#125;</span></span><br><span class="line"><span class="language-xml">               &#125;)</span></span><br><span class="line"><span class="language-xml">             &#125;</span></span><br><span class="line"><span class="language-xml">             &#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Mutation</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h5 id="5-mutation-delete"><a href="#5-mutation-delete" class="headerlink" title="5.mutation_delete"></a>5.mutation_delete</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ApolloProvider</span>,<span class="title class_">Mutation</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-apollo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ApolloClient</span> <span class="keyword">from</span> <span class="string">&#x27;apollo-boost&#x27;</span></span><br><span class="line"><span class="keyword">import</span> gql <span class="keyword">from</span>  <span class="string">&#x27;graphql-tag&#x27;</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">ApolloClient</span>(&#123;</span><br><span class="line">  <span class="attr">uri</span>:<span class="string">&quot;/graphql&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ApolloProvider</span> <span class="attr">client</span>=<span class="string">&#123;client&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">SolaDelete</span>&gt;</span><span class="tag">&lt;/<span class="name">SolaDelete</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ApolloProvider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SolaDelete</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  deleteFilm = gql<span class="string">`</span></span><br><span class="line"><span class="string">  mutation deleteFilm($id:String!)&#123;</span></span><br><span class="line"><span class="string">  deleteFilm(id:$id)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  state= &#123;</span><br><span class="line">    <span class="attr">id</span>:  <span class="string">&quot;6267b2b08c4fba1718ef496f&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Mutation</span> <span class="attr">mutation</span>=<span class="string">&#123;this.deleteFilm&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          (deleteFilm,&#123;data&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            console.log(data);</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                deleteFilm(&#123;</span></span><br><span class="line"><span class="language-xml">                  variables:&#123;</span></span><br><span class="line"><span class="language-xml">                    id:&quot;6267ba1ba47c570fe062081a&quot;</span></span><br><span class="line"><span class="language-xml">                  &#125;</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">              &#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Mutation</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Dva</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20Dva/</url>
    <content><![CDATA[<h2 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h2><p>官网：<a href="https://dvajs.com/">https://dvajs.com</a></p>
<p>dva首先是一个基于redux和redux-saga的数据流方案，然后为了简化开发体验，dva还额外内置了react-router和fetch，所以也可以理解为一个轻量级的应用框架</p>
<p><img src="https://zos.alipayobjects.com/rmsportal/PPrerEAKbIoDZYr.png" alt="img"></p>
<p>特性：</p>
<ul>
<li>易学易用：仅有6个api，对redux用户尤其友好，配合umi使用后，更是降低为 0 API</li>
<li>elm概念：通过reducers，effets和subscriptions组织model</li>
<li>插件机制：比如dva-loading可以自动处理loading状态，不用一遍遍地写showLoading和hide Loading</li>
<li>支持HMR：基于babel-plugin-dva-hmr 实现components、routes和models的HMR</li>
</ul>
<p>安装：npm i dva-cli -g 通过npm安装dva-cli并确保版本是<code>0.9.1</code>或以上</p>
<p>创建项目：dva new myproject</p>
<h3 id="dva项目目录结构"><a href="#dva项目目录结构" class="headerlink" title="dva项目目录结构"></a>dva项目目录结构</h3><ul>
<li>mock 用来进行api测试的模块</li>
<li>node_modules 依赖模块</li>
<li>public<ul>
<li>index.html 项目入口html</li>
</ul>
</li>
<li>src 核心文件<ul>
<li>assets 静态资源目录</li>
<li>components 公共组件目录</li>
<li>models 模型文件：结合redux-saga状态管理</li>
<li>routes 路由组件</li>
<li>services 进行所有的异步请求</li>
<li>utils 工具类目录，封装request请求（fetch(原生)、axios）</li>
<li>index.js 项目核心入口js文件</li>
<li>index.css 全局样式文件</li>
<li>router.js 全局路由配置文件</li>
</ul>
</li>
<li>.editorconfig 编辑器配置</li>
<li>.eslintrc eslint代码检查</li>
<li>.gitignore git忽略文件</li>
<li>.roadhogrc.mock.js  用来做api测试的，需要注册使用</li>
<li>.webpackrc webpack相关配置，反向代理</li>
<li>package.json 版本依赖信息</li>
</ul>
<h3 id="dva中的路由"><a href="#dva中的路由" class="headerlink" title="dva中的路由"></a>dva中的路由</h3><p>由上面已知的目录结构，项目的路由配置，架构均在src/router.js中，其基本配置与正常的react-router V5 无大差异（当前dva版本为0.10.1，react-router为V5版本）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Switch</span>,<span class="title class_">Redirect</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;dva/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./routes/App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Film</span> <span class="keyword">from</span> <span class="string">&#x27;./routes/Film&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cinema</span> <span class="keyword">from</span> <span class="string">&#x27;./routes/Cinema&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Center</span> <span class="keyword">from</span> <span class="string">&#x27;./routes/Center&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&quot;./routes/Detail&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;./routes/Login&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RouterConfig</span>(<span class="params">&#123;history&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Login&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span> =&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">App</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/film&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Film&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/cinema&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Cinema&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;/*路由拦截*/&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/center&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span> =&gt;</span></span></span><br><span class="line"><span class="language-xml">                localStorage.getItem(&quot;token&quot;) ? <span class="tag">&lt;<span class="name">Center</span>/&gt;</span> : <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">              &#125;/&gt;</span></span><br><span class="line"><span class="language-xml">			&#123;/*路由传参*/&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/detail/:myid&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;/*重定向*/&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/film&quot;</span> <span class="attr">from</span>=<span class="string">&quot;/&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;/&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">RouterConfig</span>;</span><br></pre></td></tr></table></figure>

<p>当普通组件先要使用，路由相关API的时候，依然需要withRouter高阶组件来进行包装，此时的withRouter是由 dva/router 导入的</p>
<h3 id="dva中的状态管理"><a href="#dva中的状态管理" class="headerlink" title="dva中的状态管理"></a>dva中的状态管理</h3><p>dva中的状态管理主要被封装到了models中，那么先来介绍下models中的相关API</p>
<h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>State 表示 Model 的状态数据，通常表现为一个 javascript 对象（当然它可以是任何值）；操作的时候每次都要当作不可变数据（immutable data）来对待，保证每次都是全新对象，没有引用关系，这样才能保证 State 的独立性，便于测试和追踪变化。</p>
<p>在 dva 中你可以通过 dva 的实例属性 <code>_store</code> 看到顶部的 state 数据，但是通常你很少会用到:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">dva</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">_store</span>); <span class="comment">// 顶部的 state 数据</span></span><br></pre></td></tr></table></figure>

<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type AsyncAction = any</span><br></pre></td></tr></table></figure>

<p>Action 是一个普通 javascript 对象，它是改变 State 的唯一途径。无论是从 UI 事件、网络回调，还是 WebSocket 等数据源所获得的数据，最终都会通过 dispatch 函数调用一个 action，从而改变对应的数据。action 必须带有 <code>type</code> 属性指明具体的行为，其它字段可以自定义，如果要发起一个 action 需要使用 <code>dispatch</code> 函数；需要注意的是 <code>dispatch</code> 是在组件 connect Models以后，通过 props 传入的。</p>
<p>action这个动作，指的是dispatch这个行为。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dispatch(&#123;</span><br><span class="line">  type: &#x27;add&#x27;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="dispatch-函数"><a href="#dispatch-函数" class="headerlink" title="dispatch 函数"></a>dispatch 函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type dispatch = (a: Action) =&gt; Action</span><br></pre></td></tr></table></figure>

<p>dispatching function 是一个用于触发 action 的函数，action 是改变 State 的唯一途径，但是它只描述了一个行为，而 dipatch 可以看作是触发这个行为的方式，而 Reducer 则是描述如何改变数据的。</p>
<p>在 dva 中，connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects，常见的形式如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;user/add&#x27;</span>, <span class="comment">// 如果在 model 外调用，需要添加 namespace</span></span><br><span class="line">  <span class="attr">payload</span>: &#123;&#125;, <span class="comment">// 需要传递的信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Reducer&lt;S, A&gt; = (state: S, action: A) =&gt; S</span><br></pre></td></tr></table></figure>

<p>Reducer（也称为 reducing function）函数接受两个参数：之前已经累积运算的结果和当前要被累积的值，返回的是一个新的累积结果。该函数把一个集合归并成一个单值。</p>
<p>Reducer 的概念来自于是函数式编程，很多语言中都有 reduce API。如在 javascript 中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">y</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">z</span>:<span class="number">3</span>&#125;].<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, next</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(prev, next);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//return &#123;x:1, y:2, z:3&#125;</span></span><br></pre></td></tr></table></figure>

<p>在 dva 中，reducers 聚合积累的结果是当前 model 的 state 对象。通过 actions 中传入的值，与当前 reducers 中的值进行运算获得新的值（也就是新的 state）。需要注意的是 Reducer 必须是<a href="https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md">纯函数</a>，所以同样的输入必然得到同样的输出，它们不应该产生任何副作用。并且，每一次的计算都应该使用<a href="https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md#reasonable">immutable data</a>，这种特性简单理解就是每次操作都是返回一个全新的数据（独立，纯净），所以热重载和时间旅行这些功能才能够使用。</p>
<h4 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h4><p>Effect 被称为副作用，在我们的应用中，最常见的就是异步操作。它来自于函数编程的概念，之所以叫副作用是因为它使得我们的函数变得不纯，同样的输入不一定获得同样的输出。</p>
<p>dva 为了控制副作用的操作，底层引入了<a href="http://superraytin.github.io/redux-saga-in-chinese">redux-sagas</a>做异步流程控制，由于采用了<a href="http://www.ruanyifeng.com/blog/2015/04/generator.html">generator的相关概念</a>，所以将异步转成同步写法，从而将effects转为纯函数。至于为什么我们这么纠结于 <strong>纯函数</strong>，如果你想了解更多可以阅读<a href="https://github.com/MostlyAdequate/mostly-adequate-guide">Mostly adequate guide to FP</a>，或者它的中文译本<a href="https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details">JS函数式编程指南</a>。</p>
<h4 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h4><p>Subscriptions 是一种从 <strong>源</strong> 获取数据的方法，它来自于 elm。</p>
<p>Subscription 语义是订阅，用于订阅一个数据源，然后根据条件 dispatch 需要的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> key <span class="keyword">from</span> <span class="string">&#x27;keymaster&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">model</span>(&#123;</span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">  <span class="attr">subscriptions</span>: &#123;</span><br><span class="line">    <span class="title function_">keyEvent</span>(<span class="params">&#123;dispatch&#125;</span>) &#123;</span><br><span class="line">      <span class="title function_">key</span>(<span class="string">&#x27;⌘+up, ctrl+up&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;add&#x27;</span>&#125;) &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="dva数据同步处理"><a href="#dva数据同步处理" class="headerlink" title="dva数据同步处理"></a>dva数据同步处理</h3><p>以上的api清楚了以后，我们来模拟一下dva中的状态同步管理，下面是这样一个场景，底部栏tabbar在首页正常显示，当在首页点击电影详情的时候，进入详情页面，从而隐藏底部栏tabbar。</p>
<p>1.在index.js中，注册model</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">&#x27;dva&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Initialize</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">dva</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="built_in">require</span>(<span class="string">&quot;history&quot;</span>).<span class="title function_">createBrowserHistory</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Plugins</span></span><br><span class="line"><span class="comment">// app.use(&#123;&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Model</span></span><br><span class="line">app.<span class="title function_">model</span>(<span class="built_in">require</span>(<span class="string">&#x27;./models/maizuo&#x27;</span>).<span class="property">default</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Router</span></span><br><span class="line">app.<span class="title function_">router</span>(<span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>).<span class="property">default</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Start</span></span><br><span class="line">app.<span class="title function_">start</span>(<span class="string">&#x27;#root&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>2.在models目录下创建对应的maizuo.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 当前模型的命名空间，以后出现不同业务域都要有对应的命名空间来进行区分</span></span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;maizuo&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="comment">// isShow 即为tabbar是否显示的状态</span></span><br><span class="line">    <span class="attr">isShow</span>:<span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">subscriptions</span>: &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">&#123; dispatch, history &#125;</span>) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//  同步</span></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">hide</span>(<span class="params">prevState,action</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;...prevState,<span class="attr">isShow</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">show</span>(<span class="params">prevState,action</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;...prevState,<span class="attr">isShow</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>3.此时考虑到在进入详情页的时候来对tabbar进行控制，那么需要在详情页中派发action</p>
<p><strong>这里需要注意</strong>：dispatch方法需要经过connect高阶函数封装过的才可以获取。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&quot;dva&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Detail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="comment">// 挂载组件时将tabbar隐藏</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="string">&quot;maizuo/hide&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组件销毁时，将tabbar显示</span></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="string">&quot;maizuo/show&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Detail</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>()(<span class="title class_">Detail</span>);</span><br></pre></td></tr></table></figure>

<p>4.经过dispatch派发后的action，需要在model的reducer中进行处理，详细处理见上面第二步骤。</p>
<p><strong>这里需要注意</strong>：reducer是一个纯函数，不能直接对状态进行修改，需要将原始状态进行深拷贝一份，再做处理</p>
<h3 id="dva数据异步处理"><a href="#dva数据异步处理" class="headerlink" title="dva数据异步处理"></a>dva数据异步处理</h3><p>异步处理，主要用到了model中的effect副作用函数，该方法主要封装了redux-saga，需要使用生成器函数。</p>
<p>下面是这样一个应用场景：从卖座网获取所有电影院数据，点击影院的时候，第一次正常请求接口获取数据，为异步请求，当第二次点击的时候，是通过状态的缓存中 进行获取数据，不在发送网络请求。</p>
<p>1.在models/maizuo.js 模型中，注册存储影院数据的状态：list</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getCinemaListService&#125; <span class="keyword">from</span> <span class="string">&quot;../services/maizuo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;maizuo&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">isShow</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 创建异步数据list</span></span><br><span class="line">    <span class="attr">list</span>:[] </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">subscriptions</span>: &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">&#123; dispatch, history &#125;</span>) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  同步</span></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">hide</span>(<span class="params">prevState,action</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;...prevState,<span class="attr">isShow</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">show</span>(<span class="params">prevState,action</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;...prevState,<span class="attr">isShow</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>1.首先在services中创建maizuo.js 来封装跟卖座相关的所有数据请求逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;../utils/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getCinemaListService</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;https://m.maizuo.com/gateway?cityId=110100&amp;ticketFlag=1&amp;k=878555&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;X-Client-Info&#x27;</span>: <span class="string">&#x27;&#123;&quot;a&quot;: &quot;3000&quot;, &quot;ch&quot;: &quot;1002&quot;, &quot;v&quot;: &quot;5.2.0&quot;, &quot;e&quot;: &quot;1646462402616989231939585&quot;&#125;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;X-Host&#x27;</span>: <span class="string">&#x27;mall.film-ticket.cinema.list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.点击影院按钮，因此在Cinema组件中进行派发action。派发action之前，我们需要先判断当前状态中是否已经存在数据，因此，我们需要从model中获取state。</p>
<p><strong>这里注意：</strong>当要从模型中获取状态数据的时候，依然需要通过connect组件的封装才可以获取，获取到的状态数据，通过return，会自动挂载到了props上，通过<code>this.props.list</code>即可获取。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&quot;dva&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cinema</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">list</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;maizuo/getCinemaList&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;缓存&quot;</span>,<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">list</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            this.props.list.map(item =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.cinemaId&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;item.name&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过connect高阶组件获取state，并挂载到props中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">list</span>:state.<span class="property">maizuo</span>.<span class="property">list</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="title class_">Cinema</span>);</span><br></pre></td></tr></table></figure>

<p>3.在模型中通过effects方法，来进行异步的处理</p>
<p><strong>这里注意：</strong>当通过effect副作用处理过后，需要转为同步的reducer，这样才可以继续处理下去。（这里是因为封装了redux-saga，详细原理可以去看我写的关于redux-saga的博客）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getCinemaListService&#125; <span class="keyword">from</span> <span class="string">&quot;../services/maizuo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;maizuo&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">isShow</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">list</span>:[]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">subscriptions</span>: &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">&#123; dispatch, history &#125;</span>) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//  异步</span></span><br><span class="line">  <span class="comment">// 这里的call方法是用来处理异步的，而put方法是在派发action，这样在reducer中就变成了同步的处理</span></span><br><span class="line">  <span class="attr">effects</span>: &#123;</span><br><span class="line">    *<span class="title function_">getCinemaList</span>(<span class="params">action,&#123;call,put&#125;</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> res = <span class="keyword">yield</span> <span class="title function_">call</span>(getCinemaListService)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">cinemas</span>);</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;changeCinemaList&quot;</span>,</span><br><span class="line">        <span class="attr">payload</span>:res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">cinemas</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//  同步</span></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">hide</span>(<span class="params">prevState,action</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;...prevState,<span class="attr">isShow</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">show</span>(<span class="params">prevState,action</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;...prevState,<span class="attr">isShow</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 将异步变成同步后的数据处理</span></span><br><span class="line">    <span class="title function_">changeCinemaList</span>(<span class="params">prevState,action</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;...prevState,<span class="attr">list</span>:action.<span class="property">payload</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="dva跨域反向代理"><a href="#dva跨域反向代理" class="headerlink" title="dva跨域反向代理"></a>dva跨域反向代理</h3><p>与react脚手架无异，dva也是借用了http-proxy-middleware模块来实现的，只是做了一层封装，配置文件不同而已。</p>
<p>这里需要在 <code>.webpackrc</code>文件中进行配置，配置如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;/api&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i.maoyan.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;changeOrigin&quot;</span><span class="punctuation">:</span><span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>无需重启服务，及其简单。</p>
<h3 id="dva-mock模块应用"><a href="#dva-mock模块应用" class="headerlink" title="dva mock模块应用"></a>dva mock模块应用</h3><p>mock接口测试，在没有后端真正接口的时候，前端自己进行测试的神器。</p>
<p>1.首先在mock目录下创建api.js(名字自己随意)</p>
<p>这里我只做了GET、POST的模拟接口。及供参考</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">&#x27;GET /users&#x27;</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;sola&#x27;</span>,<span class="attr">location</span>:<span class="string">&#x27;shenayng&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;POST /users/login&#x27;</span>:<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">ok</span>:<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在<code>.roadhogrc.mock.js</code>中注册使用即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mockObj = <span class="built_in">require</span>(<span class="string">&#x27;./mock/api&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...mockObj</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以上即为dva的基本使用，以及在实战中的一些常用的API，但是目前很少会有直接使用dva框架的，一般都会结合到umi框架里使用。在后续的文章里，我会依次介绍到。</p>
]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Immutable</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20Immutable/</url>
    <content><![CDATA[<h2 id="Immutable"><a href="#Immutable" class="headerlink" title="Immutable"></a>Immutable</h2><p>Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。Immutable 实现的原理是 Persistent Data Structure（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了Structural Sharing（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</p>
<p>官网地址：<a href="https://github.com/immutable-js/immutable-js">https://github.com/immutable-js/immutable-js</a></p>
<h3 id="深拷贝与浅拷贝的关系"><a href="#深拷贝与浅拷贝的关系" class="headerlink" title="深拷贝与浅拷贝的关系"></a>深拷贝与浅拷贝的关系</h3><p>(1) var arr = { } ; arr2 = arr ;</p>
<p>(2) Object.assign() 只是一级属性复制，比浅拷贝多拷贝了一层而已。</p>
<p>(3) const obj1 = JSON.parse(JSON.stringify(obj)); 数组，对象都好用的方法(缺点: 不能有undefined)</p>
<h3 id="Immutable性能优化方式"><a href="#Immutable性能优化方式" class="headerlink" title="Immutable性能优化方式"></a>Immutable性能优化方式</h3><p>Immutable 实现的原理是 Persistent Data Structure（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 Structural Sharing（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</p>
<h3 id="Immutable常用数据类型"><a href="#Immutable常用数据类型" class="headerlink" title="Immutable常用数据类型"></a>Immutable常用数据类型</h3><h4 id="1-Map"><a href="#1-Map" class="headerlink" title="1.Map"></a>1.Map</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;immutable&#x27;</span>); </span><br><span class="line"><span class="keyword">const</span> map1 = <span class="title class_">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;); </span><br><span class="line"><span class="keyword">const</span> map2 = map1.<span class="title function_">set</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">50</span>); </span><br><span class="line">map1.<span class="title function_">get</span>(<span class="string">&#x27;b&#x27;</span>) + <span class="string">&quot; vs. &quot;</span> + map2.<span class="title function_">get</span>(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// 2 vs. 50</span></span><br></pre></td></tr></table></figure>

<p>简单应用场景：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Map</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;immutable&#x27;</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Map</span>(&#123;</span><br><span class="line">    <span class="attr">select</span>:<span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    <span class="attr">filter</span>:<span class="title class_">Map</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;sola&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span>  b = a.<span class="title function_">set</span>(<span class="string">&#x27;select&#x27;</span>,<span class="string">&#x27;people&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a === b <span class="comment">// false</span></span><br><span class="line">a.<span class="title function_">get</span>(<span class="string">&#x27;filter&#x27;</span>) === b.<span class="title function_">get</span>(<span class="string">&#x27;filter&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果上述select属性给一个组件用，因此值改变了，shouldComponentUpdate应该返回true，而filter属性给另一个组件使用，通过判断并无变化，shouldComponentUpdate应该返回false。此组件就避免了重复进行diff对比</p>
<h4 id="2-List"><a href="#2-List" class="headerlink" title="2.List"></a>2.List</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">List</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;immutable&#x27;</span>); </span><br><span class="line"><span class="keyword">const</span> list1 = <span class="title class_">List</span>([ <span class="number">1</span>, <span class="number">2</span> ]); </span><br><span class="line"><span class="keyword">const</span> list2 = list1.<span class="title function_">push</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); </span><br><span class="line"><span class="keyword">const</span> list3 = list2.<span class="title function_">unshift</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">const</span> list4 = list1.<span class="title function_">concat</span>(list2, list3); </span><br><span class="line">assert.<span class="title function_">equal</span>(list1.<span class="property">size</span>, <span class="number">2</span>); </span><br><span class="line">assert.<span class="title function_">equal</span>(list2.<span class="property">size</span>, <span class="number">5</span>); </span><br><span class="line">assert.<span class="title function_">equal</span>(list3.<span class="property">size</span>, <span class="number">6</span>); </span><br><span class="line">assert.<span class="title function_">equal</span>(list4.<span class="property">size</span>, <span class="number">13</span>); </span><br><span class="line">assert.<span class="title function_">equal</span>(list4.<span class="title function_">get</span>(<span class="number">0</span>), <span class="number">1</span>); </span><br><span class="line"><span class="comment">//push, set, unshift or splice 都可以直接用，返回一个新的immutable对象</span></span><br></pre></td></tr></table></figure>

<h4 id="3-merge-concat"><a href="#3-merge-concat" class="headerlink" title="3.merge,concat"></a>3.merge,concat</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Map</span>, <span class="title class_">List</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;immutable&#x27;</span>); </span><br><span class="line"><span class="keyword">const</span> map1 = <span class="title class_">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="title class_">Map</span>(&#123; <span class="attr">c</span>: <span class="number">10</span>, <span class="attr">a</span>: <span class="number">20</span>, <span class="attr">t</span>: <span class="number">30</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">d</span>: <span class="number">100</span>, <span class="attr">o</span>: <span class="number">200</span>, <span class="attr">g</span>: <span class="number">300</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> map3 = map1.<span class="title function_">merge</span>(map2, obj); </span><br><span class="line"><span class="comment">// Map &#123; a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 &#125; </span></span><br><span class="line"><span class="keyword">const</span> list1 = <span class="title class_">List</span>([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]); </span><br><span class="line"><span class="keyword">const</span> list2 = <span class="title class_">List</span>([ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ]); </span><br><span class="line"><span class="keyword">const</span> array = [ <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ]; </span><br><span class="line"><span class="keyword">const</span> list3 = list1.<span class="title function_">concat</span>(list2, array); </span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure>

<h4 id="4-toJS"><a href="#4-toJS" class="headerlink" title="4.toJS"></a>4.toJS</h4><p>将immutable转成普通JS对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Map</span>, <span class="title class_">List</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;immutable&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> deep = <span class="title class_">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="title class_">List</span>([ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]) &#125;); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deep.<span class="title function_">toObject</span>()); <span class="comment">// &#123; a: 1, b: 2, c: List [ 3, 4, 5 ] &#125; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deep.<span class="title function_">toArray</span>()); <span class="comment">// [ 1, 2, List [ 3, 4, 5 ] ] </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deep.<span class="title function_">toJS</span>()); <span class="comment">// &#123; a: 1, b: 2, c: [ 3, 4, 5 ] &#125; </span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(deep); <span class="comment">// &#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:[3,4,5]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-fromJS"><a href="#5-fromJS" class="headerlink" title="5.fromJS"></a>5.fromJS</h4><p>将普通JS对象转为immutable对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; fromJS &#125; = <span class="built_in">require</span>(<span class="string">&#x27;immutable&#x27;</span>); </span><br><span class="line"><span class="keyword">const</span> nested = <span class="title function_">fromJS</span>(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125; &#125; &#125;); </span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ] &#125; &#125; &#125; </span></span><br><span class="line"><span class="keyword">const</span> nested2 = nested.<span class="title function_">mergeDeep</span>(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">d</span>: <span class="number">6</span> &#125; &#125; &#125;); </span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 6 &#125; &#125; &#125; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nested2.<span class="title function_">getIn</span>([ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span> ])); <span class="comment">// 6 </span></span><br><span class="line"><span class="comment">//如果取一级属性 直接通过get方法，如果取多级属性 getIn([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]]) //setIn 设置新的值 </span></span><br><span class="line"><span class="keyword">const</span> nested3 = nested2.<span class="title function_">setIn</span>([ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span> ], <span class="string">&quot;kerwin&quot;</span>); </span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: &quot;kerwin&quot; &#125; &#125; &#125; </span></span><br><span class="line"><span class="comment">//updateIn 回调函数更新</span></span><br><span class="line"><span class="keyword">const</span> nested3 = nested2.<span class="title function_">updateIn</span>([ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span> ], <span class="function"><span class="params">value</span> =&gt;</span> value + <span class="number">1</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nested3); </span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 7 &#125; &#125; &#125; </span></span><br><span class="line"><span class="keyword">const</span> nested4 = nested3.<span class="title function_">updateIn</span>([ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ], <span class="function"><span class="params">list</span> =&gt;</span> list.<span class="title function_">push</span>(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5, 6 ], d: 7 &#125; &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="redux-Immutable应用"><a href="#redux-Immutable应用" class="headerlink" title="redux Immutable应用"></a>redux Immutable应用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reducer.js </span></span><br><span class="line"><span class="keyword">const</span> initialState = <span class="title function_">fromJS</span>(&#123;<span class="attr">category</span>: <span class="string">&quot;&quot;</span>, <span class="attr">material</span>: <span class="string">&quot;&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">prevstate = initialState, action = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;type, payload&#125; = action</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">GET_HOME</span>:</span><br><span class="line">      <span class="keyword">var</span> newstate = prevstate.<span class="title function_">set</span>(<span class="string">&quot;category&quot;</span>, <span class="title function_">fromJS</span>(payload.<span class="property">category</span>))</span><br><span class="line">      <span class="keyword">var</span> newstate2 = newstate.<span class="title function_">set</span>(<span class="string">&quot;material&quot;</span>, <span class="title function_">fromJS</span>(payload.<span class="property">material</span>))</span><br><span class="line">      <span class="keyword">return</span> newstate2;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> prevstate</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//home.js </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">category</span>: state.<span class="property">homeReducer</span>.<span class="title function_">getIn</span>([<span class="string">&quot;category&quot;</span>]) || <span class="title class_">Map</span>(&#123;&#125;),</span><br><span class="line">    <span class="attr">material</span>: state.<span class="property">homeReducer</span>.<span class="title function_">getIn</span>([<span class="string">&quot;material&quot;</span>]) || <span class="title class_">Map</span>(&#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">category</span>.<span class="title function_">get</span>(<span class="string">&quot;相关属性&quot;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">category</span>.<span class="title function_">toJS</span>() <span class="comment">//或者转成普通对象</span></span><br></pre></td></tr></table></figure>

<p>Immutable也存在一定的缺点：</p>
<ul>
<li>容易跟原生JS混淆</li>
<li>文档与调试不方便</li>
</ul>
]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Memo</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20Memo/</url>
    <content><![CDATA[<h2 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h2><p>在计算机领域，记忆化是一种主要用来提升计算机程序速度的优化技术方案。它将开销较大的函数调用的返回结果存储起来，当同样的输入再次发生时，则返回缓存好的数据，以此提升运算效率。</p>
<p>作用：组件仅在它的 <em>props</em> 发生改变的时候进行重新渲染。通常来说，在组件树中 <em>React</em> 组件，只要有变化就会走一遍渲染流程。但是*React.memo()*，我们可以仅仅让某些组件进行渲染。</p>
<p>与PureComponent的区别：PureComponent只能用于class组件，memo用于function组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>, memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;sola&#x27;</span>,</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.state.name&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">              name:&#x27;jerry&#x27;</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">              title:&#x27;aaa&#x27;</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;click1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Child</span> <span class="attr">title</span>=<span class="string">&#123;this.state.title&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function Child() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(123);</span></span><br><span class="line"><span class="comment">//   return &lt;div&gt;</span></span><br><span class="line"><span class="comment">//     111</span></span><br><span class="line"><span class="comment">//   &lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>child-&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Mobx</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20Mobx/</url>
    <content><![CDATA[<h2 id="Mobx"><a href="#Mobx" class="headerlink" title="Mobx"></a>Mobx</h2><h3 id="Mobx介绍"><a href="#Mobx介绍" class="headerlink" title="Mobx介绍"></a>Mobx介绍</h3><p>(1) Mobx是一个功能强大，上手非常容易的状态管理工具。</p>
<p>(2) Mobx背后的哲学很简单: 任何源自应用状态的东西都应该自动地获得。</p>
<p>(3) Mobx利用getter和setter来收集组件的数据依赖关系，从而在数据发生变化的时候精确知道哪些组件需要重绘，在界面的规模变大的时候，往往会有很多细粒度更新。</p>
<p><img src="E:\笔记\我的笔记(ob)\前端相关\React\img\flow.png"></p>
<h3 id="Mobx与redux区别"><a href="#Mobx与redux区别" class="headerlink" title="Mobx与redux区别"></a>Mobx与redux区别</h3><ul>
<li>Mobx写法上更偏向于OOP</li>
<li>对一份数据直接进行修改操作，不需要始终返回一个新的数据并非单一store,可以多store。</li>
<li>Redux默认以JavaScript原生对象形式存储数据，而Mobx使用可观察对象</li>
</ul>
<p>优点：</p>
<ul>
<li>学习成本小</li>
<li>面向对象编程, 而且对 TS 友好</li>
</ul>
<p>缺点：</p>
<ul>
<li>过于自由：Mobx提供的约定及模版代码很少，代码编写很自由，如果不做一些约定，比较容易导致团队代码风格不统一</li>
<li>相关的中间件很少，逻辑层业务整合是问题。</li>
</ul>
<h3 id="Mobx使用"><a href="#Mobx使用" class="headerlink" title="Mobx使用"></a>Mobx使用</h3><h4 id="1-observable和autorun"><a href="#1-observable和autorun" class="headerlink" title="1.observable和autorun"></a>1.observable和autorun</h4><p>通过observable.box对属性进行观察监听，当属性发生改变时，autorun中可以监听获取。</p>
<p>注意：autorun中监听某个属性a的时候，其他属性b发生改变，监听a属性的autorun方法不会再执行。也就是说，在Mobx中，需要进行属性一对一的监听</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observable,autorun&#125; <span class="keyword">from</span>  <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observableNumber = observable.<span class="title function_">box</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> observableName = observable.<span class="title function_">box</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="title function_">autorun</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(observableNumber.<span class="title function_">get</span>());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">autorun</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(observableName.<span class="title function_">get</span>());</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()  =&gt;</span> &#123;</span><br><span class="line">  observableNumber.<span class="title function_">set</span>(<span class="number">20</span>)</span><br><span class="line">  observableName.<span class="title function_">set</span>(<span class="string">&#x27;jerry&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察对象，通过Map</span></span><br><span class="line"><span class="keyword">const</span> map = observable.<span class="title function_">map</span>(&#123;<span class="attr">key</span>:<span class="string">&quot;value&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// map.set(&quot;key&quot;,&quot;new value&quot;)</span></span><br><span class="line"><span class="comment">// map.get(&quot;key&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//观察对象，不通过map </span></span><br><span class="line"><span class="keyword">const</span> map = <span class="title function_">observable</span>(&#123; <span class="attr">key</span>: <span class="string">&quot;value&quot;</span>&#125;); </span><br><span class="line"><span class="comment">// map.key map.key=&quot;xiaoming&quot; </span></span><br><span class="line"><span class="comment">//观察数组 </span></span><br><span class="line"><span class="keyword">const</span> list = <span class="title function_">observable</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]); </span><br><span class="line">list[<span class="number">2</span>] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-action-runInAction和严格模式"><a href="#2-action-runInAction和严格模式" class="headerlink" title="2.action,runInAction和严格模式"></a>2.action,runInAction和严格模式</h4><ul>
<li>action普通派发行为</li>
<li>runInAction 解决异步派发行为</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mobx/store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;observable, action, configure,runInAction&#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span>; </span><br><span class="line"><span class="title function_">configure</span>(&#123;<span class="attr">enforceActions</span>:<span class="string">&#x27;always&#x27;</span>&#125;) </span><br><span class="line"><span class="comment">//严格模式， 必须写action, </span></span><br><span class="line"><span class="comment">//如果是never，可以不写action, </span></span><br><span class="line"><span class="comment">//最好设置always, 防止任意地方修改值， 降低不确定性。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  @observable isTabbarShow = <span class="literal">true</span></span><br><span class="line">  @observable list = []</span><br><span class="line"></span><br><span class="line">  @action <span class="title function_">changeShow</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isTabbarShow</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 同步</span></span><br><span class="line">  @action <span class="title function_">changeHide</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isTabbarShow</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 异步</span></span><br><span class="line">  @action <span class="keyword">async</span> <span class="title function_">getList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://m.maizuo.com/gateway?cityId=110100&amp;ticketFlag=1&amp;k=878555&#x27;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;X-Client-Info&#x27;</span>: <span class="string">&#x27;&#123;&quot;a&quot;: &quot;3000&quot;, &quot;ch&quot;: &quot;1002&quot;, &quot;v&quot;: &quot;5.2.0&quot;, &quot;e&quot;: &quot;1646462402616989231939585&quot;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Host&#x27;</span>: <span class="string">&#x27;mall.film-ticket.cinema.list&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>  res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">cinemas</span></span><br><span class="line">        <span class="comment">// runInAction解决Mobx中的异步</span></span><br><span class="line">      <span class="comment">// runInAction(()  =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   this.list = res.data.data.cinemas</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">	<span class="comment">// runInAction解决Mobx中的异步</span></span><br><span class="line">    <span class="title function_">runInAction</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span> = list</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Store</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">   state = &#123;</span><br><span class="line">     <span class="attr">isShow</span>:<span class="literal">false</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 监听Mobx状态的改变，从而驱动react中的状态</span></span><br><span class="line">    <span class="title function_">autorun</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="property">isTabbarShow</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">isShow</span>:store.<span class="property">isTabbarShow</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">IndexRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;this.state.isShow  &amp;&amp;  <span class="tag">&lt;<span class="name">Tabbar</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">IndexRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-解决react脚手架中使用ES7中的装饰器问题"><a href="#3-解决react脚手架中使用ES7中的装饰器问题" class="headerlink" title="3.解决react脚手架中使用ES7中的装饰器问题"></a>3.解决react脚手架中使用ES7中的装饰器问题</h4><ol>
<li><p>npm i @babel/core @babel/plugin-proposal-decorators @babel/preset-env</p>
</li>
<li><p>创建 <code>.babelrc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        &quot;@babel/preset-env&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">        [</span><br><span class="line">            &quot;@babel/plugin-proposal-decorators&quot;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;legacy&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建config-overrides.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; override, addDecoratorsLegacy &#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.<span class="title function_">join</span>(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">customize</span> = (<span class="params"></span>) =&gt; <span class="function">(<span class="params">config, env</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">resolve</span>.<span class="property">alias</span>[<span class="string">&#x27;@&#x27;</span>] = <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (env === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">        config.<span class="property">externals</span> = &#123;</span><br><span class="line">            <span class="string">&#x27;react&#x27;</span>: <span class="string">&#x27;React&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;react-dom&#x27;</span>: <span class="string">&#x27;ReactDOM&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">override</span>(<span class="title function_">addDecoratorsLegacy</span>(), <span class="title function_">customize</span>())</span><br></pre></td></tr></table></figure></li>
<li><p>安装依赖：npm i customize-cra react-app-rewired</p>
</li>
<li><p>修改package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set PORT=4000 &amp;&amp; react-app-rewired start&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired eject&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-mobx-react使用"><a href="#4-mobx-react使用" class="headerlink" title="4.mobx-react使用"></a>4.mobx-react使用</h3><p>npm i mobx-react@5</p>
<h4 id="1-react-组件里使用-observer"><a href="#1-react-组件里使用-observer" class="headerlink" title="1.react 组件里使用 @observer"></a>1.react 组件里使用 @observer</h4><p>observer 函数/装饰器可以用来将 React 组件转变成响应式组件。</p>
<h4 id="2-可观察的局部组件状态"><a href="#2-可观察的局部组件状态" class="headerlink" title="2.可观察的局部组件状态"></a>2.可观察的局部组件状态</h4><p>@observable 装饰器在React组件上引入可观察属性。而不需要通过 React 的冗长和强制性的 setState 机制来管理。</p>
<h4 id="3-Provider-组件"><a href="#3-Provider-组件" class="headerlink" title="3.Provider 组件"></a>3.Provider 组件</h4><p>它使用了 React 的上下文(context)机制，可以用来向下传递 stores。 要连接到这些 stores，需要传递一个 stores名称的列表给 inject，这使得 stores 可以作为组件的 props 使用。this.props</p>
<h4 id="4-使用流程"><a href="#4-使用流程" class="headerlink" title="4.使用流程"></a>4.使用流程</h4><ol>
<li><p>index.js 使用Provider将跟组件进行包裹</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDom</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./mobx/App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Provider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./mobx/store&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    ,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>类组件使用Mobx</p>
<p>通过inject装饰器注入store，observer装饰器将react变成响应式组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IndexRouter</span> <span class="keyword">from</span> <span class="string">&quot;./router/IndexRouter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Tabbar</span> <span class="keyword">from</span> <span class="string">&quot;./components/Tabbar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./views/css/App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;autorun&#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../mobx/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;inject, observer&#125; <span class="keyword">from</span> <span class="string">&quot;mobx-react&quot;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">inject</span>(<span class="string">&quot;store&quot;</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this.props);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">IndexRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;this.props.store.isTabbarShow  &amp;&amp;  <span class="tag">&lt;<span class="name">Tabbar</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">IndexRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>函数组件使用Mobx</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../../mobx/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;autorun&#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observer</span>&#125; <span class="keyword">from</span> <span class="string">&quot;mobx-react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Cinemas</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(store.<span class="property">list</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">      store.<span class="title function_">getList</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Observer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;() =&gt; &#123; return store.list.map(item =&gt;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">dl</span> <span class="attr">key</span>=<span class="string">&#123;item.cinemaId&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;padding:</span>&quot;<span class="attr">10px</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">dd</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:</span>&quot;<span class="attr">12px</span>&quot;,<span class="attr">color:</span>&quot;<span class="attr">gray</span>&quot;&#125;&#125;&gt;</span>&#123;item.address&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              )</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Observer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mobx/store.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observable,autorun,configure,action,runInAction&#125;  <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="title function_">configure</span>(&#123;</span><br><span class="line">  <span class="attr">enforceActions</span>:<span class="string">&#x27;always&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  @observable isTabbarShow = <span class="literal">true</span></span><br><span class="line">  @observable list = []</span><br><span class="line"></span><br><span class="line">  @action <span class="title function_">changeShow</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isTabbarShow</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @action <span class="title function_">changeHide</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isTabbarShow</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  @action <span class="keyword">async</span> <span class="title function_">getList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://m.maizuo.com/gateway?cityId=110100&amp;ticketFlag=1&amp;k=878555&#x27;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;X-Client-Info&#x27;</span>: <span class="string">&#x27;&#123;&quot;a&quot;: &quot;3000&quot;, &quot;ch&quot;: &quot;1002&quot;, &quot;v&quot;: &quot;5.2.0&quot;, &quot;e&quot;: &quot;1646462402616989231939585&quot;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Host&#x27;</span>: <span class="string">&#x27;mall.film-ticket.cinema.list&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>  res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">cinemas</span></span><br><span class="line">      <span class="comment">// runInAction(()  =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   this.list = res.data.data.cinemas</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">runInAction</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span> = list</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Store</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Portal</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20Portal/</url>
    <content><![CDATA[<h2 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h2><p>Portals 提供了一个最好的在父组件包含的DOM结构层级外的DOM节点渲染组件的方法。</p>
<p>应用场景：当在react中想实现一个类似于dialog的全局组件，此时该组件的样式很容易收到父组件、兄弟组件的干扰（z-index，拼爹原则：当兄弟组件都有z-index，一个大于另一个的时候，小的那个组件的子组件的z-index就算在大也没有用，优先级仍然还是低于z-index较大的那个组件）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数child是可渲染的react子项，比如元素，字符串或者片段等。第二个参数container是一个DOM元素。</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createPortal</span>(child,container);</span><br></pre></td></tr></table></figure>

<p>普通的组件，子组件的元素将挂载到父组件的DOM节点中。</p>
<p>一个典型的用法就是当父组件的dom元素有 overflow:hidden 或者 z-inde 样式，而你又需要显示的子元素超出父元素的盒子。举例来说，如对话框，悬浮框，和小提示。</p>
<p>示例：</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PortalDialog</span> <span class="keyword">from</span> <span class="string">&quot;./components/PortalDialog&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">isShow</span>:<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">                isShow:true</span></span><br><span class="line"><span class="language-xml">              &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              this.state.isShow &amp;&amp; <span class="tag">&lt;<span class="name">PortalDialog</span> <span class="attr">onClose</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">                  isShow:false</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">              &#125;&gt;<span class="tag">&lt;/<span class="name">PortalDialog</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>App.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*此时left的z-index明显要大于right的z-index，因此，right结构下的组件无论它的z-index有多大，都不会超过left的优先级，因为拼爹失败。*/</span></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PortalDialog.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createPortal&#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PortalDialog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> createPortal (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span>&#x27;<span class="attr">100</span>%&#x27;,<span class="attr">height:</span>&#x27;<span class="attr">100</span>%&#x27;,<span class="attr">position:</span>&#x27;<span class="attr">fixed</span>&#x27;,<span class="attr">left:0</span>,<span class="attr">top:0</span>,<span class="attr">background:</span>&#x27;<span class="attr">rgba</span>(<span class="attr">0</span>,<span class="attr">0</span>,<span class="attr">0</span>,<span class="attr">0.7</span>)&#x27;,<span class="attr">zIndex:9999</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          Dialog-</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>loading-正在加载中。。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.onClose&#125;</span>&gt;</span>close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    ,<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PortalDialog</span>;</span><br></pre></td></tr></table></figure>

<p>portal中的事件冒泡</p>
<p>虽然通过portal渲染的元素在父组件的盒子之外，但是渲染的dom节点仍在React的元素树上，在那个dom元素上的点击事件仍然能在dom树中监听到。 </p>
]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20TypeScript/</url>
    <content><![CDATA[<h2 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h2><p>TypeScript是Microsoft公司注册商标。<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/">https://zhongsp.gitbooks.io/typescript-handbook/content/</a></p>
<p>TypeScript具有类型系统，且是JavaScript的超集。 它可以编译成普通的JavaScript代码。 TypeScript支持任意浏览器，任意环境，任意系统并且是开源的。</p>
<ol>
<li><p>TypeScript 的定位是静态类型语言，在写代码阶段就能检查错误，而非运行阶段</p>
</li>
<li><p>类型系统是最好的文档，增加了代码的可读性和可维护性。</p>
</li>
<li><p>有一定的学习成本，需要理解接口（Interfaces）、泛型（Generics）、类（Classes）等</p>
</li>
<li><p>ts最后被编译成js</p>
</li>
</ol>
<p>创建TS项目</p>
<p>create-react-app my-app –template typescript</p>
<h3 id="ts基础"><a href="#ts基础" class="headerlink" title="ts基础"></a>ts基础</h3><h4 id="1-基本类型"><a href="#1-基本类型" class="headerlink" title="1.基本类型"></a>1.基本类型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">name</span>:<span class="built_in">string</span>= <span class="string">&#x27;sola&#x27;</span></span><br><span class="line">name.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">age</span>:<span class="built_in">number</span> = <span class="number">100</span></span><br><span class="line">age.<span class="title function_">toFixed</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 布尔</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">show</span>:<span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 多类型</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">my</span>:<span class="built_in">string</span>|<span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="comment">// 任意类型</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">myany</span>:<span class="built_in">any</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">list</span>:<span class="built_in">string</span>[] = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">list2</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">list3</span>:(<span class="built_in">number</span>|<span class="built_in">string</span>)[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">mylist1</span>:<span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">myList2</span>:<span class="title class_">Array</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;qwer&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IObj</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">  location?:<span class="built_in">string</span>, <span class="comment">// 可选属性</span></span><br><span class="line">  [<span class="attr">propName</span>:<span class="built_in">string</span>]:<span class="built_in">any</span> <span class="comment">// 剩下不关心的数据用这种方式存储</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">obj1</span>:<span class="title class_">IObj</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;sola&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">11</span>,</span><br><span class="line">  <span class="comment">// location:&#x27;sy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params">a:<span class="built_in">string</span>,b:<span class="built_in">number</span>,c?:<span class="built_in">boolean</span></span>):<span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">1</span>) + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test1</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二 接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IFunc</span>&#123;</span><br><span class="line">  (<span class="attr">a</span>:<span class="built_in">string</span>,<span class="attr">b</span>:<span class="built_in">string</span>,c?:<span class="built_in">number</span>):<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">myFunc2</span>:<span class="title class_">IFunc</span> = <span class="keyword">function</span> (<span class="params">a: <span class="built_in">string</span>,b:<span class="built_in">string</span>,c?:<span class="built_in">number</span></span>):<span class="built_in">string</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IObj</span>  &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">getName</span>:<span class="function">(<span class="params">name:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">obj</span>:<span class="title class_">IObj</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;sola&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">getName</span>:<span class="function">(<span class="params">name:<span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = obj.<span class="title function_">getName</span>(<span class="string">&#x27;sola&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-类"><a href="#5-类" class="headerlink" title="5.类"></a>5.类</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> name = <span class="string">&#x27;sola&#x27;</span> <span class="comment">//  共有属性</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">list</span>:<span class="built_in">any</span> = [] <span class="comment">// 私有属性，只有自己可以访问</span></span><br><span class="line">  <span class="keyword">protected</span> age = <span class="number">100</span> <span class="comment">// 受保护的，孩子类可以访问</span></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">cb: <span class="built_in">any</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(cb)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">dispatch</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb: () =&gt; <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      cb &amp;&amp; <span class="title function_">cb</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-类-接口"><a href="#6-类-接口" class="headerlink" title="6.类+接口"></a>6.类+接口</h4><p>类中 定义接口，用来实现类中所要实现的方法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Ifunc</span> &#123;</span><br><span class="line">  <span class="attr">getName</span>:<span class="function">() =&gt;</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="comment">// getAge:() =&gt; number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">Ifunc</span>&#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;AAA&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Ifunc</span>&#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;CCC&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">Ifunc</span>&#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;DDD&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">obj:Ifunc</span>) &#123;</span><br><span class="line">  obj.<span class="title function_">getName</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objA = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line"><span class="keyword">var</span> objB = <span class="keyword">new</span> <span class="title function_">B</span>()</span><br><span class="line"><span class="keyword">var</span> objC = <span class="keyword">new</span> <span class="title function_">C</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>(objA)</span><br><span class="line"><span class="title function_">init</span>(objB)</span><br><span class="line"><span class="title function_">init</span>(objC)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="react-class-ts"><a href="#react-class-ts" class="headerlink" title="react class ts"></a>react class ts</h3><h4 id="1-state"><a href="#1-state" class="headerlink" title="1.state"></a>1.state</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IState</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型中第一个参数约定属性，第二个约定状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="built_in">any</span>,<span class="title class_">IState</span>&gt; &#123;</span><br><span class="line">  <span class="attr">state</span>:<span class="title class_">IState</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;sola&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          app-&#123;this.state.name.substring(0,1).toUpperCase() + this.state.name.substring(1)&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">              name:&#x27;jerry&#x27;</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-prop"><a href="#2-prop" class="headerlink" title="2.prop"></a>2.prop</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;sola&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">IProps</span>, <span class="built_in">any</span>&gt;&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      child - &#123;this.props.name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-ref"><a href="#3-ref" class="headerlink" title="3.ref"></a>3.ref</h4><p>当在ts中使用ref的时候，需要通过类型断言的方式，来指定ref 的类型为<code>HTMLInputElement</code></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IState</span> &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">list</span>:<span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="built_in">any</span>, <span class="title class_">IState</span>&gt; &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">list</span>:[]</span><br><span class="line">  &#125;</span><br><span class="line">  myRef = <span class="title class_">React</span>.<span class="property">createRef</span>&lt;<span class="title class_">HTMLInputElement</span>&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/*<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.text&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>  =&gt;</span> &#123;*/&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;/*  this.setState(&#123;*/&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;/*    text:e.target.value*/&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;/*  &#125;)*/&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;/*&#125;&#125; type=&quot;text&quot;/&gt;*/&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            console.log((this.myRef.current as HTMLInputElement).value);</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">              list:[...this.state.list,(this.myRef.current as HTMLInputElement).value]</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;click</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            this.state.list.map((item,index)  =&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                    let newList = this.state.list.concat()</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    var t = newList.splice(index,1)</span></span><br><span class="line"><span class="language-xml">                    console.log(t);</span></span><br><span class="line"><span class="language-xml">                    this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">                      list:newList</span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                  &#125;&#125;&gt;del<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="4-父子通信（子传父）"><a href="#4-父子通信（子传父）" class="headerlink" title="4.父子通信（子传父）"></a>4.父子通信（子传父）</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">isShow</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          app</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Navbar</span> <span class="attr">title</span>=<span class="string">&quot;首页&quot;</span> <span class="attr">cb</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">              isShow:!this.state.isShow</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          &#123;this.state.isShow &amp;&amp; <span class="tag">&lt;<span class="name">Sidebar</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> &#123;</span><br><span class="line">  <span class="attr">title</span>:<span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">cb</span>:<span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Navbar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">IProps</span>, <span class="built_in">any</span>&gt;&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      navbar-&#123;this.props.title&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        this.props.cb()</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">      &#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sidebar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      sidebar</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="react-function-ts"><a href="#react-function-ts" class="headerlink" title="react function ts"></a>react function ts</h3><h4 id="1-state-1"><a href="#1-state-1" class="headerlink" title="1.state"></a>1.state</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name,setName] = useState&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;sola&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        app - &#123;name.substring(0,1).toUpperCase()+name.substring(1)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>

<h4 id="2-prop-1"><a href="#2-prop-1" class="headerlink" title="2.prop"></a>2.prop</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;aaa&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child1</span> <span class="attr">name</span>=<span class="string">&quot;bbb&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props:IProps</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>child-&#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child1</span>:<span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>child1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-ref-1"><a href="#3-ref-1" class="headerlink" title="3.ref"></a>3.ref</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useRef, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> myText = useRef&lt;<span class="title class_">HTMLInputElement</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> [list,setList] = useState&lt;<span class="built_in">string</span>[]&gt;([])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;myText&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          console.log((myText.current as HTMLInputElement).value);</span></span><br><span class="line"><span class="language-xml">          setList([...list,(myText.current as HTMLInputElement).value])</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map(item =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;item&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-父子通信（子传父）-1"><a href="#4-父子通信（子传父）-1" class="headerlink" title="4.父子通信（子传父）"></a>4.父子通信（子传父）</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isShow,setIsShow] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Navbar</span> <span class="attr">cb</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setIsShow(!isShow)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">        &#123; isShow &amp;&amp;  <span class="tag">&lt;<span class="name">SideBar</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> &#123;</span><br><span class="line">  title?:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">cb</span>:<span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Navbar</span>(<span class="params">props:IProps</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    navbar- <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">      props.cb()</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SideBar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    sidebar</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="react-router-ts"><a href="#react-router-ts" class="headerlink" title="react router ts"></a>react router ts</h3><p>安装声明文件：npm i @types/react-router-dom</p>
<p>其他编码模式与之前是一样的，<strong>有一个点需要注意：</strong>在使用编程式路由导航的时候，需要引入接口配置</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouteComponentProps</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IItem</span> &#123;</span><br><span class="line">  <span class="attr">filmId</span>:<span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Film</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">RouteComponentProps</span>,<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">list</span>:[]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;https://m.maizuo.com/gateway?cityId=110100&amp;pageNum=1&amp;pageSize=10&amp;type=1&amp;k=7605418&quot;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;X-Client-Info&#x27;</span>: <span class="string">&#x27;&#123;&quot;a&quot;:&quot;3000&quot;,&quot;ch&quot;:&quot;1002&quot;,&quot;v&quot;:&quot;5.2.0&quot;,&quot;e&quot;:&quot;1646462402616989231939585&quot;,&quot;bc&quot;:&quot;110100&quot;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Host&#x27;</span>: <span class="string">&#x27;mall.film-ticket.film.list&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">list</span>:res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">films</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            this.state.list.map((item:IItem) =&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                  this.props.history.push(`/detail/$&#123;item.filmId&#125;`)</span></span><br><span class="line"><span class="language-xml">                &#125;&#125; key=&#123;item.filmId&#125;&gt;&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Film</span>;</span><br></pre></td></tr></table></figure>

<p>动态路由</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouteComponentProps</span>&#125; <span class="keyword">from</span>  <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IParam</span> &#123;</span><br><span class="line">  <span class="attr">myid</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Detail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">RouteComponentProps</span>&lt;<span class="title class_">IParam</span>&gt;,<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          detail-&#123;this.props.match.params.myid&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Detail</span>;</span><br></pre></td></tr></table></figure>

<h3 id="react-redux-ts"><a href="#react-redux-ts" class="headerlink" title="react redux ts"></a>react redux ts</h3><p>ts中的redux，与之前也基本无大差异，只是新增了一些规定及约束，下面来看之前的业务场景：在Film组件中点击某个电影，跳转到电影详情Detail组件的时候，底部栏tabbar组件的状态需要改变，在Film组件里显示tabbar组件，在Detail组件中隐藏tabbar组件。</p>
<p>1.新建redux文件夹，该文件夹下创建store.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 通过ts指定派发action的类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IAction</span> &#123;</span><br><span class="line">  <span class="attr">type</span>:<span class="built_in">string</span>,</span><br><span class="line">  payload?:<span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定状态的类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IState</span> &#123;</span><br><span class="line">  <span class="attr">isShow</span>:<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">reducer</span>:<span class="built_in">any</span> = <span class="function">(<span class="params">prevState:IState  =&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  isShow:<span class="literal">true</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;,action:IAction</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="keyword">type</span>&#125; = action</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">newState</span>:<span class="built_in">any</span> = &#123;...prevState&#125;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">      newState.<span class="property">isShow</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> newState</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;hide&quot;</span>:</span><br><span class="line">      newState.<span class="property">isShow</span> = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> newState</span><br><span class="line">    <span class="attr">default</span>:<span class="keyword">return</span>  prevState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>2.App组件中进行监听状态的变化并保存到状态（订阅）</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IndexRouter</span> <span class="keyword">from</span> <span class="string">&quot;./router/Index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./redux/store&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">isShow</span>:(store.<span class="title function_">getState</span>() <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">isShow</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>());</span><br><span class="line">    store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">isShow</span>:(store.<span class="title function_">getState</span>() <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">isShow</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">IndexRouter</span>&gt;</span><span class="tag">&lt;/<span class="name">IndexRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            this.state.isShow &amp;&amp; <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>影院<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>3.Detail组件中派发action（发布）</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouteComponentProps</span>&#125; <span class="keyword">from</span>  <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../redux/store&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IParam</span> &#123;</span><br><span class="line">  <span class="attr">myid</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Detail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">RouteComponentProps</span>&lt;<span class="title class_">IParam</span>&gt;,<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="string">&#x27;hide&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="string">&#x27;show&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          detail-&#123;this.props.match.params.myid&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Detail</span>;</span><br></pre></td></tr></table></figure>

<h3 id="react-antd-ts"><a href="#react-antd-ts" class="headerlink" title="react antd ts"></a>react antd ts</h3><p>与正常使用无大差异，个别antd组件中，需要不同的ref，详细查看antd官网</p>
]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Umi</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20Umi/</url>
    <content><![CDATA[<h2 id="Umi"><a href="#Umi" class="headerlink" title="Umi"></a>Umi</h2><h3 id="Umi简介"><a href="#Umi简介" class="headerlink" title="Umi简介"></a>Umi简介</h3><p>Umi，中文发音为「乌米」，是可扩展的企业级前端应用框架。Umi 以路由为基础的，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求。</p>
<p>Umi 是蚂蚁集团的底层前端框架，已直接或间接地服务了 10000+ 应用，包括 Java、Node、H5 无线、离线（Hybrid）应用、纯前端 assets 应用、CMS 应用、Electron 应用、Serverless 应用等。他已经很好地服务了我们的内部用户，同时也服务了不少外部用户，包括淘系、飞猪、阿里云、字节、腾讯、口碑、美团等。在 2021 年字节的<a href="https://zhuanlan.zhihu.com/p/403206195">调研报告</a>中，Umi 是其中 25.33% 开发者的选择。</p>
<p>Umi 有很多非常有意思的特性，比如。</p>
<p>1、<strong>企业级</strong>，在安全性、稳定性、最佳实践、约束能力方面会考虑更多<br>2、<strong>插件化</strong>，啥都能改，Umi 本身也是由插件构成<br>3、<strong>MFSU</strong>，比 Vite 还快的 Webpack 打包方案<br>4、基于 React Router 6 的完备路由<br>5、默认最快的请求<br>6、SSR &amp; SSG<br>7、稳定白盒性能好的 ESLint 和 Jest<br>8、React 18 的框架级接入<br>9、Monorepo 最佳实践</p>
<p>什么时候不用 Umi？</p>
<p>如果你的项目，</p>
<p>1、需要支持 IE 8 或更低版本的浏览器<br>2、需要支持 React 16.8.0 以下的 React<br>3、需要跑在 Node 14 以下的环境中<br>4、有很强的 webpack 自定义需求和主观意愿<br>5、需要选择不同的路由方案<br>…</p>
<p>Umi 可能不适合你。</p>
<p>为什么不是？</p>
<p>create-react-app</p>
<p>create-react-app 是脚手架，和 Umi、next.js、remix、ice、modern.js 等元框架不是同一类型。脚手架可以让我们快速启动项目，对于单一的项目够用，但对于团队而言却不够。因为使用脚手架像泼出去的水，一旦启动，无法迭代。同时脚手架所能做的封装和抽象都非常有限。</p>
<p>next.js</p>
<p>如果要做 SSR，next.js 是非常好的选择（当然，Umi 也支持 SSR）；而如果只做 CSR，Umi 会是更好的选择。相比之下，Umi 的扩展性会更好；并且 Umi 做了很多更贴地气的功能，比如配置式路由、补丁方案、antd 的接入、微前端、国际化、权限等；同时 Umi 会更稳定，因为他锁了能锁的全部依赖，定期主动更新，某一个子版本的 Umi，不会因为重装依赖之后而跑不起来。</p>
<p>remix</p>
<p>Remix 是我非常喜欢的框架，Umi 4 从中<del>抄</del>（学）了不少东西。但 Remix 是 Server 框架，其内置的 loader 和 action 都是跑在 server 端的，所以会对部署环境会有一定要求。Umi 将 loader、action 以及 remix 的请求机制同时运用到 client 和 server 侧，不仅 server 请求快，纯 CSR 的项目请求也可达到理论的最快值。同时 Remix 基于 esbuild 做打包，可能不适用于对兼容性有要求或者依赖尺寸特别大的项目。</p>
<p>以上均摘自Umi官网，很有意思的介绍与对比。开整</p>
<p>安装脚手架：</p>
<ul>
<li>mkdir myapp &amp;&amp; cd myapp //空目录</li>
<li>npx @umijs/create-umi-app</li>
</ul>
<p>安装项目依赖：</p>
<ul>
<li>进入myapp，执行 npm install</li>
</ul>
<h3 id="1-创建组件"><a href="#1-创建组件" class="headerlink" title="1.创建组件"></a>1.创建组件</h3><ul>
<li>在根目录下的pages目录下创建对应名字的组件即可</li>
<li>例如：Film.tsx 此时在页面访问：<a href="http://localhost:8000/film">http://localhost:8000/film</a> 即可访问到Film组件对应的内容。</li>
</ul>
<h3 id="2-redirect重定向"><a href="#2-redirect重定向" class="headerlink" title="2.redirect重定向"></a>2.redirect重定向</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Redirect</span>&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/film&quot;</span>/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-404"><a href="#3-404" class="headerlink" title="3.404"></a>3.404</h3><p>创建pages/404.tsx 当没有匹配的路由的时候，会默认访问404.tsx的组件内容</p>
<h3 id="4-嵌套路由及重定向"><a href="#4-嵌套路由及重定向" class="headerlink" title="4.嵌套路由及重定向"></a>4.嵌套路由及重定向</h3><p>目录层级如下：</p>
<p>pages</p>
<ul>
<li>film<ul>
<li>_layout.tsx</li>
<li>Comingsoon.tsx</li>
<li>Nowplaying.tsx</li>
</ul>
</li>
</ul>
<p>例如：pages下新建film文件夹，在film文件夹下创建**_layout.tsx** ,在该文件中编写Film组件对应的页面，在film文件夹下创建子路由组件ComingSoon组件、Nowplaying组件。在<code>_layout.tsx</code>中使用插槽的方式，去渲染二级路由（嵌套路由）</p>
<p>此时，在嵌套路由的重定向，依然与一级路由的使用方式相同，同样是<Redirect to="/film/nowplaying" /></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Redirect</span>,useLocation&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Film</span>(<span class="params">props:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useLocation</span>()</span><br><span class="line">  <span class="keyword">if</span> (location.<span class="property">pathname</span> === <span class="string">&quot;/film&quot;</span> || location.<span class="property">pathname</span> === <span class="string">&quot;/film/&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/film/nowplaying&quot;</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&quot;<span class="attr">yellow</span>&quot;,<span class="attr">height:</span>&quot;<span class="attr">200px</span>&quot;&#125;&#125;&gt;</span>大轮播<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-路由根页面和声明式路由导航"><a href="#5-路由根页面和声明式路由导航" class="headerlink" title="5.路由根页面和声明式路由导航"></a>5.路由根页面和声明式路由导航</h3><p>在项目根目录下创建layouts目录，目录下创建index.tsx为路由的根页面，通过<code>props.children</code>插槽方式来渲染其他已经渲染好的路由组件。如下：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span><span class="string">&#x27;./index.less&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">IndexLayout</span>(<span class="params">props:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (props.<span class="property">location</span>.<span class="property">pathname</span> === <span class="string">&quot;/city&quot;</span> ||  props.<span class="property">location</span>.<span class="property">pathname</span>.<span class="title function_">includes</span>(<span class="string">&quot;/detail&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/film&quot;</span> <span class="attr">activeClassName</span>=<span class="string">&quot;active&quot;</span>&gt;</span>film<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/cinema&quot;</span> <span class="attr">activeClassName</span>=<span class="string">&quot;active&quot;</span>&gt;</span>cinema<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/center&quot;</span> <span class="attr">activeClassName</span>=<span class="string">&quot;active&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-编程式路由导航"><a href="#8-编程式路由导航" class="headerlink" title="8.编程式路由导航"></a>8.编程式路由导航</h3><p>umi中的编程式路由导航与react-router中的相同，无差异</p>
<ol>
<li>props.history.push(“/home”)</li>
<li>使用useHistory hook，history.push(“/home”)</li>
</ol>
<h4 id="编程式导航传参："><a href="#编程式导航传参：" class="headerlink" title="编程式导航传参："></a>编程式导航传参：</h4><p>目录结构如下 ：</p>
<p>pages</p>
<ul>
<li>detail<ul>
<li>[id].tsx</li>
</ul>
</li>
</ul>
<p>pages下创建detail目录，detail目录下创建<code>[id].tsx</code> 在该tsx文件下通过props或者useParams来获取参数信息</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [id].tsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useParams&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IParams</span> &#123;</span><br><span class="line">  <span class="attr">id</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params">props:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> params = useParams&lt;<span class="title class_">IParams</span>&gt;()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Detail - &#123;params.id&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h3><p>目录解构如下：</p>
<p>src</p>
<ul>
<li>wrappers<ul>
<li>auth.tsx</li>
</ul>
</li>
</ul>
<p>在项目根目录下的src目录下创建wrappers文件夹，该文件夹下创建<code>auth.tsx</code>，在需要校验的Center组件下，写下如下代码<code>Center.wrappers = [&quot;@/wrappers/Auth&quot;]</code> 对Center组件进行包装，实际上，此时的Auth组件相当于是Center组件的父组件</p>
<p>auth.tsx</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Redirect</span>&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Auth</span>(<span class="params">props:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Center.tsx</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Center</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      center</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Center</span>.<span class="property">wrappers</span> = [<span class="string">&quot;@/wrappers/Auth&quot;</span>]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Center</span></span><br></pre></td></tr></table></figure>

<h3 id="hash模式与browser模式"><a href="#hash模式与browser模式" class="headerlink" title="hash模式与browser模式"></a>hash模式与browser模式</h3><ul>
<li><p>.umirc.js下添加 history属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">history</span>:&#123;</span><br><span class="line">  <span class="attr">type</span>:<span class="string">&quot;hash&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="mock及反向代理"><a href="#mock及反向代理" class="headerlink" title="mock及反向代理"></a>mock及反向代理</h3><ul>
<li><p>在mock目录下创建api.tsx即可，里面写好对应的GET或者POST</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">&quot;GET /users&quot;</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;sola&quot;</span>,<span class="attr">age</span>:<span class="number">100</span>&#125;,</span><br><span class="line">  <span class="string">&quot;POST /users/login&quot;</span>:<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">ok</span>:<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>反向代理：umirc.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">proxy</span>:&#123;</span><br><span class="line">  <span class="string">&quot;/api&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">target</span>:<span class="string">&quot;https://i.maoyan.com&quot;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="umi集成组件库"><a href="#umi集成组件库" class="headerlink" title="umi集成组件库"></a>umi集成组件库</h3><p>当umi自带antd组件库版本过低时，需要重新安装antd最新版，但是同时要关闭umi自身携带的antd，在umirc.js下添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">antd</span>:&#123;</span><br><span class="line">  <span class="attr">mobile</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="dva集成"><a href="#dva集成" class="headerlink" title="dva集成"></a>dva集成</h3><ul>
<li>按目录约定注册 model，无需手动 app.model</li>
<li>文件名即 namespace，可以省去 model 导出的 namespace key</li>
<li>无需手写 router.js，交给 umi 处理，支持 model 和component 的按需加载</li>
<li>内置 query-string 处理，无需再手动解码和编码</li>
<li>内置 dva-loading 和 dva-immer，其中 dva-immer需通过配开启(简化 reducer 编写)</li>
</ul>
<h4 id="同步获取数据"><a href="#同步获取数据" class="headerlink" title="同步获取数据"></a>同步获取数据</h4><p>业务场景：在City组件中点击不同的城市，将城市信息（名称、ID）传递到Cinema组件</p>
<p>目录结构如下：</p>
<p>src</p>
<ul>
<li>models<ul>
<li>CityModel.ts</li>
</ul>
</li>
</ul>
<p>1.src下新建models目录，在目录下创建CityModel.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespace</span>:<span class="string">&quot;city&quot;</span>, <span class="comment">// 命名空间</span></span><br><span class="line">  state : &#123;</span><br><span class="line">    <span class="attr">cityName</span>:<span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    <span class="attr">cityId</span>:<span class="string">&quot;110100&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>:&#123;</span><br><span class="line">    <span class="title function_">changeCity</span>(<span class="params">prevState:<span class="built_in">any</span>,action:<span class="built_in">any</span></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(action);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...prevState,</span><br><span class="line">        <span class="attr">cityName</span>: action.<span class="property">payload</span>.<span class="property">cityName</span>,</span><br><span class="line">        <span class="attr">cityId</span>: action.<span class="property">payload</span>.<span class="property">cityId</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.通过connect组件将City组件封装成高阶组件，通过dispatch方法派发action</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">IndexBar</span>,<span class="title class_">List</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;antd-mobile&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useHistory,connect&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">City</span>(<span class="params">props:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> history = <span class="title function_">useHistory</span>()</span><br><span class="line">  <span class="keyword">const</span> [list,setList] = useState&lt;<span class="built_in">any</span>&gt;([])</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">filterCity</span> = (<span class="params">cities:<span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">letterArr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = []</span><br><span class="line">    <span class="keyword">const</span> newList = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">65</span>; i &lt; <span class="number">91</span>; i++) &#123;</span><br><span class="line">      letterArr.<span class="title function_">push</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> m <span class="keyword">in</span> letterArr) &#123;</span><br><span class="line">      <span class="keyword">var</span> cityItems = cities.<span class="title function_">filter</span>(<span class="function">(<span class="params">item:<span class="built_in">any</span></span>) =&gt;</span></span><br><span class="line">        item.<span class="property">pinyin</span>.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">1</span>).<span class="title function_">toUpperCase</span>() === letterArr[m]</span><br><span class="line">      )</span><br><span class="line">      cityItems.<span class="property">length</span> &amp;&amp; newList.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>:letterArr[m],</span><br><span class="line">        <span class="attr">items</span>:cityItems</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newList</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&quot;https://m.maizuo.com/gateway?k=5490218&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;X-Client-Info&quot;</span>: <span class="string">&#x27;&#123;&quot;a&quot;:&quot;3000&quot;,&quot;ch&quot;:&quot;1002&quot;,&quot;v&quot;:&quot;5.2.0&quot;,&quot;e&quot;:&quot;1651225177596601022185473&quot;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;X-Host&quot;</span>: <span class="string">&#x27;mall.film-ticket.city.list&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>  =&gt;</span> res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setList</span>(<span class="title function_">filterCity</span>(res.<span class="property">data</span>.<span class="property">cities</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeCity</span> = (<span class="params">item:<span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 修改state中的状态</span></span><br><span class="line">    props.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="string">&quot;city/changeCity&quot;</span>,</span><br><span class="line">      <span class="attr">payload</span>:&#123;</span><br><span class="line">        <span class="attr">cityName</span>:item.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">cityId</span>:item.<span class="property">cityId</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    history.<span class="title function_">push</span>(<span class="string">&quot;/cinema&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">window.innerHeight</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">IndexBar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((group:any) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          const &#123; title, items &#125; = group</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">IndexBar.Panel</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">index</span>=<span class="string">&#123;title&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">title</span>=<span class="string">&#123;title&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;title&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">List</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;items.map((item:any, index:number) =&gt; (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">List.Item</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> changeCity(item)&#125; key=&#123;index&#125;&gt;&#123;item.name&#125;<span class="tag">&lt;/<span class="name">List.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ))&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">IndexBar.Panel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          )</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">IndexBar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(<span class="function">() =&gt;</span>(&#123;&#125;))(<span class="title class_">City</span>)</span><br></pre></td></tr></table></figure>

<p>3.通过reducer来接收City组件派发过来的数据，并更新state，Cinema组件获取redux中的数据进行页面渲染</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavBar</span>,<span class="title class_">DotLoading</span>&#125; <span class="keyword">from</span> <span class="string">&quot;antd-mobile&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useHistory&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">SearchOutline</span>&#125; <span class="keyword">from</span> <span class="string">&quot;antd-mobile-icons&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cinema</span>(<span class="params">props:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> history = <span class="title function_">useHistory</span>()</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (props.<span class="property">list</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 取数据</span></span><br><span class="line">        props.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>:<span class="string">&quot;cinema/getList&quot;</span>,</span><br><span class="line">          <span class="attr">payload</span>:&#123;</span><br><span class="line">            <span class="attr">cityId</span>: props.<span class="property">cityId</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;缓存&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavBar</span> <span class="attr">onBack</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        props.dispatch(&#123;</span></span><br><span class="line"><span class="language-xml">          type:&quot;cinema/clearList&quot;</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">        history.push(&quot;/city&quot;)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125; back=&#123;props.cityName&#125; backArrow=&#123;false&#125; right=&#123;<span class="tag">&lt;<span class="name">SearchOutline</span>/&gt;</span>&#125;&gt;标题<span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;</span></span><br><span class="line"><span class="language-xml">        props.loading &amp;&amp; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:14,textAlign:</span>&quot;<span class="attr">center</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">DotLoading</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          props.list.map((item:any) =&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.cinemaId&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          )</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(<span class="function">(<span class="params">state:<span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">loading</span>:state.<span class="property">loading</span>.<span class="property">global</span>,</span><br><span class="line">    <span class="attr">cityName</span>:state.<span class="property">city</span>.<span class="property">cityName</span>,</span><br><span class="line">    <span class="attr">cityId</span>:state.<span class="property">city</span>.<span class="property">cityId</span>,</span><br><span class="line">    <span class="attr">list</span>:state.<span class="property">cinema</span>.<span class="property">list</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="title class_">Cinema</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="异步获取数据"><a href="#异步获取数据" class="headerlink" title="异步获取数据"></a>异步获取数据</h4><p>业务场景：获取各城市影院数据信息展示到Cinema组件中，第一次正常发请求进行获取，后续再次访问时，走缓存。</p>
<p>首先在src/models 下创建CinemaModel.ts,实现异步获取影院数据的方法，此时与dva 的获取方式相同，通过effects副作用函数来进行异步转同步：call方法解决异步，put方法将异步获取的数据派发到reducers，reducers中进行同步处理，更新state，进行页面渲染</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespace</span>:<span class="string">&quot;cinema&quot;</span>,</span><br><span class="line">  <span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="attr">list</span>:[]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>:&#123;</span><br><span class="line">    <span class="title function_">changeList</span>(<span class="params">prevState:<span class="built_in">any</span>,action:<span class="built_in">any</span></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...prevState,</span><br><span class="line">        <span class="attr">list</span>: action.<span class="property">payload</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">clearList</span>(<span class="params">prevState:<span class="built_in">any</span>,action:<span class="built_in">any</span></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...prevState,</span><br><span class="line">        <span class="attr">list</span>:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">effects</span>:&#123;</span><br><span class="line">    *<span class="title function_">getList</span>(<span class="attr">action</span>:<span class="built_in">any</span>,<span class="attr">obj</span>:<span class="built_in">any</span>):<span class="built_in">any</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;put,call&#125; = obj</span><br><span class="line">      <span class="keyword">var</span> res = <span class="keyword">yield</span> <span class="title function_">call</span>(getListForCinema,action.<span class="property">payload</span>.<span class="property">cityId</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;changeList&quot;</span>,</span><br><span class="line">        <span class="attr">payload</span>:res</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getListForCinema</span>(<span class="params">cityId:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(cityId);</span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://m.maizuo.com/gateway?cityId=<span class="subst">$&#123;cityId&#125;</span>&amp;ticketFlag=1&amp;k=878555`</span>,&#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;X-Client-Info&#x27;</span>: <span class="string">&#x27;&#123;&quot;a&quot;: &quot;3000&quot;, &quot;ch&quot;: &quot;1002&quot;, &quot;v&quot;: &quot;5.2.0&quot;, &quot;e&quot;: &quot;1646462402616989231939585&quot;&#125;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;X-Host&#x27;</span>: <span class="string">&#x27;mall.film-ticket.cinema.list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  <span class="keyword">return</span> res.<span class="property">data</span>.<span class="property">cinemas</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Cinema.tsx</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavBar</span>,<span class="title class_">DotLoading</span>&#125; <span class="keyword">from</span> <span class="string">&quot;antd-mobile&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useHistory&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">SearchOutline</span>&#125; <span class="keyword">from</span> <span class="string">&quot;antd-mobile-icons&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cinema</span>(<span class="params">props:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> history = <span class="title function_">useHistory</span>()</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (props.<span class="property">list</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 取数据</span></span><br><span class="line">        props.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>:<span class="string">&quot;cinema/getList&quot;</span>,</span><br><span class="line">          <span class="attr">payload</span>:&#123;</span><br><span class="line">            <span class="attr">cityId</span>: props.<span class="property">cityId</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;缓存&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavBar</span> <span class="attr">onBack</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        props.dispatch(&#123;</span></span><br><span class="line"><span class="language-xml">          type:&quot;cinema/clearList&quot;</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">        history.push(&quot;/city&quot;)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125; back=&#123;props.cityName&#125; backArrow=&#123;false&#125; right=&#123;<span class="tag">&lt;<span class="name">SearchOutline</span>/&gt;</span>&#125;&gt;标题<span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;</span></span><br><span class="line"><span class="language-xml">        props.loading &amp;&amp; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:14,textAlign:</span>&quot;<span class="attr">center</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">DotLoading</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          props.list.map((item:any) =&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.cinemaId&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          )</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(<span class="function">(<span class="params">state:<span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">loading</span>:state.<span class="property">loading</span>.<span class="property">global</span>,</span><br><span class="line">    <span class="attr">cityName</span>:state.<span class="property">city</span>.<span class="property">cityName</span>,</span><br><span class="line">    <span class="attr">cityId</span>:state.<span class="property">city</span>.<span class="property">cityId</span>,</span><br><span class="line">    <span class="attr">list</span>:state.<span class="property">cinema</span>.<span class="property">list</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="title class_">Cinema</span>)</span><br></pre></td></tr></table></figure>

<h4 id="umi中的loading"><a href="#umi中的loading" class="headerlink" title="umi中的loading"></a>umi中的loading</h4><p>umi中的loading是通过connect组件封装后的state参数中获取的，它可以判断在异步处理的时候，副作用函数effects的执行状态，在数据没有返回之前，loading 是false，数据返回后则是true，可以用过它来进行页面的优化，从而提升用户体验</p>
<p>具体代码见dva异步获取数据中的Cinema组件。</p>
]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>forwardRef</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20forwardRef/</url>
    <content><![CDATA[<h2 id="forwardRef"><a href="#forwardRef" class="headerlink" title="forwardRef"></a>forwardRef</h2><p>引用传递（<em>Ref forwading</em>）是一种通过组件向子组件自动传递 引用<em>ref</em> 的技术。对于应用者的大多数组件来说没什么作用。但是对于有些重复使用的组件，可能有用。例如某些<em>input</em>组件，需要控制其<em>focus</em>，本来是可以使用<em>ref</em>来控制，但是因为该<em>input</em>已被包裹在组件中，这时就需要使用<em>Ref forward</em>来透过组件获得该<em>input</em>的引用。可以透传多层</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>, forwardRef&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  mytext = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>  =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              this.mytext.current.focus()</span></span><br><span class="line"><span class="language-xml">              this.mytext.current.value = &#x27;&#x27;</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;获取焦点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&#123;this.mytext&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props,ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">defaultValue</span>=<span class="string">&#123;222&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>flux与redux与react-redux</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20flux%E4%B8%8Eredux%E4%B8%8Ereact-redux/</url>
    <content><![CDATA[<h2 id="Flux与Redux"><a href="#Flux与Redux" class="headerlink" title="Flux与Redux"></a>Flux与Redux</h2><p>Flux 是一种架构思想，专门解决软件的结构问题。它跟MVC架构是同一类东西，但是更加简单和清晰。Flux存在多种实现(至少15种)  <a href="https://github.com/voronianski/flflux-comparison">https://github.com/voronianski/flflux-comparison</a></p>
<p>Facebook Flux是用来构建客户端Web应用的应用架构。它利用<strong>单向数据流</strong>的方式来组合React中的视图组件。它更像一个模式而不是一个正式的框架，开发者不需要太多的新代码就可以快速的上手Flux.</p>
<p>Redux最主要是用作应用状态的管理。简言之，Redux用一个单独的常量状态树（state对象）保存这一整个应用的状态，这个对象不能直接被改变。当一些数据变化了，一个新的对象就会被创建（使用actions和reducers），这样就可以进行数据追踪，实现时光旅行。</p>
<h3 id="redux介绍以及三大原则"><a href="#redux介绍以及三大原则" class="headerlink" title="redux介绍以及三大原则"></a>redux介绍以及三大原则</h3><h4 id="学习文档"><a href="#学习文档" class="headerlink" title="学习文档"></a>学习文档</h4><ul>
<li>英文文档：<a href="https://redux.js.org/">https://redux.js.org</a></li>
<li>中文文档：<a href="http://www.redux.org.cn/">http://www.redux.org.cn</a></li>
<li>Github：<a href="https://github.com/reactjs/redux">https://github.com/reactjs/redux</a></li>
</ul>
<h4 id="redux是什么"><a href="#redux是什么" class="headerlink" title="redux是什么"></a>redux是什么</h4><ol>
<li>redux是一个专门用作状态管理的JS库（不是react插件库）</li>
<li>它可以用在react，angular，vue等项目中，但基本与react配合使用</li>
<li>作用：集中式管理react应用中多个组件共享的状态</li>
</ol>
<h4 id="什么情况下需要使用redux"><a href="#什么情况下需要使用redux" class="headerlink" title="什么情况下需要使用redux"></a>什么情况下需要使用redux</h4><ol>
<li>某个组件的状态，需要让其他组件可以随时拿（共享）</li>
<li>一个组件需要改变另一个组件的状态（通信）</li>
<li>总体原则：能不用就不用，如果不用比较吃力才考虑使用</li>
</ol>
<h4 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h4><ol>
<li>state以单一对象存储在store对象中</li>
<li>state只读（每次都返回一个新对象）</li>
<li>使用纯函数 reducer执行state更新</li>
</ol>
<h3 id="redux工作流"><a href="#redux工作流" class="headerlink" title="redux工作流"></a>redux工作流</h3><p><img src="/images/react/redux%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="redux原理图"></p>
<h3 id="redux的三个核心概念"><a href="#redux的三个核心概念" class="headerlink" title="redux的三个核心概念"></a>redux的三个核心概念</h3><h4 id="1-action"><a href="#1-action" class="headerlink" title="1.action"></a><strong>1.action</strong></h4><ol>
<li><p>动作的对象</p>
</li>
<li><p>包含2个属性</p>
</li>
</ol>
<ul>
<li><p>type：标识属性, 值为字符串, 唯一, 必要属性</p>
</li>
<li><p>data：数据属性, 值类型任意, 可选属性</p>
</li>
</ul>
<ol start="3">
<li>例子：{ type: ‘ADD_STUDENT’,data:{name: ‘tom’,age:18} }</li>
</ol>
<h4 id="2-reducer"><a href="#2-reducer" class="headerlink" title="2.reducer"></a><strong>2.reducer</strong></h4><ol>
<li><p>用于初始化状态、加工状态。</p>
</li>
<li><p>加工时，根据旧的state和action， 产生新的state的<strong>纯函数</strong>。</p>
</li>
</ol>
<h4 id="3-store"><a href="#3-store" class="headerlink" title="3. store"></a><strong>3. store</strong></h4><ol>
<li><p>将state、action、reducer联系在一起的对象</p>
</li>
<li><p>如何得到此对象?</p>
<ol>
<li>import {createStore} from ‘redux’</li>
<li>import reducer from ‘./reducers’</li>
<li>const store = createStore(reducer)</li>
</ol>
</li>
<li><p>此对象的功能?</p>
<ol>
<li>getState(): 得到state</li>
<li>dispatch(action): 分发action, 触发reducer调用, 产生新的state</li>
<li>subscribe(listener): 注册监听, 当产生了新的state时, 自动调用</li>
</ol>
</li>
</ol>
<h3 id="redux的核心API"><a href="#redux的核心API" class="headerlink" title="redux的核心API"></a>redux的核心API</h3><h4 id="1-createstore"><a href="#1-createstore" class="headerlink" title="1. createstore()"></a>1. createstore()</h4><p>作用：创建包含指定reducer的store对象</p>
<h4 id="2-store对象"><a href="#2-store对象" class="headerlink" title="2.store对象"></a>2.store对象</h4><ol>
<li><p>作用: redux库最核心的管理对象</p>
</li>
<li><p>它内部维护着:</p>
<ol>
<li>state</li>
<li>reducer</li>
</ol>
</li>
<li><p>核心方法:</p>
<ol>
<li>getState()</li>
<li>dispatch(action)</li>
<li>subscribe(listener)</li>
</ol>
</li>
<li><p>具体编码:</p>
<ol>
<li><p>store.getState()</p>
</li>
<li><p>store.dispatch({type:’INCREMENT’, number})</p>
</li>
<li><p>store.subscribe(render)</p>
</li>
</ol>
</li>
</ol>
<h4 id="3-applyMiddleware"><a href="#3-applyMiddleware" class="headerlink" title="3.applyMiddleware()"></a>3.applyMiddleware()</h4><p>作用：应用上基于redux的中间件(插件库)</p>
<h4 id="4-combineReducers"><a href="#4-combineReducers" class="headerlink" title="4.combineReducers()"></a>4.combineReducers()</h4><p>作用：合并多个reducer函数</p>
<h3 id="reducer扩展"><a href="#reducer扩展" class="headerlink" title="reducer扩展"></a>reducer扩展</h3><p>如果如果不同的action所处理的属性之间没有联系，我们可以把 Reducer 函数拆分。不同的函数负责处理不同属性，最终把它们合并成一个大的 Reducer 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>; </span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combineReducers</span>(&#123; <span class="attr">a</span>: functionA, <span class="attr">b</span>: functionB, <span class="attr">c</span>: functionC &#125;)</span><br><span class="line">访问： </span><br><span class="line">(state)=&gt;&#123; <span class="keyword">return</span> &#123; <span class="attr">kerwinstate</span>:state.<span class="property">a</span> (不同的命名空间) &#125; &#125;</span><br></pre></td></tr></table></figure>



<h3 id="redux中间件"><a href="#redux中间件" class="headerlink" title="redux中间件"></a>redux中间件</h3><p>在redux里，action仅仅是携带了数据的普通js对象。action creator返回的值是这个action类型的</p>
<p>对象。然后通过store.dispatch()进行分发。同步的情况下一切都很完美，但是reducer无法处理异</p>
<p>步的情况。</p>
<p>那么我们就需要在action和reducer中间架起一座桥梁来处理异步。这就是middleware。</p>
<h5 id="1-redux-thunk-store-dispatch参数可以是一个function"><a href="#1-redux-thunk-store-dispatch参数可以是一个function" class="headerlink" title="1.redux-thunk (store.dispatch参数可以是一个function)"></a>1.redux-thunk (store.dispatch参数可以是一个function)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>; </span><br><span class="line"><span class="keyword">import</span> &#123;applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>; </span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(fetchReducer, <span class="title function_">applyMiddleware</span>(thunk)); </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getComingSoon</span> = (<span class="params"></span>)=&gt;&#123; <span class="comment">//进行异步请求 return (dispatch,store)=&gt;&#123; &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-redux-promise-store-dispatch参数可以是一个promise对象"><a href="#2-redux-promise-store-dispatch参数可以是一个promise对象" class="headerlink" title="2.redux-promise (store.dispatch参数可以是一个promise对象)"></a>2.redux-promise (store.dispatch参数可以是一个promise对象)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> promiseMiddleware <span class="keyword">from</span> <span class="string">&#x27;redux-promise&#x27;</span>; </span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(fetchReducer, <span class="title function_">applyMiddleware</span>(thunk,promiseMiddleware)); </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getComingSoon</span> = (<span class="params"></span>)=&gt;&#123; <span class="comment">//进行异步请求 </span></span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">`****`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123; <span class="keyword">return</span> &#123; <span class="attr">type</span>:<span class="string">&quot;cominglist&quot;</span>, <span class="attr">info</span>:res.<span class="property">data</span>.<span class="property">data</span> &#125;&#125;) &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Redux-DevTools-Extension"><a href="#Redux-DevTools-Extension" class="headerlink" title="Redux DevTools Extension"></a>Redux DevTools Extension</h3><p><a href="https://github.com/zalmoxisus/redux-devtools-extension">https://github.com/zalmoxisus/redux-devtools-extension</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, compose&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span> </span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span> || compose; <span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer, <span class="comment">/* preloadedState, */</span> <span class="title function_">composeEnhancers</span>()) <span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>



<h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><p><img src="/images/react/react-redux%E6%A8%A1%E5%9E%8B%E5%9B%BE.png" alt="react-redux模型图"></p>
<h4 id="1-容器组件与UI组件"><a href="#1-容器组件与UI组件" class="headerlink" title="1.容器组件与UI组件"></a>1.容器组件与UI组件</h4><p>UI组件</p>
<ul>
<li>只负责 UI 的呈现，不带有任何业务逻辑</li>
<li>没有状态（即不使用this.state这个变量）</li>
<li>所有数据都由参数（this.props）提供</li>
<li>不使用任何 Redux 的 API</li>
</ul>
<p>容器组件</p>
<ul>
<li>负责管理数据和业务逻辑，不负责 UI 的呈现</li>
<li>带有内部状态</li>
<li>使用 Redux 的 API</li>
</ul>
<h4 id="2-Provider与connect"><a href="#2-Provider与connect" class="headerlink" title="2.Provider与connect"></a>2.Provider与connect</h4><p>React-Redux 提供Provider组件，可以让容器组件拿到state。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span> </span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>) </span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span> <span class="tag">&lt;<span class="name">App</span> /&gt;</span> <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>, rootElement )</span><br></pre></td></tr></table></figure>

<p>React-Redux 提供connect方法，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> &#123; increment, decrement, reset &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionCreators&#x27;</span> </span><br><span class="line"><span class="comment">// const Counter = ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state <span class="comment">/*, ownProps*/</span></span>) =&gt; &#123; <span class="keyword">return</span> &#123; <span class="attr">counter</span>:state.<span class="property">counter</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123; increment, decrement, reset &#125; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>( mapStateToProps, mapDispatchToProps )(<span class="title class_">Counter</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3-HOC与context通信在react-redux底层中的应用"><a href="#3-HOC与context通信在react-redux底层中的应用" class="headerlink" title="3.HOC与context通信在react-redux底层中的应用"></a>3.HOC与context通信在react-redux底层中的应用</h4><p>1.connect是HOC，高阶组件</p>
<p>2.Provider组件，可以让容器组件拿到state ，使用了context</p>
<h4 id="4-高阶组件构建与应用"><a href="#4-高阶组件构建与应用" class="headerlink" title="4.高阶组件构建与应用"></a>4.高阶组件构建与应用</h4><p>HOC不仅仅是一个方法，确切说应该是一个组件工厂，获取低阶组件，生成高阶组件。</p>
<ol>
<li>代码复用，代码模块化</li>
<li>增删改props</li>
<li>渲染劫持</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Child.js //高阶函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Control</span>(<span class="params">wrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">MyControl</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">wrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyControlComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Control</span>(<span class="title class_">MyComponent</span>); <span class="comment">//高阶组件 </span></span><br><span class="line"><span class="comment">// Parent.js </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyControlComponent</span> <span class="keyword">from</span> <span class="string">&quot;./Child&quot;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">MyControlComponent</span> data = &#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">value</span>&#125;/&gt; </span><br><span class="line"><span class="comment">//在父级传入data是null的时候，这一块儿就只会显示loading..., </span></span><br><span class="line"><span class="comment">//不会显示组件的具体内容，如果data不为null, 就显示真实组件信息。</span></span><br></pre></td></tr></table></figure>

<h4 id="5-redux持久化"><a href="#5-redux持久化" class="headerlink" title="5.redux持久化"></a>5.redux持久化</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;persistStore, persistReducer&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-persist&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">&#x27;redux-persist/lib/storage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> autoMergeLevel2 <span class="keyword">from</span> <span class="string">&#x27;redux-persist/lib/stateReconciler/autoMergeLevel2&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> persistConfig = &#123; <span class="attr">key</span>: <span class="string">&#x27;kerwin&#x27;</span>,</span><br><span class="line">                       <span class="attr">storage</span>: storage,</span><br><span class="line">                       <span class="comment">//localStorage: import storage from &#x27;redux-persist/lib/storage&#x27;</span></span><br><span class="line">                       <span class="comment">//sessionStorage: import storageSession from &#x27;redux-persist/lib/storage/session&#x27;</span></span><br><span class="line">                       <span class="attr">stateReconciler</span>: autoMergeLevel2 <span class="comment">//控制在本地存储中，新老状态怎么合并，覆盖？或者合并？ </span></span><br><span class="line">                      &#125;;</span><br><span class="line"><span class="comment">//改造reducer </span></span><br><span class="line"><span class="keyword">const</span> myPersistReducer = <span class="title function_">persistReducer</span>(persistConfig, reducer) </span><br><span class="line"><span class="comment">//改造store </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> persistor = <span class="title function_">persistStore</span>(store) </span><br><span class="line"></span><br><span class="line"><span class="comment">//改造根组件 </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDom</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./08-antd-mobile/App&quot;</span>;</span><br><span class="line"><span class="comment">// import &#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Provider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;store,persistor&#125; <span class="keyword">from</span> <span class="string">&quot;./08-antd-mobile/redux/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">PersistGate</span>&#125; <span class="keyword">from</span> <span class="string">&quot;redux-persist/integration/react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PersistGate</span> <span class="attr">persistor</span>=<span class="string">&#123;persistor&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">PersistGate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    ,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>lazy和suspense</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20lazy%E5%92%8Csuspense/</url>
    <content><![CDATA[<h2 id="lazy和suspense"><a href="#lazy和suspense" class="headerlink" title="lazy和suspense"></a>lazy和suspense</h2><h3 id="React-lazy定义"><a href="#React-lazy定义" class="headerlink" title="React.lazy定义"></a>React.lazy定义</h3><ul>
<li>React.lazy 函数能让你像渲染常规组件一样处理动态引入（的组件）。本质就是懒加载</li>
</ul>
<h3 id="为什么要进行代码分割？"><a href="#为什么要进行代码分割？" class="headerlink" title="为什么要进行代码分割？"></a>为什么要进行代码分割？</h3><ul>
<li>当你的程序越来越大，代码量越来越多。一个页面上堆积了很多功能，也许有些功能很可能都用不到，但是一样下载加载到页面上，所以这里面肯定有优化空间。就如图片懒加载的理论。</li>
</ul>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul>
<li>当 Webpack 解析到该语法时，它会自动地开始进行代码分割(Code Splitting)，分割成一个文件，当使用到这个文件的时候会这段代码才会被异步加载。</li>
</ul>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在 React.lazy 和常用的三方包 react-loadable ，都是使用了这个原理，然后配合webpack进行代码打包拆分达到异步加载，这样首屏渲染的速度将大大的提高。</p>
<p>由于 React.lazy 不支持服务端渲染，所以这时候 react-loadable 就是不错的选择。</p>
<p>如果在 App 渲染完成后，包含 OtherComponent 的模块还没有被加载完成，我们可以使用加载指示器为此组件做优雅降级。这里我们使用 Suspense 组件来解决。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>,<span class="title class_">Suspense</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// import NowPlaying from &quot;./components/NowPlaying&quot;;</span></span><br><span class="line"><span class="comment">// import CommmingSoon from &quot;./components/CommmingSoon&quot;;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NowPlaying</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/NowPlaying&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CommmingSoon</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/CommmingSoon&#x27;</span>))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state =&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span>  <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">              type:1</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;正在热映<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>  =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.setState(&#123;</span></span><br><span class="line"><span class="language-xml">              type:2</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;即将上映<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>正在加载。。<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              this.state.type === 1 ? <span class="tag">&lt;<span class="name">NowPlaying</span>&gt;</span><span class="tag">&lt;/<span class="name">NowPlaying</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  :<span class="tag">&lt;<span class="name">CommmingSoon</span>&gt;</span><span class="tag">&lt;/<span class="name">CommmingSoon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>redux-saga</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20redux-saga/</url>
    <content><![CDATA[<h2 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h2><p>在<em>saga</em>中，全局监听器和接收器使用<em>Generator</em>函数和<em>saga</em>自身的一些辅助函数实现对整个流程的管控</p>
<p>npm i redux-saga</p>
<h3 id="1-ES6-生成器函数"><a href="#1-ES6-生成器函数" class="headerlink" title="1.ES6 生成器函数"></a>1.ES6 生成器函数</h3><p>基本使用：</p>
<ul>
<li>生成器函数正常执行，函数体内容不会被正常执行，需要通过next方法进行推进，每次执行一个next()方法，代码执行到一个yield，以此类推</li>
<li>yield 后面的值，可以被next的返回值进行接收</li>
<li>同样 next传递过去的参数，同样可以被yield的返回值进行接收</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1111</span>);</span><br><span class="line">  <span class="keyword">var</span> input1 = <span class="keyword">yield</span> <span class="string">&quot;111-输出&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2222</span>,input1);</span><br><span class="line">  <span class="keyword">var</span> input2 = <span class="keyword">yield</span> <span class="string">&quot;222-输出&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3333</span>,input2);</span><br><span class="line">  <span class="keyword">var</span> input3 = <span class="keyword">yield</span> <span class="string">&quot;333-输出&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(input3)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>  a = <span class="title function_">test</span>()</span><br><span class="line"><span class="keyword">var</span> res1 = a.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line"><span class="keyword">var</span> res2 = a.<span class="title function_">next</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line"><span class="keyword">var</span> res3 = a.<span class="title function_">next</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line"><span class="keyword">var</span> res4 = a.<span class="title function_">next</span>(<span class="string">&#x27;ddd&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res4);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果为：</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line">&#123; <span class="attr">value</span>: <span class="string">&#x27;111-输出&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line"><span class="number">2222</span> bbb</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="string">&#x27;222-输出&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line"><span class="number">3333</span> ccc</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="string">&#x27;333-输出&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">ddd</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure>

<p>可执行生成器：</p>
<p>需求：需要链式执行，方法一执行完成后，将返回值传递给方法二，方法二根据方法一的返回值再次执行成功后，将返回值传递给方法三，以此类推。（认证、登录等）</p>
<p>案例解析：</p>
<ul>
<li>三个getDate方法均为异步方法，通过*gen生成器函数进行渲染，但是并未执行，在run方法中，将生成器函数作为参数传递进去，首先进行第一次的调用，并未执行next方法。</li>
<li>通过递归的思想，以及 yield返回值中的done 布尔值，来进行判断，当前生成器函数是否执行完毕，一旦执行完毕，将最终结果进行返回，否则，始终进行next方法，直到done值为true（此案例中的result.value是一个Promise对象，需要通过.then方法，确保fullfilled，进行再次next）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDate1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;data1&quot;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDate2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;data2&quot;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDate3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;data3&quot;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> f1 = <span class="keyword">yield</span> <span class="title function_">getDate1</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1)</span><br><span class="line">  <span class="keyword">var</span> f2 = <span class="keyword">yield</span> <span class="title function_">getDate2</span>(f1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2)</span><br><span class="line">  <span class="keyword">var</span> f3 = <span class="keyword">yield</span> <span class="title function_">getDate3</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = g.<span class="title function_">next</span>(data)</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">done</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> result.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">    result.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">run</span>(gen)</span><br></pre></td></tr></table></figure>

<h3 id="2-redux-saga使用流程"><a href="#2-redux-saga使用流程" class="headerlink" title="2.redux-saga使用流程"></a>2.redux-saga使用流程</h3><p>1.创建store.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore, combineReducers, applyMiddleware,compose&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CityReducer</span> <span class="keyword">from</span> <span class="string">&quot;./reducers/CityReducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TabbarReducer</span> <span class="keyword">from</span> <span class="string">&quot;./reducers/TabbarReducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CinemaListReducer</span> <span class="keyword">from</span> <span class="string">&quot;./reducers/CinemaListReducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> reduxThunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="keyword">import</span> reduxPromise <span class="keyword">from</span> <span class="string">&#x27;redux-promise&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createSagaMiddleWare <span class="keyword">from</span> <span class="string">&quot;redux-saga&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> watchSage <span class="keyword">from</span> <span class="string">&quot;./saga&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">  <span class="title class_">CityReducer</span>,</span><br><span class="line">  <span class="title class_">TabbarReducer</span>,</span><br><span class="line">  <span class="title class_">CinemaListReducer</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span> || compose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sagaMiddleWare = <span class="title function_">createSagaMiddleWare</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer, <span class="comment">/* preloadedState, */</span> <span class="title function_">composeEnhancers</span>(<span class="title function_">applyMiddleware</span>(reduxThunk,reduxPromise,sagaMiddleWare)))</span><br><span class="line"><span class="comment">// const store = createStore(reducer,applyMiddleware(reduxThunk,reduxPromise));</span></span><br><span class="line"></span><br><span class="line">sagaMiddleWare.<span class="title function_">run</span>(watchSage)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>2.saga.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;call, put, takeEvery&#125; <span class="keyword">from</span> <span class="string">&quot;redux-saga/effects&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">watchSage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeEvery</span>(<span class="string">&quot;get-cinemalist&quot;</span>,getCinemaList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">getCinemaList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 异步处理</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// call 函数发送异步请求</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">yield</span> <span class="title function_">call</span>(getListAction) <span class="comment">// 阻塞的调用fn</span></span><br><span class="line">  <span class="comment">// put函数发出新的action 非阻塞的执行</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;change-cinemalist&quot;</span>,</span><br><span class="line">    <span class="attr">payload</span>:res</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getListAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://m.maizuo.com/gateway?cityId=110100&amp;ticketFlag=1&amp;k=878555&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;X-Client-Info&#x27;</span>: <span class="string">&#x27;&#123;&quot;a&quot;: &quot;3000&quot;, &quot;ch&quot;: &quot;1002&quot;, &quot;v&quot;: &quot;5.2.0&quot;, &quot;e&quot;: &quot;1646462402616989231939585&quot;&#125;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;X-Host&#x27;</span>: <span class="string">&#x27;mall.film-ticket.cinema.list&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">cinemas</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> watchSage</span><br></pre></td></tr></table></figure>

<p>3.reducer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CinemaListReducer</span> = (<span class="params">prevState=&#123;</span></span><br><span class="line"><span class="params">  list:[]</span></span><br><span class="line"><span class="params">&#125;,action </span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> newState = &#123;...prevState&#125;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;change-list&quot;</span>:</span><br><span class="line">      newState.<span class="property">list</span> = action.<span class="property">payload</span></span><br><span class="line">      <span class="keyword">return</span> newState</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;change-cinemalist&quot;</span>:</span><br><span class="line">      newState.<span class="property">list</span> = action.<span class="property">payload</span></span><br><span class="line">      <span class="keyword">return</span> newState</span><br><span class="line">    <span class="attr">default</span>:<span class="keyword">return</span> prevState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CinemaListReducer</span></span><br></pre></td></tr></table></figure>

<p>4.派发action Cinema.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../redux/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> getCinemaListAction <span class="keyword">from</span> <span class="string">&quot;../redux/actionCreator/getCinemaListAction&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Cinemas</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [cityName,setcityName] = <span class="title function_">useState</span>(store.<span class="title function_">getState</span>().<span class="property">CityReducer</span>.<span class="property">cityName</span>)</span><br><span class="line">  <span class="keyword">const</span> [cinemaList,setCinemaList] = <span class="title function_">useState</span>(store.<span class="title function_">getState</span>().<span class="property">CinemaListReducer</span>.<span class="property">list</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (store.<span class="title function_">getState</span>().<span class="property">CinemaListReducer</span>.<span class="property">list</span>.<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">// 去后台取数据</span></span><br><span class="line">      store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;get-cinemalist&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;store 缓存&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 订阅</span></span><br><span class="line">    <span class="keyword">var</span> unsubscribe = store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCinemaList</span>(store.<span class="title function_">getState</span>().<span class="property">CinemaListReducer</span>.<span class="property">list</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 取消订阅</span></span><br><span class="line">      <span class="title function_">unsubscribe</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;overflow:</span>&quot;<span class="attr">hidden</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;float:</span>&#x27;<span class="attr">left</span>&#x27;&#125;&#125; <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            props.history.push(&#x27;/city&#x27;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;&#123;cityName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            props.history.push(&#x27;/cinemas/search&#x27;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125; style=&#123;&#123;float:&#x27;right&#x27;&#125;&#125;&gt;搜索<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            cinemaList.map(item =&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">dl</span> <span class="attr">key</span>=<span class="string">&#123;item.cinemaId&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;padding:</span>&quot;<span class="attr">10px</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">dd</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:</span>&quot;<span class="attr">12px</span>&quot;,<span class="attr">color:</span>&quot;<span class="attr">gray</span>&quot;&#125;&#125;&gt;</span>&#123;item.address&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——收集表单数据与高阶函数（柯里化）</title>
    <url>/2021/06/06/react/react%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E4%B8%8E%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><h3 id="1-受控组件（推荐）"><a href="#1-受控组件（推荐）" class="headerlink" title="1.受控组件（推荐）"></a>1.受控组件（推荐）</h3><p>由于在表单上设置了value属性，因此显示的值始终是this.state.value,这使得React的state成为唯一的数据源。</p>
<p>对于受控组件来说，输入的值始终由 React 的 state 驱动。你也可以将 value 传递给其他 UI 元素，或者通过其他事件处理函数重置，但这意味着你需要编写更多的代码。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 阻止表单提交</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`username:<span class="subst">$&#123;username&#125;</span>,passwod:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  saveUsername = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">username</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  savePassword =<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">password</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">          密码：<span class="tag">&lt;<span class="name">input</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-非受控组件（现用现取）"><a href="#2-非受控组件（现用现取）" class="headerlink" title="2.非受控组件（现用现取）"></a>2.非受控组件（现用现取）</h3><p>因为非受控组件将真实数据储存在 DOM 节点中，所以在使用非受控组件时，有时候反而更容易同时集成 React 和非React 代码。如果你不介意代码美观性，并且希望快速编写代码，使用非受控组件往往可以减少你的代码量。否则，你应该使用受控组件。</p>
<p>在 React 渲染生命周期时，表单元素上的value将会覆盖 DOM 节点中的值，在非受控组件中，你经常希望React能赋予组件一个初始值，但不控制后续的更新。在这种情况下，可以使用defaultValue属性，而不是value</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 阻止表单提交</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`用户名是<span class="subst">$&#123;username.value&#125;</span>,密码是<span class="subst">$&#123;password.value&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.username = c&#125;  name=&quot;username&quot; type=&quot;text&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">          密码：<span class="tag">&lt;<span class="name">input</span>  <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.password = c&#125; name=&quot;password&quot; type=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>注意: 另一种说法（广义范围的说法），React组件的数据渲染是否被调用者传递的props完全控制，控制则为受控组件，否则非受控组件。</p>
<p>总结：所谓受控组件就是将自己的状态与React的state进行相互绑定，由React来控制。而非受控组件则是通过ref等相关方法依旧将数据存储在DOM中，自己进行控制。</p>
<h2 id="高阶函数和函数的柯里化"><a href="#高阶函数和函数的柯里化" class="headerlink" title="高阶函数和函数的柯里化"></a>高阶函数和函数的柯里化</h2><p>如果一个函数符合下面两个规范中的以一个，那么这个函数就是高阶函数</p>
<ol>
<li>若A函数，接受的参数是一个函数，那么A就可以称之为高阶函数</li>
<li>若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数</li>
</ol>
<p>常见的高阶函数：</p>
<ul>
<li>Promise</li>
<li>setTimeout</li>
<li>arr.map</li>
</ul>
<p>函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</p>
<ul>
<li><p>使用柯里化的代码</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 阻止表单提交</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="keyword">const</span> &#123;username, password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`username:<span class="subst">$&#123;username&#125;</span>,passwod:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      [dataType]:event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">          密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>不试用柯里化的代码</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 阻止表单提交</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="keyword">const</span> &#123;username, password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`username:<span class="subst">$&#123;username&#125;</span>,passwod:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  saveFormData = <span class="function">(<span class="params">dataType, event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      [dataType]: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;,event)&#125; name=&quot;username&quot; type=&quot;text&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">          密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;,event)&#125; name=&quot;password&quot; type=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>styled-components</title>
    <url>/2022/06/28/react/react%E6%89%A9%E5%B1%95%20styled-components/</url>
    <content><![CDATA[<h2 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h2><p>它是通过<em>JavaScript</em>改变<em>CSS</em>编写方式的解决方案之一，从根本上解决常规<em>CSS</em>编写的一些弊端。</p>
<p>通过<em>JavaScript</em>来为<em>CSS</em>赋能，我们能达到常规<em>CSS</em>所不好处理的逻辑复杂、函数方法、复用、避免干扰。样式书写 将直接依附在<em>JSX</em>上面，<em>HTML</em>、<em>CSS</em>、<em>JS</em>三者再次内聚。<em><strong>all in js</strong></em>的思想</p>
<p>npm i styled-components -S</p>
<h3 id="1-透传props"><a href="#1-透传props" class="headerlink" title="1.透传props"></a>1.透传props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>  <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Styledinput</span> = styled.<span class="property">input</span><span class="string">`</span></span><br><span class="line"><span class="string">    outline: none;</span></span><br><span class="line"><span class="string">      border-radius: 10px;</span></span><br><span class="line"><span class="string">      border-bottom: 1px solid blue;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledDiv</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">      background: <span class="subst">$&#123;props=&gt;props.bg || <span class="string">&#x27;yellow&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">      width: 100px;</span></span><br><span class="line"><span class="string">      height: 100px;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Styledinput</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">StyledDiv</span> <span class="attr">bg</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">StyledDiv</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-样式化组件（一定要写className）"><a href="#2-样式化组件（一定要写className）" class="headerlink" title="2.样式化组件（一定要写className）"></a>2.样式化组件（一定要写className）</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledChild</span> = <span class="title function_">styled</span>(<span class="title class_">Child</span>)<span class="string">`</span></span><br><span class="line"><span class="string">      background: yellow;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">StyledChild</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;props.className&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    child</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-样式扩展"><a href="#3-样式扩展" class="headerlink" title="3.样式扩展"></a>3.样式扩展</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">      width: 100px;</span></span><br><span class="line"><span class="string">      height: 100px;</span></span><br><span class="line"><span class="string">      background: yellow;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledButton2</span> = <span class="title function_">styled</span>(<span class="title class_">StyledButton</span>)<span class="string">`</span></span><br><span class="line"><span class="string">      background: red;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">StyledButton</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">StyledButton2</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-动画"><a href="#4-动画" class="headerlink" title="4.动画"></a>4.动画</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled,&#123;keyframes&#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> myanimation = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">    from&#123;</span></span><br><span class="line"><span class="string">      transform: rotate(0deg);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    to &#123;</span></span><br><span class="line"><span class="string">      transform: rotate(360deg);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledDiv</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">      width: 100px;</span></span><br><span class="line"><span class="string">      height: 100px;</span></span><br><span class="line"><span class="string">      background: yellow;</span></span><br><span class="line"><span class="string">      animation: <span class="subst">$&#123;myanimation&#125;</span> 1s infinite;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">StyledDiv</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react扩展</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——组件</title>
    <url>/2020/04/07/react/react%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="组件三大核心属性："><a href="#组件三大核心属性：" class="headerlink" title="组件三大核心属性："></a>组件三大核心属性：</h2><h4 id="1-state"><a href="#1-state" class="headerlink" title="1.state"></a>1.state</h4><p>state的主要作用是用于组件保存 、控制、修改自己的状态。在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改。这里你可以认为state是一个局部的、只能被自身控制的数据源。state中状态可以通过this.setState方法进行更新，这会导致组件的重新渲染。</p>
<p>没有state的组件叫无状态组件，设置了state的叫有状态组件，因为状态会带来管理的复杂性，我们应该尽可能的多写无状态的组件，降低代码的维护程度，也会在一定程度上增强组件的复用性。</p>
<ul>
<li>组件中 render方法中的this为组件实例对象</li>
<li>组件自定义方法中this为undefined，如何解决？<ol>
<li>强制绑定 this；通过函数对象的 bind()</li>
<li>箭头函数</li>
</ol>
</li>
<li>状态数据，不能直接修改更新</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    state = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">wind</span>:<span class="string">&#x27;大风&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 自定义方法 ————要用赋值语句的方法 + 箭头函数</span></span></span><br><span class="line"><span class="language-javascript">    changeWeather = <span class="function">() =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123;isHot,wind&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-props"><a href="#2-props" class="headerlink" title="2.props"></a>2.props</h4><p>props的主要作用是让使用该组件的父组件可以传入参数来配置该组件，它是外部传进来的配置参数，组件内部无法控制也无法修改，除非 外部组件主动传入新的props，否则组件的props永远保持不变</p>
<p>补充扩展：展开运算符 <code>...</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line"><span class="comment">// 展开一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr1);</span><br><span class="line"><span class="comment">// 将多个数组进行连接</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数中使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">preNum,currentNum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> preNum + currentNum</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造字面量对象时使用展开语法</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;...person&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...person);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制对象得同时，改变对象得属性</span></span><br><span class="line"><span class="keyword">let</span> person3 = &#123;...person,<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">address</span>:<span class="string">&#x27;地球&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>props批量传递以及对props进行类型限制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">          <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,  <span class="comment">// 限制name必传，且为字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">// 限制sex为字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>, <span class="comment">// 限制age为字数字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">speak</span>:<span class="title class_">PropTypes</span>.<span class="property">func</span> <span class="comment">// 限制speak为函数</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 指定默认标签属性、</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">defaultPrps</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>:<span class="string">&#x27;middle&#x27;</span>, <span class="comment">//sex默认值为middle</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>:<span class="number">19</span> <span class="comment">// age默认值为19</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span>  <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span>  <span class="attr">speak</span>=<span class="string">&#123;speak&#125;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 批量传递props</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;sun&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;female&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i am groot&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>props的简写方式</p>
<ul>
<li>props中的属性是只读的，不可以修改</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 对标签属性进行类型、必要性的限制</span></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,  <span class="comment">// 限制name必传，且为字符串</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">// 限制sex为字符串</span></span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>, <span class="comment">// 限制age为字数字</span></span><br><span class="line">    <span class="attr">speak</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span> <span class="comment">// 限制speak为函数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 指定默认标签属性、</span></span><br><span class="line">  <span class="keyword">static</span>  defaultProps = &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;middle&#x27;</span>, <span class="comment">//sex默认值为middle</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span> <span class="comment">// age默认值为19</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123;name, age, sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数式组件中使用props</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;test1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;test2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/prop-types.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">  // 函数式组件</span><br><span class="line">  function Animal(props) &#123;</span><br><span class="line">    const &#123;name, age, sex&#125; = props</span><br><span class="line">    return (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;年龄：&#123;age&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 对标签属性进行类型、必要性的限制</span><br><span class="line">  Animal.propTypes = &#123;</span><br><span class="line">    name: PropTypes.string.isRequired,  // 限制name必传，且为字符串</span><br><span class="line">    sex: PropTypes.string, // 限制sex为字符串</span><br><span class="line">    age: PropTypes.number, // 限制age为字数字</span><br><span class="line">    speak: PropTypes.func // 限制speak为函数</span><br><span class="line">  &#125;</span><br><span class="line">  // 指定默认标签属性、</span><br><span class="line">  Animal.defaultProps = &#123;</span><br><span class="line">    sex: &#x27;middle&#x27;, //sex默认值为middle</span><br><span class="line">    age: 19 // age默认值为19</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 渲染组件到页面</span><br><span class="line">  ReactDOM.render(&lt;Animal name=&quot;tommy&quot;/&gt;, document.getElementById(&#x27;test1&#x27;))</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-refs"><a href="#3-refs" class="headerlink" title="3.refs"></a>3.refs</h4><p>字符串形式的ref</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dem0</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 展示左侧输入框框的数据</span></span><br><span class="line">  showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span><br><span class="line">    <span class="title function_">alert</span>(input1.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  showData2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123;input2&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input2.<span class="property">value</span>)</span><br><span class="line">    <span class="title function_">alert</span>(input2.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点击提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回调形式的ref</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 展示左侧输入框框的数据</span></span><br><span class="line">  showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span></span><br><span class="line">    <span class="title function_">alert</span>(input1.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  showData2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123;input2&#125; = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">alert</span>(input2.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input1 = c&#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点击提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input2 = c&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回调形式ref调用次数的问题</p>
<ul>
<li>在使用函数式回调ref时，当组件state更新时，回调中会调用两次，第一次值为null ，第二次为该元素</li>
<li>类的绑定形式的ref：将回调中的方法挂载到当前class上，则会避免这个问题</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">  showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span></span><br><span class="line">    <span class="title function_">alert</span>(input1.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  changeWeather = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取原来的状态</span></span><br><span class="line">    <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  saveInput = <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">input1</span> = c</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>,c)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/*<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(currentNode)</span> =&gt;</span> &#123;this.input1 = currentNode;console.log(&#x27;@&#x27;,currentNode)&#125;&#125; type=&quot;text&quot;/&gt;*/&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span> &gt;</span>点我提示输入的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>createRef</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// React.createRef 调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是专人专用的</span></span><br><span class="line">  myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line"></span><br><span class="line">  showData2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123;current&#125; = <span class="variable language_">this</span>.<span class="property">myRef</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">alert</span>(current.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-属性VS状态"><a href="#4-属性VS状态" class="headerlink" title="4.属性VS状态"></a>4.属性VS状态</h4><p>相似点：都是纯js对象，都会触发render更新，都具有确定性（状态/属性相同，结果相同）</p>
<p>不同点：</p>
<ol>
<li><p>属性能从父组件获取，状态不能</p>
</li>
<li><p>属性可以由父组件修改，状态不能</p>
</li>
<li><p>属性能在内部设置默认值，状态也可以，设置方式不一样</p>
</li>
<li><p>属性不在组件内部修改，状态要在组件内部修改</p>
</li>
<li><p>属性能设置子组件初始值，状态不可以</p>
</li>
<li><p>属性可以修改子组件的值，状态不可以</p>
</li>
</ol>
<h3 id="4-数据渲染"><a href="#4-数据渲染" class="headerlink" title="4.数据渲染"></a>4.数据渲染</h3><h4 id="1-条件渲染"><a href="#1-条件渲染" class="headerlink" title="1.条件渲染"></a>1.条件渲染</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    condition?<span class="string">&#x27;渲染列表的代码&#x27;</span>:<span class="string">&#x27;空空如也&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-列表渲染"><a href="#2-列表渲染" class="headerlink" title="2.列表渲染"></a>2.列表渲染</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span></span><br><span class="line">             <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>React的高效依赖于所谓的 Virtual-DOM，尽量不碰 DOM。对于列表元素来说会有一个问题：元素可能会在一个列表中改变位置。要实现这个操作，只需要交换一下 DOM 位置就行了，但是React并不知道其实我们只是改变了元素的位置，所以它会重新渲染后面两个元素（再执行 Virtual-DOM ），这样会大大增加 DOM 操作。但如果给每个元素加上唯一的标识，React 就可以知道这两个元素只是交换了位置，这个标识就是key，是每个元素的唯一标识。</p>
<h4 id="3-dangerouslySetInnerHTML"><a href="#3-dangerouslySetInnerHTML" class="headerlink" title="3.dangerouslySetInnerHTML"></a>3.dangerouslySetInnerHTML</h4><p>处于安全的原因，React当中所有表达式的内容会被转义，如果直接输入，标签会被当成文本。这时候就需要使用dangerouslySetHTML属性，它允许我们动态设置innerHTML</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Dangerous</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span>  [data,setData] = <span class="title function_">useState</span>(<span class="string">&quot;&lt;h2&gt;i am superman~&lt;/h2&gt;&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;__html:data&#125;&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——生命周期</title>
    <url>/2021/06/10/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>从出生到成长，最后到死亡，这个过程的时间可以理解为生命周期。React的生命周期同理也是这么一个过程。<br>React的生命周期分为三个阶段：挂载期（也叫实例化期）、更新期（也叫存在期）、卸载期（也叫销毁期）。在每个周期中React都提供了一些钩子函数。<br>生命周期的描述如下：<br>挂载期：一个组件实例初次北创建的过程。<br>更新期：组件在创建后再次渲染的过程。<br>卸载期：组件在使用完后被销毁的过程。</p>
<h3 id="旧版本生命周期-16-8-4"><a href="#旧版本生命周期-16-8-4" class="headerlink" title="旧版本生命周期 16.8.4"></a>旧版本生命周期 16.8.4</h3><p>1.初始化阶段：由ReactDOM.render()触发</p>
<ol>
<li>constructor()</li>
<li>componentWillMount()</li>
<li>render()</li>
<li>componentDidMount()<ul>
<li>一般做一些初始化 的事情，开启定时器、发送网络请求、订阅消息</li>
</ul>
</li>
</ol>
<p>2.更新阶段：由组件内部this.setState()或父组件render触发</p>
<ol>
<li>shouldComponentUpdate()</li>
<li>componentWillUpdate()</li>
<li><strong>render()</strong></li>
<li>componentDidUpdate()</li>
</ol>
<p>3.卸载组件：由ReactDOM.unmountComponentAtNode()触发</p>
<ol>
<li><strong>componentWillUnmount()</strong><ul>
<li>关闭定时器、取消订阅消息</li>
</ul>
</li>
</ol>
<p><img src="/images/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%97%A7).png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>(props);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件将要挂载的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentWillMount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentWillMount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件挂载完毕的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentDidMount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件将要卸载的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentWillUnmount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 控制组件更新的阀门 ，返回布尔值，true 继续更新 false 不可更新</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;shouldComponentUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件将要更新的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentWillUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentWillUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件更新完毕的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentDidUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    add = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: count + <span class="number">1</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 卸载组件按钮</span></span></span><br><span class="line"><span class="language-javascript">    death = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    force = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>卸载组件+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>强制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    state = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">carName</span>:<span class="string">&#x27;奔驰&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    changeCar = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">carName</span>:<span class="string">&#x27;奥托&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>i am A component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>换车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;this.state.carName&#125;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件将要接收新的props的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentWillReceiveProps</span>(<span class="params">props</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B----componentWillReceiveProps&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B-------shouldComponentUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件将要更新的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentWillUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B-------componentWillUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件更新完毕的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B-------componentDidUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>i am b component,接收到的车是：&#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 渲染组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">A</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="新版本生命周期-17-0-1"><a href="#新版本生命周期-17-0-1" class="headerlink" title="新版本生命周期 17.0.1"></a>新版本生命周期 17.0.1</h3><p>1.初始化阶段：由ReactDOM.render()触发</p>
<ol>
<li>constructor()</li>
<li>getDerivedStateFromProps()</li>
<li>render()</li>
<li>componentDidMount()<ul>
<li>一般做一些初始化 的事情，开启定时器、发送网络请求、订阅消息</li>
</ul>
</li>
</ol>
<p>2.更新阶段：由组件内部this.setState()或父组件render触发</p>
<ol>
<li>getDerivedStateFromProps()</li>
<li>shouldComponentUpdate()</li>
<li>render()</li>
<li>getSnapshotBeforeUpdate()</li>
<li>componentDidUpdate()</li>
</ol>
<p>3.卸载组件：由ReactDOM.unmountComponentAtNode()触发</p>
<ol>
<li>componentWillUnmount()<ul>
<li>关闭定时器、取消订阅消息</li>
</ul>
</li>
</ol>
<p><img src="/images/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%96%B0).png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>(props);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 从props中得到一个派生的状态，若state的值在任何时候都取决于props，那么就可以使用getDerivedStateFromProps</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props,state</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getDerivedStateFromProps&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(props);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(state);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getSnapshotBeforeUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件挂载完毕的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentDidMount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件将要卸载的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentWillUnmount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 控制组件更新的阀门 ，返回布尔值，true 继续更新 false 不可更新</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;shouldComponentUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件更新完毕的钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentDidUpdate</span>(<span class="params">preProps,preState,snapshotValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentDidUpdate&#x27;</span>,preProps,preState,snapshotValue);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    add = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: count + <span class="number">1</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 卸载组件按钮</span></span></span><br><span class="line"><span class="language-javascript">    death = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    force = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>卸载组件+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>强制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 渲染组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Count</span> <span class="attr">count</span>=<span class="string">&quot;199&quot;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>getSnapshotBeforeUpdate应用实例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">NewsList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    state = &#123;<span class="attr">newsArr</span>:[]&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">list</span>.<span class="property">scrollHeight</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentDidUpdate</span>(<span class="params">preProps,preState,height</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">list</span>.<span class="property">scrollTop</span> += <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">list</span>.<span class="property">scrollHeight</span> - height</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取原装胎</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123;newsArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 模拟一条新闻</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> news = <span class="string">&#x27;新闻&#x27;</span> + (newsArr.<span class="property">length</span> + <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 更新状态</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">newsArr</span>:[news,...newsArr]&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            &#123;this.state.newsArr.map((n,index) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">              return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;news&quot;</span>&gt;</span>&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            &#125;)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">NewsList</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="重要的钩子"><a href="#重要的钩子" class="headerlink" title="重要的钩子"></a>重要的钩子</h3><ol>
<li>render()：初始化渲染或更新渲染调用</li>
<li>componentDidMount()：开启监听 ，发送ajax请求</li>
<li>componentWillUnmount()：做一些收尾工作：清理定时器</li>
</ol>
<h3 id="即将废弃的钩子"><a href="#即将废弃的钩子" class="headerlink" title="即将废弃的钩子"></a>即将废弃的钩子</h3><ol>
<li>componentWillMount</li>
<li>componentWillReceiveProps</li>
<li>componentWillUpdate</li>
</ol>
<p>componentWIllMount() componentWillReceiveProps() componentWillUpdate() 这三个生命周期函数需要加上前缀 <strong>UNSAVE_</strong></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——路由(V6)</title>
    <url>/2022/06/20/react/react%E8%B7%AF%E7%94%B1-V5/</url>
    <content><![CDATA[<h1 id="React-Router-6"><a href="#React-Router-6" class="headerlink" title="React Router 6"></a>React Router 6</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ol>
<li><p>React Router 以三个不同的包发布到 npm 上，它们分别为：</p>
<ol>
<li>react-router: 路由的核心库，提供了很多的：组件、钩子。</li>
<li><strong style="color:#dd4d40"><strong>react-router-dom:</strong></strong > <strong style="color:#dd4d40">包含react-router所有内容，并添加一些专门用于 DOM 的组件，例如 <code>&lt;BrowserRouter&gt;</code>等 </strong>。</li>
<li>react-router-native: 包括react-router所有内容，并添加一些专门用于ReactNative的API，例如:<code>&lt;NativeRouter&gt;</code>等。</li>
</ol>
</li>
<li><p>与React Router 5.x 版本相比，改变了什么？</p>
<ol>
<li><p>内置组件的变化：移除<code>&lt;Switch/&gt;</code> ，新增 <code>&lt;Routes/&gt;</code>等。</p>
</li>
<li><p>语法的变化：<code>component=&#123;About&#125;</code> 变为 <code>element=&#123;&lt;About/&gt;&#125;</code>等。</p>
</li>
<li><p>新增多个hook：<code>useParams</code>、<code>useNavigate</code>、<code>useMatch</code>等。</p>
</li>
<li><p><strong style="color:#dd4d40">官方明确推荐函数式组件了！！！</strong></p>
<p>……</p>
</li>
</ol>
</li>
</ol>
<h2 id="2-Component"><a href="#2-Component" class="headerlink" title="2.Component"></a>2.Component</h2><h3 id="1-lt-BrowserRouter-gt"><a href="#1-lt-BrowserRouter-gt" class="headerlink" title="1. &lt;BrowserRouter&gt;"></a>1. <code>&lt;BrowserRouter&gt;</code></h3><ol>
<li><p>说明：<code>&lt;BrowserRouter&gt; </code>用于包裹整个应用。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* 整体结构（通常为App组件） */&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,root</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-lt-HashRouter-gt"><a href="#2-lt-HashRouter-gt" class="headerlink" title="2. &lt;HashRouter&gt;"></a>2. <code>&lt;HashRouter&gt;</code></h3><ol>
<li>说明：作用与<code>&lt;BrowserRouter&gt;</code>一样，但<code>&lt;HashRouter&gt;</code>修改的是地址栏的hash值。</li>
<li>备注：6.x版本中<code>&lt;HashRouter&gt;</code>、<code>&lt;BrowserRouter&gt; </code> 的用法与 5.x 相同。</li>
</ol>
<h3 id="3-lt-Routes-gt-与-lt-Route-gt"><a href="#3-lt-Routes-gt-与-lt-Route-gt" class="headerlink" title="3. &lt;Routes/&gt; 与 &lt;Route/&gt;"></a>3. <code>&lt;Routes/&gt; 与 &lt;Route/&gt;</code></h3><ol>
<li><p>v6版本中移出了先前的<code>&lt;Switch&gt;</code>，引入了新的替代者：<code>&lt;Routes&gt;</code>。</p>
</li>
<li><p><code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code>要配合使用，且必须要用<code>&lt;Routes&gt;</code>包裹<code>&lt;Route&gt;</code>。</p>
</li>
<li><p><code>&lt;Route&gt;</code> 相当于一个 if 语句，如果其路径与当前 URL 匹配，则呈现其对应的组件。</p>
</li>
<li><p> <code>&lt;Route caseSensitive&gt;</code> 属性用于指定：匹配时是否区分大小写（默认为 false）。</p>
</li>
<li><p>当URL发生变化时，<code>&lt;Routes&gt; </code>都会查看其所有子<code> &lt;Route&gt;</code> 元素以找到最佳匹配并呈现组件 。</p>
</li>
<li><p> <code>&lt;Route&gt;</code> 也可以嵌套使用，且可配合<code>useRoutes()</code>配置 “路由表” ，但需要通过 <code>&lt;Outlet&gt;</code> 组件来渲染其子路由。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Routes</span>&gt;</span><br><span class="line">    <span class="comment">/*path属性用于定义路径，element属性用于定义当前路径所对应的组件*/</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*用于定义嵌套路由，home是一级路由，对应的路径/home*/</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">       /*test1 和 test2 是二级路由,对应的路径是/home/test1 或 /home/test2*/</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;test1&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Test</span>/&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;test2&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Test2</span>/&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//Route也可以不写element属性, 这时就是用于展示嵌套的路由 .所对应的路径是/users/xxx</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Demo</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Routes</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-lt-Link-gt"><a href="#4-lt-Link-gt" class="headerlink" title="4. &lt;Link&gt;"></a>4. <code>&lt;Link&gt;</code></h3><ol>
<li><p>作用: 修改URL，且不发送网络请求（路由链接）。</p>
</li>
<li><p>注意: 外侧需要用<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code>包裹。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    	<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/路径&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-lt-NavLink-gt"><a href="#5-lt-NavLink-gt" class="headerlink" title="5. &lt;NavLink&gt;"></a>5. <code>&lt;NavLink&gt;</code></h3><ol>
<li><p>作用: 与<code>&lt;Link&gt;</code>组件类似，且可实现导航的“高亮”效果。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意: NavLink默认类名是active，下面是指定自定义的class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义样式</span></span><br><span class="line">&lt;<span class="title class_">NavLink</span></span><br><span class="line">    to=<span class="string">&quot;login&quot;</span></span><br><span class="line">    className=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;home&#x27;</span>, isActive)</span><br><span class="line">        <span class="keyword">return</span> isActive ? <span class="string">&#x27;base one&#x27;</span> : <span class="string">&#x27;base&#x27;</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;login&lt;/<span class="title class_">NavLink</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	默认情况下，当Home的子组件匹配成功，Home的导航也会高亮，</span></span><br><span class="line"><span class="comment">	当NavLink上添加了end属性后，若Home的子组件匹配成功，则Home的导航没有高亮效果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;home&quot;</span> <span class="attr">end</span> &gt;</span>home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="6-lt-Navigate-gt"><a href="#6-lt-Navigate-gt" class="headerlink" title="6. &lt;Navigate&gt;"></a>6. <code>&lt;Navigate&gt;</code></h3><ol>
<li><p>作用：只要<code>&lt;Navigate&gt;</code>组件被渲染，就会修改路径，切换视图。</p>
</li>
<li><p><code>replace</code>属性用于控制跳转模式（push 或 replace，默认是push）。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Navigate</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> [sum,setSum] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Home的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			&#123;/* 根据sum的值决定是否切换视图 */&#125;</span></span><br><span class="line"><span class="language-xml">			&#123;sum === 1 ? <span class="tag">&lt;<span class="name">h4</span>&gt;</span>sum的值为&#123;sum&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span> : <span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">replace</span>=<span class="string">&#123;true&#125;/</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setSum(2)&#125;&gt;点我将sum变为2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-lt-Outlet-gt"><a href="#7-lt-Outlet-gt" class="headerlink" title="7. &lt;Outlet&gt;"></a>7. <code>&lt;Outlet&gt;</code></h3><ol>
<li><p>当<code>&lt;Route&gt;</code>产生嵌套时，渲染其对应的后续子路由。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据路由表生成对应的路由规则</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title function_">useRoutes</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">//Home.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>,<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home组件内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;/* 指定路由组件呈现的位置 */&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3.Hooks"></a>3.Hooks</h2><h3 id="1-useRoutes"><a href="#1-useRoutes" class="headerlink" title="1. useRoutes()"></a>1. useRoutes()</h3><ol>
<li><p>作用：根据路由表，动态创建<code>&lt;Routes&gt;</code>和<code>&lt;Route&gt;</code>。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由表配置：src/routes/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Navigate</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">		<span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">		<span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">		<span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//App.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>,useRoutes&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="comment">//根据路由表生成对应的路由规则</span></span><br><span class="line">	<span class="keyword">const</span> element = <span class="title function_">useRoutes</span>(routes)</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			......</span></span><br><span class="line"><span class="language-xml">      &#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;element&#125;</span></span><br><span class="line"><span class="language-xml">		  ......</span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-useNavigate"><a href="#2-useNavigate" class="headerlink" title="2. useNavigate()"></a>2. useNavigate()</h3><ol>
<li><p>作用：返回一个函数用来实现编程式导航。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useNavigate&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//第一种使用方式：指定具体的路径</span></span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&#x27;/login&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">replace</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">state</span>: &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">    &#125;) </span><br><span class="line">    <span class="comment">//第二种使用方式：传入数值进行前进或后退，类似于5.x中的 history.go()方法</span></span><br><span class="line">    <span class="title function_">navigate</span>(-<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handle&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-useParams"><a href="#3-useParams" class="headerlink" title="3. useParams()"></a>3. useParams()</h3><ol>
<li><p>作用：回当前匹配路由的<code>params</code>参数，类似于5.x中的<code>match.params</code>。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/User.jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProfilePage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取URL中携带过来的params参数</span></span><br><span class="line">  <span class="keyword">let</span> &#123; id &#125; = <span class="title function_">useParams</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;users/:id&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">User</span> /&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-useSearchParams"><a href="#4-useSearchParams" class="headerlink" title="4. useSearchParams()"></a>4. useSearchParams()</h3><ol>
<li><p>作用：用于读取和修改当前位置的 URL 中的查询字符串。</p>
</li>
<li><p>返回一个包含两个值的数组，内容分别为：当前的seaech参数、更新search的函数。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useSearchParams&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> [search,setSearch] = <span class="title function_">useSearchParams</span>()</span><br><span class="line">	<span class="keyword">const</span> id = search.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">	<span class="keyword">const</span> title = search.<span class="title function_">get</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">	<span class="keyword">const</span> content = search.<span class="title function_">get</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setSearch(&#x27;id=008&amp;title=哈哈&amp;content=嘻嘻&#x27;)&#125;&gt;点我更新一下收到的search参数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-useLocation"><a href="#5-useLocation" class="headerlink" title="5. useLocation()"></a>5. useLocation()</h3><ol>
<li><p>作用：获取当前 location 信息，对标5.x中的路由组件的<code>location</code>属性。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useLocation&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> x = <span class="title function_">useLocation</span>()</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>,x)</span><br><span class="line">  <span class="comment">// x就是location对象: </span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">      hash: &quot;&quot;,</span></span><br><span class="line"><span class="comment">      key: &quot;ah9nv6sz&quot;,</span></span><br><span class="line"><span class="comment">      pathname: &quot;/login&quot;,</span></span><br><span class="line"><span class="comment">      search: &quot;?name=zs&amp;age=18&quot;,</span></span><br><span class="line"><span class="comment">      state: &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="6-useMatch"><a href="#6-useMatch" class="headerlink" title="6. useMatch()"></a>6. useMatch()</h3><ol>
<li><p>作用：返回当前匹配信息，对标5.x中的路由组件的<code>match</code>属性。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/login/:page/:pageSize&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>&#125;/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/login/1/10&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> match = <span class="title function_">useMatch</span>(<span class="string">&#x27;/login/:x/:y&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match) <span class="comment">//输出match对象</span></span><br><span class="line">  <span class="comment">//match对象内容如下：</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  	&#123;</span></span><br><span class="line"><span class="comment">      params: &#123;x: &#x27;1&#x27;, y: &#x27;10&#x27;&#125;</span></span><br><span class="line"><span class="comment">      pathname: &quot;/LoGin/1/10&quot;  </span></span><br><span class="line"><span class="comment">      pathnameBase: &quot;/LoGin/1/10&quot;</span></span><br><span class="line"><span class="comment">      pattern: &#123;</span></span><br><span class="line"><span class="comment">      	path: &#x27;/login/:x/:y&#x27;, </span></span><br><span class="line"><span class="comment">      	caseSensitive: false, </span></span><br><span class="line"><span class="comment">      	end: false</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-useInRouterContext"><a href="#7-useInRouterContext" class="headerlink" title="7. useInRouterContext()"></a>7. useInRouterContext()</h3><p>​            作用：如果组件在 <code>&lt;Router&gt;</code> 的上下文中呈现，则 <code>useInRouterContext</code> 钩子返回 true，否则返回 false。</p>
<h3 id="8-useNavigationType"><a href="#8-useNavigationType" class="headerlink" title="8. useNavigationType()"></a>8. useNavigationType()</h3><ol>
<li>作用：返回当前的导航类型（用户是如何来到当前页面的）。</li>
<li>返回值：<code>POP</code>、<code>PUSH</code>、<code>REPLACE</code>。</li>
<li>备注：<code>POP</code>是指在浏览器中直接打开了这个路由组件（刷新页面）。</li>
</ol>
<h3 id="9-useOutlet"><a href="#9-useOutlet" class="headerlink" title="9. useOutlet()"></a>9. useOutlet()</h3><ol>
<li><p>作用：用来呈现当前组件中渲染的嵌套路由。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">useOutlet</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">// 如果嵌套路由没有挂载,则result为null</span></span><br><span class="line"><span class="comment">// 如果嵌套路由已经挂载,则展示嵌套的路由对象</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="10-useResolvedPath"><a href="#10-useResolvedPath" class="headerlink" title="10.useResolvedPath()"></a>10.useResolvedPath()</h3><ol>
<li>作用：给定一个 URL值，解析其中的：path、search、hash值。</li>
</ol>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——组件通信</title>
    <url>/2022/06/15/react/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="React组件通信方式"><a href="#React组件通信方式" class="headerlink" title="React组件通信方式"></a>React组件通信方式</h2><h3 id="1-父子组件通信方式"><a href="#1-父子组件通信方式" class="headerlink" title="1.父子组件通信方式"></a>1.父子组件通信方式</h3><h4 id="1-回调方式（子传父-）"><a href="#1-回调方式（子传父-）" class="headerlink" title="1.回调方式（子传父 ）"></a>1.回调方式（子传父 ）</h4><p>该方式主要通过父组件通过props向子组件传递一个回调函数，子组件接收到回调函数后，将数据以参数的形式回传给父组件，从而达到父子通信</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">callback</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父组件接收到子组件传递的值：&#x27;</span>,args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Child</span> <span class="attr">cb</span>=<span class="string">&#123;this.callback&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.props.cb(&quot;子组件的传值&quot;)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125; &gt;给父组件传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Parent</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-父传子"><a href="#2-父传子" class="headerlink" title="2.父传子"></a>2.父传子</h4><h5 id="1-props"><a href="#1-props" class="headerlink" title="1.props"></a>1.props</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data,setData] = <span class="title function_">useState</span>(<span class="string">&quot;i am superman~&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">args</span>=<span class="string">&#123;data&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>接收到父组件的传值：&#123;props.args&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-ref"><a href="#2-ref" class="headerlink" title="2.ref"></a>2.ref</h5><h6 id="1-函数式组件"><a href="#1-函数式组件" class="headerlink" title="1.函数式组件"></a>1.函数式组件</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;forwardRef, useRef, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ParentNode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data,setData] = <span class="title function_">useState</span>(<span class="string">&quot;i am superman~&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> childRef = <span class="title function_">useRef</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          childRef.current.value = &#x27;&#x27;</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;&gt;清空子组件的input框中的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&#123;childRef&#125;</span> <span class="attr">args</span>=<span class="string">&#123;data&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props,ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">func</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    ref.<span class="property">current</span>.<span class="property">value</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span> CHILD <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> func()&#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="2-类组件"><a href="#2-类组件" class="headerlink" title="2.类组件"></a>2.类组件</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildNode</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">      <span class="attr">count</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addCount=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newCount = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>:newCount</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addCount&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentNode</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state=&#123;</span><br><span class="line">    <span class="attr">num</span>:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  childRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  logRef=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">childRef</span>.<span class="property">current</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">childRef</span>.<span class="property">current</span>.<span class="title function_">addCount</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用函数式绑定ref就得使用下面这种获取方法</span></span><br><span class="line">    <span class="comment">// console.log(this.childRef)</span></span><br><span class="line">    <span class="comment">// this.childRef.addCount()</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.logRef&#125;</span>&gt;</span>打印且调用子组件的方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 简单的使用ref获取dom */&#125;</span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">ChildNode</span> <span class="attr">ref</span>=<span class="string">&#123;this.childRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 使用函数式绑定ref*/&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;/*<span class="tag">&lt;<span class="name">ChildNode</span> <span class="attr">ref</span>=<span class="string">&#123;el</span>=&gt;</span>this.childRef=el&#125;/&gt;*/&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ParentNode</span></span><br></pre></td></tr></table></figure>

<h3 id="2-非父子通信"><a href="#2-非父子通信" class="headerlink" title="2.非父子通信"></a>2.非父子通信</h3><h4 id="1-状态提升"><a href="#1-状态提升" class="headerlink" title="1.状态提升"></a>1.状态提升</h4><p><strong>当你遇到需要同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时，需要把子组件的 state 数据提升至其共同的父组件当中保存。之后父组件可以通过 props 将状态数据传递到子组件当中。这样应用当中所有组件的状态数据就能够更方便地同步共享了。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StateUp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">filmList</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;filmId&quot;</span>: <span class="number">5386</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;我的姐姐&quot;</span>,</span><br><span class="line">        <span class="string">&quot;poster&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/75c67d58c49822d782561cdcca65189c.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;actors&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;殷若昕&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;导演&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/5c9574f920a21bfea0a35b0557c6dd43.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张子枫&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;安然&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/2bddc157bd0faf6029bbae14ba8d92fc.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖央&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;舅舅&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/3ce5eeb8f056391d655c2d0a6ec35675.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;金遥源&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;弟弟&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/ecda1a57d366c843f28dc68293d4ae63.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;王圣迪&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;童年安然&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/a7eb39e0b652da91c4e3a1c1c7a17a85.jpg&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;director&quot;</span>: <span class="string">&quot;殷若昕&quot;</span>,</span><br><span class="line">        <span class="string">&quot;category&quot;</span>: <span class="string">&quot;剧情|家庭&quot;</span>,</span><br><span class="line">        <span class="string">&quot;synopsis&quot;</span>: <span class="string">&quot;电影讲述失去父母的姐姐在面对追求个人独立生活还是抚养弟弟的问题上展开的一段亲情故事。&quot;</span>,</span><br><span class="line">        <span class="string">&quot;filmType&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;nation&quot;</span>: <span class="string">&quot;中国大陆&quot;</span>,</span><br><span class="line">        <span class="string">&quot;language&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;videoId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;premiereAt&quot;</span>: <span class="number">1617321600</span>,</span><br><span class="line">        <span class="string">&quot;timeType&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;runtime&quot;</span>: <span class="number">127</span>,</span><br><span class="line">        <span class="string">&quot;grade&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;item&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;isPresale&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;isSale&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;filmId&quot;</span>: <span class="number">5391</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;哥斯拉大战金刚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;poster&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/b624c348ee645c004b1e349dbe162ec9.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;actors&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;亚当·温加德&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;导演&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/885b9e96f320408abfc9d172588e753a.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;亚历山大·斯卡斯加德&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Nathan Lind&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/8e6b49c18a8311d8665bf013ea1aa73a.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;米莉·波比·布朗&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Madison Russell&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/c05f1e2481e04f737cd91f4d03c9ff85.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;丽贝卡·豪尔&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Ilene Andrews&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/290e19d60a61ecc877bcd20d1969c599.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;布莱恩·泰里·亨利&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Bernie Hayes&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/323a79599476310db5bde745910857e4.jpg&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;director&quot;</span>: <span class="string">&quot;亚当·温加德&quot;</span>,</span><br><span class="line">        <span class="string">&quot;category&quot;</span>: <span class="string">&quot;动作|冒险&quot;</span>,</span><br><span class="line">        <span class="string">&quot;synopsis&quot;</span>: <span class="string">&quot;影片中，这两位宛如神衹一般强大的对手于一场壮观的战争中相遇，彼时世界命运正悬于一线。为了找到真正的家园，金刚与他的保护者们踏上了一次艰难的旅程。与他们一道前行的还有一个年轻的孤儿女孩——吉雅，这个女孩与金刚之间存在着一种独特而强大的紧密联系。但意想不到的是，他们在前行的航道上与愤怒的哥斯拉狭路相逢，也由此在全球引起了一系列破坏。一股无形的力量造成了这两只巨兽之间的巨大冲突，深藏在地心深处的奥秘也由此揭开。&quot;</span>,</span><br><span class="line">        <span class="string">&quot;filmType&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;nation&quot;</span>: <span class="string">&quot;美国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;language&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;videoId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;premiereAt&quot;</span>: <span class="number">1616716800</span>,</span><br><span class="line">        <span class="string">&quot;timeType&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;runtime&quot;</span>: <span class="number">113</span>,</span><br><span class="line">        <span class="string">&quot;grade&quot;</span>: <span class="string">&quot;7.2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;item&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;isPresale&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;isSale&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;],</span><br><span class="line">    <span class="attr">info</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            this.state.filmList.map(item =&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">FilmItem</span> <span class="attr">onEvent</span>=<span class="string">&#123;(value)</span> =&gt;</span> &#123;this.setState(&#123;info:value&#125;)&#125;&#125;  key=&#123;item.filmId&#125;  &#123;...item&#125;  /&gt;</span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">FilmDetail</span> <span class="attr">info</span>=<span class="string">&#123;this.state.info&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FilmItem</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123;name,poster,grade,synopsis&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filmItem&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.onEvent(synopsis)&#125; &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;poster&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>观众评分：&#123;grade&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FilmDetail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filmdetail&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;this.props.info&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StateUp</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-消息发布、订阅"><a href="#2-消息发布、订阅" class="headerlink" title="2.消息发布、订阅"></a>2.消息发布、订阅</h4><ul>
<li>yarn add pubsub-js</li>
<li>两个兄弟组件，一个发布消息、一个订阅消息</li>
</ul>
<p>发布者</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PubSub</span> <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Search</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;sola&#x27;</span>,&#123;<span class="attr">name</span>:<span class="string">&#x27;alex&#x27;</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户的输入 连续解构赋值</span></span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>: &#123;<span class="attr">value</span>: keyWord&#125;&#125; = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送请求前，通知List更新状态</span></span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;sola&#x27;</span>,&#123;<span class="attr">isFirst</span>: <span class="literal">false</span>, <span class="attr">isLoading</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    <span class="comment">// 发送网络请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">`/api1/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 请求成功后通知List更新状态</span></span><br><span class="line">          <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;sola&#x27;</span>,&#123;<span class="attr">isFirst</span>: <span class="literal">false</span>, <span class="attr">isLoading</span>: <span class="literal">false</span>,<span class="attr">users</span>:response.<span class="property">data</span>.<span class="property">items</span>&#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 请求失败后通知List更新状态</span></span><br><span class="line">          <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;sola&#x27;</span>,&#123;<span class="attr">isLoading</span>: <span class="literal">false</span>,<span class="attr">err</span>:error.<span class="property">message</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron-heading&quot;</span>&gt;</span>Search Github Users<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.keyWordElement = c&#125; type=&quot;text&quot; placeholder=&quot;enter the name you search&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.search&#125;</span>&gt;</span> Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Search</span>;</span><br></pre></td></tr></table></figure>

<p>订阅者</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PubSub</span> <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化状态，</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">users</span>:[], <span class="comment">//users初始值为数组</span></span><br><span class="line">    <span class="attr">isFirst</span>:<span class="literal">true</span>, <span class="comment">// 是否为第一次打开页面</span></span><br><span class="line">    <span class="attr">isLoading</span>:<span class="literal">false</span>, <span class="comment">//标识是否处于加载中</span></span><br><span class="line">    <span class="attr">err</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">// 存储请求得错误信息</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">token</span> = <span class="title class_">PubSub</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;sola&#x27;</span>,<span class="function">(<span class="params">_,stateObj</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(stateObj)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">token</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;users, isFirst, isLoading, err&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            isFirst ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>输入关键字，随后点击搜索<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="language-xml">                isLoading ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>loading....<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="language-xml">                    err ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;err&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="language-xml">                        users.map(userObj =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                          return (</span></span><br><span class="line"><span class="language-xml">                              <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;userObj.id&#125;</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&#123;userObj.html_url&#125;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&#123;</span>&#x27;<span class="attr">noimg</span>&#x27;&#125; <span class="attr">src</span>=<span class="string">&#123;userObj.avatar_url&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                       <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                          )</span></span><br><span class="line"><span class="language-xml">                        &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">List</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-context状态数传参"><a href="#3-context状态数传参" class="headerlink" title="3.context状态数传参"></a>3.context状态数传参</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GlobalContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">filmList</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;filmId&quot;</span>: <span class="number">5386</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;我的姐姐&quot;</span>,</span><br><span class="line">        <span class="string">&quot;poster&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/75c67d58c49822d782561cdcca65189c.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;actors&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;殷若昕&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;导演&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/5c9574f920a21bfea0a35b0557c6dd43.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张子枫&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;安然&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/2bddc157bd0faf6029bbae14ba8d92fc.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖央&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;舅舅&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/3ce5eeb8f056391d655c2d0a6ec35675.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;金遥源&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;弟弟&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/ecda1a57d366c843f28dc68293d4ae63.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;王圣迪&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;童年安然&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/a7eb39e0b652da91c4e3a1c1c7a17a85.jpg&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;director&quot;</span>: <span class="string">&quot;殷若昕&quot;</span>,</span><br><span class="line">        <span class="string">&quot;category&quot;</span>: <span class="string">&quot;剧情|家庭&quot;</span>,</span><br><span class="line">        <span class="string">&quot;synopsis&quot;</span>: <span class="string">&quot;电影讲述失去父母的姐姐在面对追求个人独立生活还是抚养弟弟的问题上展开的一段亲情故事。&quot;</span>,</span><br><span class="line">        <span class="string">&quot;filmType&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;nation&quot;</span>: <span class="string">&quot;中国大陆&quot;</span>,</span><br><span class="line">        <span class="string">&quot;language&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;videoId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;premiereAt&quot;</span>: <span class="number">1617321600</span>,</span><br><span class="line">        <span class="string">&quot;timeType&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;runtime&quot;</span>: <span class="number">127</span>,</span><br><span class="line">        <span class="string">&quot;grade&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;item&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;isPresale&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;isSale&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;filmId&quot;</span>: <span class="number">5391</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;哥斯拉大战金刚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;poster&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/b624c348ee645c004b1e349dbe162ec9.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;actors&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;亚当·温加德&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;导演&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/885b9e96f320408abfc9d172588e753a.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;亚历山大·斯卡斯加德&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Nathan Lind&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/8e6b49c18a8311d8665bf013ea1aa73a.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;米莉·波比·布朗&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Madison Russell&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/c05f1e2481e04f737cd91f4d03c9ff85.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;丽贝卡·豪尔&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Ilene Andrews&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/290e19d60a61ecc877bcd20d1969c599.jpg&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;布莱恩·泰里·亨利&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Bernie Hayes&quot;</span>,</span><br><span class="line">            <span class="string">&quot;avatarAddress&quot;</span>: <span class="string">&quot;https://pic.maizuo.com/usr/movie/323a79599476310db5bde745910857e4.jpg&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;director&quot;</span>: <span class="string">&quot;亚当·温加德&quot;</span>,</span><br><span class="line">        <span class="string">&quot;category&quot;</span>: <span class="string">&quot;动作|冒险&quot;</span>,</span><br><span class="line">        <span class="string">&quot;synopsis&quot;</span>: <span class="string">&quot;影片中，这两位宛如神衹一般强大的对手于一场壮观的战争中相遇，彼时世界命运正悬于一线。为了找到真正的家园，金刚与他的保护者们踏上了一次艰难的旅程。与他们一道前行的还有一个年轻的孤儿女孩——吉雅，这个女孩与金刚之间存在着一种独特而强大的紧密联系。但意想不到的是，他们在前行的航道上与愤怒的哥斯拉狭路相逢，也由此在全球引起了一系列破坏。一股无形的力量造成了这两只巨兽之间的巨大冲突，深藏在地心深处的奥秘也由此揭开。&quot;</span>,</span><br><span class="line">        <span class="string">&quot;filmType&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;value&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;nation&quot;</span>: <span class="string">&quot;美国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;language&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;videoId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;premiereAt&quot;</span>: <span class="number">1616716800</span>,</span><br><span class="line">        <span class="string">&quot;timeType&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;runtime&quot;</span>: <span class="number">113</span>,</span><br><span class="line">        <span class="string">&quot;grade&quot;</span>: <span class="string">&quot;7.2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;item&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;2D&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;isPresale&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;isSale&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;],</span><br><span class="line">    <span class="attr">info</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">GlobalContext.Provider</span>  <span class="attr">value</span>=<span class="string">&#123;&#123;call:</span> &#x27;<span class="attr">phone</span>&#x27;,<span class="attr">info:this.state.info</span>,<span class="attr">changeInfo:</span>(<span class="attr">value</span>) =&gt;</span> &#123;this.setState(&#123;info:value&#125;)&#125;&#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              this.state.filmList.map(item =&gt;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">FilmItem</span>   <span class="attr">key</span>=<span class="string">&#123;item.filmId&#125;</span>  &#123;<span class="attr">...item</span>&#125;  /&gt;</span></span></span><br><span class="line"><span class="language-xml">              )</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">FilmDetail</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">GlobalContext.Provider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FilmItem</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123;name,poster,grade,synopsis&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">GlobalContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            (value) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">              console.log(value);</span></span><br><span class="line"><span class="language-xml">              return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filmItem&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;value.changeInfo(synopsis)&#125;&#125; &gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;poster&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>观众评分：&#123;grade&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">GlobalContext.Consumer</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FilmDetail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">GlobalContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            (value) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">              return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filmdetail&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                detail-&#123;value.info&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">GlobalContext.Consumer</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Context</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>react——路由(V5)</title>
    <url>/2022/06/20/react/react%E8%B7%AF%E7%94%B1-V6/</url>
    <content><![CDATA[<h2 id="React路由"><a href="#React路由" class="headerlink" title="React路由"></a>React路由</h2><p>React Router 是完整的 React 路由解决方案</p>
<p>React Router 保持 UI 与 URL 同步。它拥有简单的 API 与强大的功能例如代码缓冲加载、动态路由匹配、以及建立正确的位置过渡处理。你第一个念头想到的应该是 URL，而不是事后再想起。</p>
<h3 id="路由得基本使用"><a href="#路由得基本使用" class="headerlink" title="路由得基本使用"></a>路由得基本使用</h3><ol>
<li>明确好界面中的导航区、展示区</li>
<li>导航区的a标签改为Link标签：**<Link to="/home">Demo</Link>**</li>
<li>展示区写Route标签进行路径的匹配 <strong><Route path='/home' component={Home}/></strong></li>
<li><App/>的最外侧包裹了一个<BrowserRouter>或<HashRouter></li>
</ol>
<h3 id="路由组件和一般组件"><a href="#路由组件和一般组件" class="headerlink" title="路由组件和一般组件"></a>路由组件和一般组件</h3><ol>
<li><p>写法不同</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般组件</span></span><br><span class="line">&lt;<span class="title class_">Demo</span>/&gt;</span><br><span class="line"><span class="comment">// 路由组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/demo&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Demo&#125;/</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>存放位置不同</p>
</li>
</ol>
<ul>
<li>一般组件：components</li>
<li>路由组件：pages</li>
</ul>
<ol start="3">
<li>接收到的props不同</li>
</ol>
<ul>
<li><p>一般组件：写组件标签时传递了什么，就能收到什么</p>
</li>
<li><p>路由组件：接收三个固定的属性</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">history</span>:</span><br><span class="line">    <span class="attr">go</span>:f <span class="title function_">go</span>(n)</span><br><span class="line">    <span class="attr">goBack</span>:f <span class="title function_">goBack</span>()</span><br><span class="line">    <span class="attr">goFward</span>:f <span class="title function_">goFoward</span>()</span><br><span class="line">    <span class="attr">push</span>:f <span class="title function_">push</span>(path,state)</span><br><span class="line">    <span class="attr">replace</span>:f <span class="title function_">replace</span>(path,state)</span><br><span class="line"><span class="attr">location</span>:</span><br><span class="line">    <span class="attr">pathname</span>:<span class="string">&quot;/about&quot;</span></span><br><span class="line">    <span class="attr">search</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">state</span>:<span class="literal">undefined</span></span><br><span class="line"><span class="attr">match</span>:</span><br><span class="line">    <span class="attr">params</span>:&#123;&#125;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/about&quot;</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;/about&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="NavLink与封装NavLink"><a href="#NavLink与封装NavLink" class="headerlink" title="NavLink与封装NavLink"></a>NavLink与封装NavLink</h3><ul>
<li><p>动态给路由标签添加属性，默认是active，NavLink可以实现路由链接的高亮，通过activeClassName指定样式名字</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">NavLink</span> activeClassName=<span class="string">&quot;active&quot;</span> className=<span class="string">&quot;list-group-item&quot;</span> to=<span class="string">&quot;/about&quot;</span>&gt;<span class="title class_">About</span>&lt;/<span class="title class_">NavLink</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>标签体内容是一个特殊的标签属性</p>
</li>
<li><p>通过 this.props.children可以获取标签体内容</p>
</li>
</ul>
<h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><ul>
<li><p>通常情况下，path和component是一一对应的关系，Switch可以提高路由匹配率（单一匹配）</p>
</li>
<li><p>在注册路由的时候，将Route使用Switch包裹起来，路由从上至下匹配到第一个就不会继续向下匹配了</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">    &#123;<span class="comment">/*Test组件不会展示*/</span>&#125;</span><br><span class="line">  &lt;<span class="title class_">Route</span> path=<span class="string">&quot;/home&quot;</span> component=&#123;<span class="title class_">Test</span>&#125;/&gt;</span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="解决多级路径刷新页面央视丢失的问题"><a href="#解决多级路径刷新页面央视丢失的问题" class="headerlink" title="解决多级路径刷新页面央视丢失的问题"></a>解决多级路径刷新页面央视丢失的问题</h3><ol>
<li>public/index.html 中引入样式时不写 <strong>./<strong>写</strong>/</strong>  (常用)</li>
<li>public/index.html 中引入样式时不写 <strong>./</strong> 写%PUBBLIC_URL%(常用)</li>
<li>使用HashRouter</li>
</ol>
<h3 id="路由的严格匹配与模糊匹配"><a href="#路由的严格匹配与模糊匹配" class="headerlink" title="路由的严格匹配与模糊匹配"></a>路由的严格匹配与模糊匹配</h3><ol>
<li>默认使用的时模糊匹配：输入的路径必须包含要匹配的路径，且顺序要一致</li>
<li>开启严格匹配：<Route  exact path="/sola/about" component={About}/></li>
<li>严格匹配不要随便开启，需要再开，有时候会导致无法继续匹配二级路由</li>
</ol>
<h3 id="Redirect的使用"><a href="#Redirect的使用" class="headerlink" title="Redirect的使用"></a>Redirect的使用</h3><ol>
<li><p>一般写在所有路由的最下方，当所有路由都无法匹配的时候，跳转到Redirect指定的路由</p>
</li>
<li><p>具体编码</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span>   <span class="attr">path</span>=<span class="string">&quot;/sola/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span>  <span class="attr">path</span>=<span class="string">&quot;/sola/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/sola/about&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><ol>
<li>注册子路由时要写上父路由的path值</li>
<li>路由的匹配是按照路由的注册顺序进行的</li>
</ol>
<h3 id="向路由组件传递参数"><a href="#向路由组件传递参数" class="headerlink" title="向路由组件传递参数"></a>向路由组件传递参数</h3><h4 id="1-params参数"><a href="#1-params参数" class="headerlink" title="1.params参数"></a>1.params参数</h4><ol>
<li><p>路由链接（携带参数）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span> to=&#123;<span class="string">`/home/message/detail/<span class="subst">$&#123;messageObj.id&#125;</span>/<span class="subst">$&#123;messageObj.title&#125;</span>`</span>&#125;&gt;&#123;messageObj.<span class="property">title</span>&#125;&lt;/<span class="title class_">Link</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>注册路由（声明接收）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span>   path=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> component=&#123;<span class="title class_">Detail</span>&#125; /&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>接收参数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;id,title&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-search参数"><a href="#2-search参数" class="headerlink" title="2.search参数"></a>2.search参数</h4><ol>
<li><p>路由链接（携带参数）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span> to=&#123;<span class="string">`/home/message/detail/?id=<span class="subst">$&#123;messageObj.id&#125;</span>&amp;title=<span class="subst">$&#123;messageObj.title&#125;</span>`</span>&#125;&gt;&#123;messageObj.<span class="property">title</span>&#125;&lt;/<span class="title class_">Link</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>注册路由（无需声明、正常注册即可）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span>   path=<span class="string">&quot;/home/message/detail&quot;</span> component=&#123;<span class="title class_">Detail</span>&#125; /&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>接收参数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;querystring&#x27;</span></span><br><span class="line"><span class="comment">// 接收search参数</span></span><br><span class="line"><span class="keyword">const</span> &#123;search&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span></span><br><span class="line"><span class="keyword">const</span>  &#123;id,title&#125; = qs.<span class="title function_">parse</span>(search.<span class="title function_">slice</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>备注：获取到的search是urlencoded编码字符串，需要借助querystring解析</p>
</li>
</ol>
<h4 id="3-state参数"><a href="#3-state参数" class="headerlink" title="3.state参数"></a>3.state参数</h4><ol>
<li><p>路由链接（携带参数）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span> to=&#123;&#123;</span><br><span class="line">  <span class="attr">pathname</span>: <span class="string">&#x27;/home/message/detail&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123;<span class="attr">id</span>: messageObj.<span class="property">id</span>, <span class="attr">title</span>: messageObj.<span class="property">title</span>&#125;</span><br><span class="line">&#125;&#125;&gt;&#123;messageObj.<span class="property">title</span>&#125;&lt;/<span class="title class_">Link</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>注册路由（无需声明、正常注册即可）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span>   path=<span class="string">&quot;/home/message/detail&quot;</span> component=&#123;<span class="title class_">Detail</span>&#125; /&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>接收参数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;id,title&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">state</span> || &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>备注：刷新也可以保留住参数</p>
</li>
</ol>
<h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><ul>
<li>借助this.props.history对象上的API，对路由进行跳转、前进、后退</li>
<li>this.props.history.push()</li>
<li>this.props.history.replace()</li>
<li>this.props.history.goBack()</li>
<li>this.props.history.goFoward()</li>
<li>this.props.history.go()</li>
</ul>
<h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><ul>
<li><p>可以加工一般组件，让一般组件具备路由组件所特有的API，返回值是一个新组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Header</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="BrowserRouter与HashRouter"><a href="#BrowserRouter与HashRouter" class="headerlink" title="BrowserRouter与HashRouter"></a>BrowserRouter与HashRouter</h3><p>1.底层原理不一样</p>
<ul>
<li>BrowserRouter使用的是h5的history API，不兼容IE9以下版本</li>
<li>HashRouter使用的是url的哈希值</li>
</ul>
<p>2.path表现形式不一样</p>
<ul>
<li>BrowserRouter的路径中没有#</li>
<li>HashRouter‘的路径包含#</li>
</ul>
<p>3.刷新后对路由state的影响：</p>
<ul>
<li>BrowserRouter没有任何影响，因为state保存在history中</li>
<li>HashRouter刷新后会导致路由state参数的丢失</li>
</ul>
<p>4.注意：HashRouter可以用于解决一些路径错误相关的问题</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/06/10/vue/test/</url>
    <content><![CDATA[<p>mac</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack</title>
    <url>/2022/06/28/webpack/webpack/</url>
    <content><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h1 id="一、Webpack-简介"><a href="#一、Webpack-简介" class="headerlink" title="一、Webpack 简介"></a>一、Webpack 简介</h1><h2 id="1-1-webpack-是什么"><a href="#1-1-webpack-是什么" class="headerlink" title="1.1 webpack 是什么"></a>1.1 webpack 是什么</h2><p>webpack 是一种<strong>前端资源构建工具</strong>，一个静态模块打包器(module bundler)。</p>
<p>在webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。<br>它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</p>
<h2 id="1-2-webpack-五个核心概念"><a href="#1-2-webpack-五个核心概念" class="headerlink" title="1.2 webpack 五个核心概念"></a>1.2 webpack 五个核心概念</h2><h4 id="1-2-1-Entry"><a href="#1-2-1-Entry" class="headerlink" title="1.2.1 Entry"></a>1.2.1 Entry</h4><p>入口(Entry)：指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p>
<h4 id="1-2-2-Output"><a href="#1-2-2-Output" class="headerlink" title="1.2.2 Output"></a>1.2.2 Output</h4><p>输出(Output)：指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p>
<h4 id="1-2-3-Loader"><a href="#1-2-3-Loader" class="headerlink" title="1.2.3 Loader"></a>1.2.3 Loader</h4><p>Loader：让 webpack 能够去处理那些非 JS 的文件，比如样式文件、图片文件(webpack 自身只理解<br>JS)</p>
<h4 id="1-2-4-Plugins"><a href="#1-2-4-Plugins" class="headerlink" title="1.2.4 Plugins"></a>1.2.4 Plugins</h4><p>插件(Plugins)：可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，<br>一直到重新定义环境中的变量等。</p>
<h4 id="1-2-5-Mode"><a href="#1-2-5-Mode" class="headerlink" title="1.2.5 Mode"></a>1.2.5 Mode</h4><p>模式(Mode)：指示 webpack 使用相应模式的配置。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>development</td>
<td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td>
<td>能让代码本地调试运行的环境</td>
</tr>
<tr>
<td>production</td>
<td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</td>
<td>能让代码优化上线运行的环境</td>
</tr>
</tbody></table>
<h1 id="二、Webpack-初体验"><a href="#二、Webpack-初体验" class="headerlink" title="二、Webpack 初体验"></a>二、Webpack 初体验</h1><h2 id="2-1-初始化配置"><a href="#2-1-初始化配置" class="headerlink" title="2.1 初始化配置"></a>2.1 初始化配置</h2><ol>
<li><p>初始化 package.json：npm init</p>
</li>
<li><p>下载安装webpack：(webpack4以上的版本需要全局/本地都安装webpack-cli)</p>
<p>全局安装：cnpm i webpack webpack-cli -g</p>
<p>本地安装：cnpm i webpack webpack-cli -D</p>
</li>
</ol>
<p>当前版本：</p>
<ul>
<li>webpack: 5.62.1</li>
<li>webpack-cli: 4.9.1</li>
</ul>
<h2 id="2-2-编译打包应用"><a href="#2-2-编译打包应用" class="headerlink" title="2.2 编译打包应用"></a>2.2 编译打包应用</h2><p>创建 src 下的 js 等文件后，不需要配置 webpack.config.js 文件，在命令行就可以编译打包。</p>
<p>指令：</p>
<ul>
<li><p>开发环境：webpack ./src/index.js -o ./build/built.js –mode=development</p>
<p>webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是开发环境</p>
</li>
<li><p>生产环境：webpack ./src/index.js -o ./build/built.js –mode=production</p>
<p>webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是生产环境</p>
</li>
</ul>
<p>结论：</p>
<ol>
<li>webpack 本身能处理 js/json 资源，不能处理 css/img 等其他资源</li>
<li>生产环境和开发环境将 ES6 模块化编译成浏览器能识别的模块化，但是不能处理 ES6 的基本语法转化为 ES5（需要借助 loader）</li>
<li>生产环境比开发环境多一个压缩 js 代码</li>
</ol>
<h1 id="三、Webpack-开发环境的基本配置"><a href="#三、Webpack-开发环境的基本配置" class="headerlink" title="三、Webpack 开发环境的基本配置"></a>三、Webpack 开发环境的基本配置</h1><p>webpack.config.js 是 webpack 的配置文件。</p>
<p>作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</p>
<p>所有构建工具都是基于 nodejs 平台运行的，模块化默认采用 commonjs。</p>
<p>开发环境配置主要是为了能让代码运行。主要考虑以下几个方面：</p>
<p>在 webpack 5 之前，通常使用：</p>
<ul>
<li><a href="https://v4.webpack.js.org/loaders/raw-loader/"><code>raw-loader</code></a> 将文件导入为字符串</li>
<li><a href="https://v4.webpack.js.org/loaders/url-loader/"><code>url-loader</code></a> 将文件作为 data URI 内联到 bundle 中</li>
<li><a href="https://v4.webpack.js.org/loaders/file-loader/"><code>file-loader</code></a> 将文件发送到输出目录</li>
</ul>
<p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p>
<ul>
<li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前通过使用 <code>file-loader</code> 实现。</li>
<li><code>asset/inline</code> 导出一个资源的 data URI。之前通过使用 <code>url-loader</code> 实现。</li>
<li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li>
<li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li>
</ul>
<h3 id="打包样式资源"><a href="#打包样式资源" class="headerlink" title="打包样式资源"></a>打包样式资源</h3><ul>
<li>npm i css-loader style-loader less-loader -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">webpack.config.js  webpack的配置文件</span></span><br><span class="line"><span class="comment">  作用：指示webpack干哪些活</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  所有的构建工具都是基于nodejs平台运行的模块化 默认采用commonjs</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">// 用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack配置</span></span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">//  输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    <span class="comment">// __dirname nodejs的变量  代表当前文件所在目录的绝对路径</span></span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// loader的配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 详细loader配置</span></span><br><span class="line">      <span class="comment">// 不同文件必须配置不同loader配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//  匹配那些文件</span></span><br><span class="line">        <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 使用哪些loader</span></span><br><span class="line">        <span class="attr">use</span>:[</span><br><span class="line">            <span class="comment">// use数组中loader执行顺序：从右到左，从下到上</span></span><br><span class="line">            <span class="comment">// 创建style标签，将js中的样式资源插入到head中生效</span></span><br><span class="line">            <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">            <span class="comment">//  将css文件变成commonjs模块加载js中，里面内容是 样式字符串</span></span><br><span class="line">            <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">            <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="comment">// 将less文件编译成css文件</span></span><br><span class="line">            <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// plugins的二配置</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="comment">// mode:&#x27;production&#x27;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打包-html-资源"><a href="#打包-html-资源" class="headerlink" title="打包 html 资源"></a>打包 html 资源</h3><ul>
<li>npm i html-webpack-plugin -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* loader：1.下载 2.使用（配置loader）</span></span><br><span class="line"><span class="comment">* plugins：1.下载 2.引入 3.使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;built.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">//plugins的配置</span></span><br><span class="line">    <span class="comment">//html-webpack-plugin</span></span><br><span class="line">      <span class="comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      <span class="comment">// 需要有结构的HTML文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 复制 &#x27;./src/index.html&#x27; 文件,自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打包图片资源"><a href="#打包图片资源" class="headerlink" title="打包图片资源"></a>打包图片资源</h3><p>webpack5以下</p>
<ul>
<li>npm i url-laoder file-loader -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* loader：1.下载 2.使用（配置loader）</span></span><br><span class="line"><span class="comment">* plugins：1.下载 2.引入 3.使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bulit.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 要使用多个 loader处理使用use</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//webpack5以下 处理图片资源</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        <span class="comment">// 使用一个loader</span></span><br><span class="line">        <span class="comment">// 下载 url-laoder file-loader</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 图片大小小于8kb，就会被base64处理</span></span><br><span class="line">          <span class="comment">// 优点：减少请求数量（减轻服务器压力）</span></span><br><span class="line">          <span class="comment">//  缺点：图片体积变大（文件请求速度变慢）</span></span><br><span class="line">          <span class="attr">limit</span>:<span class="number">8</span>*<span class="number">1024</span>,</span><br><span class="line">          <span class="comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是common.js</span></span><br><span class="line">          <span class="comment">//  解析时会出现问题：[object Moudule]</span></span><br><span class="line">          <span class="comment">// 解决：关闭url-loader的 es6模块化，使用commonjs解析</span></span><br><span class="line">          <span class="attr">esModule</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 处理html中的img标签</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;html-loader&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>webpack5</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* loader：1.下载 2.使用（配置loader）</span></span><br><span class="line"><span class="comment">* plugins：1.下载 2.引入 3.使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bulit.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// 要使用多个 loader处理使用use</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// webpack5 处理图片资源</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="comment">//转base64的条件</span></span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">25</span> * <span class="number">1024</span>, <span class="comment">// 25kb</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">                    <span class="comment">// [hash:6] 取图片哈希值的前十位</span></span><br><span class="line">          <span class="comment">// [ext] 取文件原来扩展名</span></span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">//与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;img/[name].[hash:6][ext]&#x27;</span>,</span><br><span class="line">          <span class="comment">//打包后对资源的引入，文件命名已经有/img了</span></span><br><span class="line">          <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 处理html中的img标签</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;html-loader&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打包其他资源"><a href="#打包其他资源" class="headerlink" title="打包其他资源"></a>打包其他资源</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* loader：1.下载 2.使用（配置loader）</span></span><br><span class="line"><span class="comment">* plugins：1.下载 2.引入 3.使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bulit.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">        <span class="comment">// 打包其他资源(除了 html、js\css资源以外的资源)</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 排除 css/js/html资源</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/\.(css|js|html)$/</span>,</span><br><span class="line">          <span class="comment">// webpack5以下使用方式</span></span><br><span class="line">        <span class="comment">// loader: &quot;file-loader&quot;</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><ul>
<li>npm i webpack-dev-server -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* loader：1.下载 2.使用（配置loader）</span></span><br><span class="line"><span class="comment">* plugins：1.下载 2.引入 3.使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bulit.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">        <span class="comment">// 打包其他资源(除了 html、js\css资源以外的资源)</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 排除 css/js/html资源</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/\.(css|js|html)$/</span>,</span><br><span class="line">        <span class="comment">// loader: &quot;file-loader&quot;</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发服务器 devServer 用来自动化（自动化编译，自动打开浏览器，自动刷新浏览器）</span></span><br><span class="line">  <span class="comment">// 特点：只会在内存中编译打包，不会有任何输出</span></span><br><span class="line">  <span class="comment">// 启动devServer指令为：npx webpack serve</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: &#123;</span><br><span class="line">      <span class="attr">directory</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启动 gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    <span class="attr">open</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是一个简单的开发环境webpack.confg.js配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* loader：1.下载 2.使用（配置loader）</span></span><br><span class="line"><span class="comment">* plugins：1.下载 2.引入 3.使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定打包好的入口文件输出位置</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/bulit.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 配置css</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 配置less</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理图片资源</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="comment">//转base64的条件</span></span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">25</span> * <span class="number">1024</span>, <span class="comment">// 25kb</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// [hash:6] 取图片哈希值的前十位</span></span><br><span class="line">        <span class="comment">// [ext] 取文件原来扩展名</span></span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">//与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;img/[name].[hash:6][ext]&#x27;</span>,</span><br><span class="line">          <span class="comment">//打包后对资源的引入，文件命名已经有/img了</span></span><br><span class="line">          <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 处理html中的img标签</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;html-loader&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 打包其他资源(除了 html、js\css资源以外的资源)</span></span><br><span class="line">        <span class="comment">// 排除 css/js/html资源</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/\.(css|js|html|less|jpg|png|gif)$/</span>,</span><br><span class="line">        <span class="comment">// loader: &quot;file-loader&quot;</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">//与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;media/[name].[hash:6][ext]&#x27;</span>,</span><br><span class="line">          <span class="comment">//打包后对资源的引入，文件命名已经有/img了</span></span><br><span class="line">          <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 打包 html资源</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 配置开发环境</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发服务器 devServer 用来自动化（自动化编译，自动打开浏览器，自动刷新浏览器）</span></span><br><span class="line">  <span class="comment">// 特点：只会在内存中编译打包，不会有任何输出</span></span><br><span class="line">  <span class="comment">// 启动devServer指令为：npx webpack serve</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: &#123;</span><br><span class="line">      <span class="attr">directory</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启动 gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，大部分配置都在注释中给出解释。</p>
<ul>
<li><p>运行项目的两个指令：<br>webpack 会将打包结果输出出去（build文件夹）<br>npx webpack-dev-server 只会在内存中编译打包，没有输出</p>
</li>
<li><p>loader 和 plugin 的不同：（plugin 一定要先引入才能使用）</p>
<p>loader：1. 下载 2. 使用（配置 loader）</p>
<p>plugins：1.下载 2. 引入 3. 使用</p>
</li>
</ul>
<h1 id="四、Webpack-生产环境的基本配置"><a href="#四、Webpack-生产环境的基本配置" class="headerlink" title="四、Webpack 生产环境的基本配置"></a>四、Webpack 生产环境的基本配置</h1><p>而生产环境的配置需要考虑以下几个方面：</p>
<h3 id="提取-css-成单独文件"><a href="#提取-css-成单独文件" class="headerlink" title="提取 css 成单独文件"></a>提取 css 成单独文件</h3><ul>
<li>npm i mini-css-extract-plugin -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// npm i mini-css-extract-plugin -D</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/built.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 创建style标签，将样式放入</span></span><br><span class="line">          <span class="comment">// &#x27;style-loader&#x27;,</span></span><br><span class="line">          <span class="comment">// 这个loader取代style-loader 作用：提取 js中的css成单独文件</span></span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="comment">// 将css文件整合到js文件中</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;css/built.css&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="css-兼容性处理（webpack5）"><a href="#css-兼容性处理（webpack5）" class="headerlink" title="css 兼容性处理（webpack5）"></a>css 兼容性处理（webpack5）</h3><ul>
<li>npm i postcss postcss-loader postcss-preset-env -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// npm i mini-css-extract-plugin -D</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置nodejs 的环境变量</span></span><br><span class="line"><span class="comment">// process.env.NODE_ENV = &#x27;development&#x27;</span></span><br><span class="line"><span class="comment">// npm i postcss postcss-loader postcss-preset-env -D</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/built.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 创建style标签，将样式放入</span></span><br><span class="line">          <span class="comment">// &#x27;style-loader&#x27;,</span></span><br><span class="line">          <span class="comment">// 这个loader取代style-loader 作用：提取 js中的css成单独文件</span></span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="comment">// 将css文件整合到js文件中</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          *   css兼容性处理： postcss ——&gt; postcss-loader postcss-preset-env</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          *   帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式 package.json中配置browserslist</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          *   &quot;browserslist&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;development&quot;: [</span></span><br><span class="line"><span class="comment">                  &quot;last 1 chrome version&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;last 1 firefox version&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;last 1 safari version&quot;</span></span><br><span class="line"><span class="comment">                ],</span></span><br><span class="line"><span class="comment">                &quot;production&quot;: [</span></span><br><span class="line"><span class="comment">                  &quot;&gt;0.2%&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;not dead&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;not op_mini all&quot;</span></span><br><span class="line"><span class="comment">                ]</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          *             * */</span></span><br><span class="line">          <span class="comment">// 使用loader的默认配置</span></span><br><span class="line">          <span class="comment">// &#x27;postcss-loader&#x27;,</span></span><br><span class="line">          <span class="comment">// 修改loader配置</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">postcssOptions</span>:&#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&#x27;postcss-preset-env&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;css/built.css&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="压缩-css"><a href="#压缩-css" class="headerlink" title="压缩 css"></a>压缩 css</h3><ul>
<li>npm i optimize-css-assets-webpack-plugin -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// npm i mini-css-extract-plugin -D</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OptimizeCssAssetsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 设置nodejs 的环境变量</span></span><br><span class="line"><span class="comment">// process.env.NODE_ENV = &#x27;development&#x27;</span></span><br><span class="line"><span class="comment">// css兼容性loader   npm i postcss postcss-loader postcss-preset-env -D</span></span><br><span class="line"><span class="comment">// css压缩  npm i optimize-css-assets-webpack-plugin -D</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/built.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 创建style标签，将样式放入</span></span><br><span class="line">          <span class="comment">// &#x27;style-loader&#x27;,</span></span><br><span class="line">          <span class="comment">// 这个loader取代style-loader 作用：提取 js中的css成单独文件</span></span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="comment">// 将css文件整合到js文件中</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          *   css兼容性处理： postcss ——&gt; postcss-loader postcss-preset-env</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          *   帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          *   &quot;browserslist&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;development&quot;: [</span></span><br><span class="line"><span class="comment">                  &quot;last 1 chrome version&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;last 1 firefox version&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;last 1 safari version&quot;</span></span><br><span class="line"><span class="comment">                ],</span></span><br><span class="line"><span class="comment">                &quot;production&quot;: [</span></span><br><span class="line"><span class="comment">                  &quot;&gt;0.2%&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;not dead&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;not op_mini all&quot;</span></span><br><span class="line"><span class="comment">                ]</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          *             * */</span></span><br><span class="line">          <span class="comment">// 使用loader的默认配置</span></span><br><span class="line">          <span class="comment">// &#x27;postcss-loader&#x27;,</span></span><br><span class="line">          <span class="comment">// 修改loader配置</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                  <span class="string">&#x27;postcss-preset-env&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;css/built.css&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 压缩css</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">OptimizeCssAssetsWebpackPlugin</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="js-语法检查"><a href="#js-语法检查" class="headerlink" title="js 语法检查"></a>js 语法检查</h3><ul>
<li>npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/build.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        webpack5 以下版本</span></span><br><span class="line"><span class="comment">        * 语法检查：eslint eslint-loader</span></span><br><span class="line"><span class="comment">        * 注意：只检查 自己写的代码，第三方库不用检查</span></span><br><span class="line"><span class="comment">        * 设置检查规则：</span></span><br><span class="line"><span class="comment">        *   package.json中 配置eslintConfig</span></span><br><span class="line"><span class="comment">        *   &quot;eslintConfig&quot;: &#123;</span></span><br><span class="line"><span class="comment">              &quot;extends&quot;: &quot;airbnb-base&quot;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        *   aribnb eslint eslint-config-airbnb-base eslint-plugin-import</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.js$/,</span></span><br><span class="line">      <span class="comment">//   loader: &quot;eslint-loader&quot;,</span></span><br><span class="line">      <span class="comment">//   exclude: /node_modules/,</span></span><br><span class="line">      <span class="comment">//   options: &#123;</span></span><br><span class="line">      <span class="comment">//     // 自动修复eslint 的错误</span></span><br><span class="line">      <span class="comment">//     fix:true</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * webpack5</span></span><br><span class="line"><span class="comment">      * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D</span></span><br><span class="line"><span class="comment">      package.json中配置</span></span><br><span class="line"><span class="comment">      *&quot;eslintConfig&quot;: &#123;</span></span><br><span class="line"><span class="comment">            &quot;extends&quot;: &quot;airbnb-base&quot;,</span></span><br><span class="line"><span class="comment">            #！！！！如果没使用alias下面的不用配置！！！！！</span></span><br><span class="line"><span class="comment">            &quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="comment">              &quot;import/resolver&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;webpack&quot;: &#123;</span></span><br><span class="line"><span class="comment">                  &quot;config&quot;: &quot;webpack.config.js&quot;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;coffee&#x27;</span>],</span><br><span class="line">        <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="js-兼容性处理"><a href="#js-兼容性处理" class="headerlink" title="js 兼容性处理"></a>js 兼容性处理</h3><ol>
<li><p>基本js兼容性处理</p>
<ul>
<li>npm i babel-loader @babel/core @babel/preset-env -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 全部js兼容性处理——&gt; @babel/polyfill</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/build.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * js兼容性处理：babel-loader @babel/core @babel/preset-env</span></span><br><span class="line"><span class="comment">      * 1. 基本js兼容性处理——&gt; @babel/preset-env  问题：只能转换基本语法 ，例如promise不能转换</span></span><br><span class="line"><span class="comment">      * 2. 全部js兼容性处理——&gt; @babel/polyfill  问题：只要解决部分 兼容性问题 ，但是将所有兼容性代码全部引入，体积太大了</span></span><br><span class="line"><span class="comment">      * 3. 需要做兼容性处理的就做按需加载 ——&gt; corejs</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          <span class="attr">presets</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * webpack5</span></span><br><span class="line"><span class="comment">    * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D</span></span><br><span class="line"><span class="comment">    *&quot;eslintConfig&quot;: &#123;</span></span><br><span class="line"><span class="comment">          &quot;extends&quot;: &quot;airbnb-base&quot;,</span></span><br><span class="line"><span class="comment">          #！！！！如果没使用alias下面的不用配置！！！！！</span></span><br><span class="line"><span class="comment">          &quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="comment">            &quot;import/resolver&quot;: &#123;</span></span><br><span class="line"><span class="comment">              &quot;webpack&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;config&quot;: &quot;webpack.config.js&quot;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;coffee&#x27;</span>],</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>全部js兼容性处理</p>
<ul>
<li>npm i @babel/polyfill -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 全部js兼容性处理——&gt; @babel/polyfill</span></span><br><span class="line">   <span class="attr">entry</span>: [<span class="string">&#x27;@babel/polyfill&#x27;</span>,<span class="string">&#x27;./src/index.js&#x27;</span>],</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/build.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * js兼容性处理：babel-loader @babel/core @babel/preset-env</span></span><br><span class="line"><span class="comment">      * 1. 基本js兼容性处理——&gt; @babel/preset-env  问题：只能转换基本语法 ，例如promise不能转换</span></span><br><span class="line"><span class="comment">      * 2. 全部js兼容性处理——&gt; @babel/polyfill  问题：只要解决部分 兼容性问题 ，但是将所有兼容性代码全部引入，体积太大了</span></span><br><span class="line"><span class="comment">      * 3. 需要做兼容性处理的就做按需加载 ——&gt; corejs</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          <span class="attr">presets</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * webpack5</span></span><br><span class="line"><span class="comment">    * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D</span></span><br><span class="line"><span class="comment">    *&quot;eslintConfig&quot;: &#123;</span></span><br><span class="line"><span class="comment">          &quot;extends&quot;: &quot;airbnb-base&quot;,</span></span><br><span class="line"><span class="comment">          #！！！！如果没使用alias下面的不用配置！！！！！</span></span><br><span class="line"><span class="comment">          &quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="comment">            &quot;import/resolver&quot;: &#123;</span></span><br><span class="line"><span class="comment">              &quot;webpack&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;config&quot;: &quot;webpack.config.js&quot;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;coffee&#x27;</span>],</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>按需加载兼容性处理</p>
<ul>
<li>npm i core-js -D</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 全部js兼容性处理——&gt; @babel/polyfill</span></span><br><span class="line">  <span class="comment">// entry: [&#x27;@babel/polyfill&#x27;,&#x27;./src/index.js&#x27;],</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/build.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * js兼容性处理：babel-loader @babel/core @babel/preset-env</span></span><br><span class="line"><span class="comment">      * 1. 基本js兼容性处理——&gt; @babel/preset-env  问题：只能转换基本语法 ，例如promise不能转换</span></span><br><span class="line"><span class="comment">      * 2. 全部js兼容性处理——&gt; @babel/polyfill  问题：只要解决部分 兼容性问题 ，但是将所有兼容性代码全部引入，体积太大了</span></span><br><span class="line"><span class="comment">      * 3. 需要做兼容性处理的就做按需加载 ——&gt; corejs</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          <span class="attr">presets</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">// 按需加载</span></span><br><span class="line">                <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">                <span class="comment">// 指定corejs版本</span></span><br><span class="line">                <span class="attr">corejs</span>: &#123;</span><br><span class="line">                  <span class="attr">version</span>: <span class="number">3</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 指定兼容性做到哪个版本的浏览器</span></span><br><span class="line">                <span class="attr">targets</span>: &#123;</span><br><span class="line">                  <span class="attr">chrome</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                  <span class="attr">firefox</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                  <span class="attr">ie</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                  <span class="attr">safari</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">                  <span class="attr">edge</span>: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * webpack5</span></span><br><span class="line"><span class="comment">    * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D</span></span><br><span class="line"><span class="comment">    *&quot;eslintConfig&quot;: &#123;</span></span><br><span class="line"><span class="comment">          &quot;extends&quot;: &quot;airbnb-base&quot;,</span></span><br><span class="line"><span class="comment">          #！！！！如果没使用alias下面的不用配置！！！！！</span></span><br><span class="line"><span class="comment">          &quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="comment">            &quot;import/resolver&quot;: &#123;</span></span><br><span class="line"><span class="comment">              &quot;webpack&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;config&quot;: &quot;webpack.config.js&quot;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;coffee&#x27;</span>],</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="js-压缩"><a href="#js-压缩" class="headerlink" title="js 压缩"></a>js 压缩</h3><ul>
<li>将mode设置为production即可自动压缩js文件</li>
</ul>
<h3 id="html-压缩"><a href="#html-压缩" class="headerlink" title="html 压缩"></a>html 压缩</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 全部js兼容性处理——&gt; @babel/polyfill</span></span><br><span class="line">  <span class="comment">// entry: [&#x27;@babel/polyfill&#x27;,&#x27;./src/index.js&#x27;],</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/build.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * js兼容性处理：babel-loader @babel/core @babel/preset-env</span></span><br><span class="line"><span class="comment">      * 1. 基本js兼容性处理——&gt; @babel/preset-env  问题：只能转换基本语法 ，例如promise不能转换</span></span><br><span class="line"><span class="comment">      * 2. 全部js兼容性处理——&gt; @babel/polyfill  问题：只要解决部分 兼容性问题 ，但是将所有兼容性代码全部引入，体积太大了</span></span><br><span class="line"><span class="comment">      * 3. 需要做兼容性处理的就做按需加载 ——&gt; corejs</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          <span class="attr">presets</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">// 按需加载</span></span><br><span class="line">                <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">                <span class="comment">// 指定corejs版本</span></span><br><span class="line">                <span class="attr">corejs</span>: &#123;</span><br><span class="line">                  <span class="attr">version</span>: <span class="number">3</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 指定兼容性做到哪个版本的浏览器</span></span><br><span class="line">                <span class="attr">targets</span>: &#123;</span><br><span class="line">                  <span class="attr">chrome</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                  <span class="attr">firefox</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                  <span class="attr">ie</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                  <span class="attr">safari</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">                  <span class="attr">edge</span>: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        <span class="attr">removeComments</span>:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * webpack5</span></span><br><span class="line"><span class="comment">    * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D</span></span><br><span class="line"><span class="comment">    *&quot;eslintConfig&quot;: &#123;</span></span><br><span class="line"><span class="comment">          &quot;extends&quot;: &quot;airbnb-base&quot;,</span></span><br><span class="line"><span class="comment">          #！！！！如果没使用alias下面的不用配置！！！！！</span></span><br><span class="line"><span class="comment">          &quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="comment">            &quot;import/resolver&quot;: &#123;</span></span><br><span class="line"><span class="comment">              &quot;webpack&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;config&quot;: &quot;webpack.config.js&quot;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;coffee&#x27;</span>],</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 生产环境下会自动压缩js代码</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个基本的生产环境配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">//压缩css文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OptimizeCssAssetsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// js语法检查</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 打包html资源</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量 决定browserslist使用哪个环境</span></span><br><span class="line">process.<span class="property">env</span>.<span class="property">NODE_ENV</span> = <span class="string">&#x27;production&#x27;</span></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  <span class="comment">//  MiniCssExtractPlugin.loader 取代style-loader</span></span><br><span class="line">  <span class="comment">// 为了提取成单独的css文件</span></span><br><span class="line">  <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">  <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">  <span class="comment">// 对样式做兼容性处理,还需要在package.json中配置browserslist</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          <span class="string">&#x27;postcss-preset-env&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/built.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [...commonCssLoader]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [...commonCssLoader, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 正常来讲，一个文件只能被一个loader处理，当一个文件被多个loader处理时，那么一定要指定loader执行的顺序</span></span><br><span class="line"><span class="comment">      * 先 执行eslint，在执行babel</span></span><br><span class="line"><span class="comment">      *  enforce:&#x27;pre&#x27;  表示优先执行</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      <span class="comment">// js做兼容性配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          <span class="attr">presets</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">// 按需加载</span></span><br><span class="line">                <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">                <span class="comment">// 指定corejs版本</span></span><br><span class="line">                <span class="attr">corejs</span>: &#123;</span><br><span class="line">                  <span class="attr">version</span>: <span class="number">3</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 指定兼容性做到哪个版本的浏览器</span></span><br><span class="line">                <span class="attr">targets</span>: &#123;</span><br><span class="line">                  <span class="attr">chrome</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                  <span class="attr">firefox</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                  <span class="attr">ie</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                  <span class="attr">safari</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">                  <span class="attr">edge</span>: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 图片</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="comment">//转base64的条件</span></span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">25</span> * <span class="number">1024</span>, <span class="comment">// 25kb</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// [hash:6] 取图片哈希值的前十位</span></span><br><span class="line">        <span class="comment">// [ext] 取文件原来扩展名</span></span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">//与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;image/[name].[hash:6][ext]&#x27;</span>,</span><br><span class="line">          <span class="comment">//打包后对资源的引入，文件命名已经有/img了</span></span><br><span class="line">          <span class="comment">// publicPath: &#x27;./&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 处理html中的img标签</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;html-loader&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 排除 css/js/html资源</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/\.(css|js|html|less|jpg|png|gif)$/</span>,</span><br><span class="line">        <span class="comment">// webpack5以下使用方式</span></span><br><span class="line">        <span class="comment">// loader: &quot;file-loader&quot;</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">//与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;media/[name].[hash:6][ext]&#x27;</span>,</span><br><span class="line">          <span class="comment">//打包后对资源的引入，文件命名已经有/img了</span></span><br><span class="line">          <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 将打包生成的css文件放在一个统一的目录下</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;css/built.css&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">//压缩css文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">OptimizeCssAssetsWebpackPlugin</span>(),</span><br><span class="line">    <span class="comment">//  js语法检查</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;coffee&#x27;</span>],</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 打包HTML</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、Webpack-优化配置"><a href="#五、Webpack-优化配置" class="headerlink" title="五、Webpack 优化配置"></a>五、Webpack 优化配置</h1><h2 id="5-1-开发环境性能优化配置"><a href="#5-1-开发环境性能优化配置" class="headerlink" title="5.1 开发环境性能优化配置"></a>5.1 开发环境性能优化配置</h2><h3 id="5-1-1优化打包构建速度"><a href="#5-1-1优化打包构建速度" class="headerlink" title="5.1.1优化打包构建速度"></a>5.1.1优化打包构建速度</h3><h4 id="5-1-1-1HMR（模块热替换）"><a href="#5-1-1-1HMR（模块热替换）" class="headerlink" title="5.1.1.1HMR（模块热替换）"></a>5.1.1.1HMR（模块热替换）</h4><p>HMR: hot module replacement 热模块替换 / 模块热替换</p>
<p>作用：一个模块发生变化，只会重新打包构建这一个模块（而不是打包所有模块） ，极大提升构建速度</p>
<p>代码：只需要在 devServer 中设置 hot 为 true，就会自动开启HMR功能（只能在开发模式下使用）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">contentBase</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  <span class="comment">// 当修改了webpack配置，新配置要想生效，必须重启webpack服务</span></span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每种文件实现热模块替换的情况：</p>
<ul>
<li><p>样式文件：可以使用HMR功能，因为开发环境下使用的 style-loader 内部默认实现了热模块替换功能</p>
</li>
<li><p>js 文件：默认不能使用HMR功能（修改一个 js 模块所有 js 模块都会刷新）</p>
<p>–&gt; 实现 HMR 需要修改 js 代码（添加支持 HMR 功能的代码）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="comment">// 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&#x27;./print.js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 方法会监听 print.js 文件的变化，一旦发生变化，只有这个模块会重新打包构建，其他模块不会。</span></span><br><span class="line">    <span class="comment">// 会执行后面的回调函数</span></span><br><span class="line">    <span class="title function_">print</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其他文件。</p>
</li>
<li><p>html 文件: 默认不能使用 HMR 功能（html 不用做 HMR 功能，因为只有一个 html 文件，不需要再优化）</p>
<p>使用 HMR 会导致问题：html 文件不能热更新了（不会自动打包构建）</p>
<p>解决：修改 entry 入口，将 html 文件引入（这样 html 修改整体刷新）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">entry</span>: [<span class="string">&#x27;./src/js/index.js&#x27;</span>, <span class="string">&#x27;./src/index.html&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-1-2优化代码调试"><a href="#5-1-2优化代码调试" class="headerlink" title="5.1.2优化代码调试"></a>5.1.2优化代码调试</h3><h4 id="5-1-2-1-source-map"><a href="#5-1-2-1-source-map" class="headerlink" title="5.1.2.1 source-map"></a>5.1.2.1 source-map</h4><p>source-map：一种提供<strong>源代码到构建后代码的映射</strong>的技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）</p>
<p>参数：<code>[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code></p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">devtool: &#x27;eval-source-map&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可选方案：[生成source-map的位置|给出的错误代码信息]</p>
<ul>
<li>source-map：外部，错误代码准确信息 和 源代码的错误位置</li>
<li>inline-source-map：内联，只生成一个内联 source-map，错误代码准确信息 和 源代码的错误位置</li>
<li>hidden-source-map：外部，错误代码错误原因，但是没有错误位置（为了隐藏源代码），不能追踪源代码错误，只能提示到构建后代码的错误位置</li>
<li>eval-source-map：内联，每一个文件都生成对应的 source-map，都在 eval 中，错误代码准确信息 和 源代码的错误位</li>
<li>nosources-source-map：外部，错误代码准确信息，但是没有任何源代码信息（为了隐藏源代码）</li>
<li>cheap-source-map：外部，错误代码准确信息 和 源代码的错误位置，只能把错误精确到整行，忽略列</li>
<li>cheap-module-source-map：外部，错误代码准确信息 和 源代码的错误位置，module 会加入 loader 的 source-map</li>
</ul>
<p>内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快</p>
<p>开发/生产环境可做的选择：</p>
<p><strong>开发环境</strong>：需要考虑速度快，调试更友好</p>
<ul>
<li>速度快( eval &gt; inline &gt; cheap &gt;… )<ol>
<li>eval-cheap-souce-map</li>
<li>eval-source-map</li>
</ol>
</li>
<li>调试更友好<ol>
<li>souce-map</li>
<li>cheap-module-souce-map</li>
<li>cheap-souce-map</li>
</ol>
</li>
</ul>
<p><strong>最终得出最好的两种方案 –&gt; eval-source-map（完整度高，内联速度快） / eval-cheap-module-souce-map（错误提示忽略列但是包含其他信息，内联速度快）</strong></p>
<p><strong>生产环境</strong>：需要考虑源代码要不要隐藏，调试要不要更友好</p>
<ul>
<li>内联会让代码体积变大，所以在生产环境不用内联</li>
<li>隐藏源代码<ol>
<li>nosources-source-map 全部隐藏</li>
<li>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</li>
</ol>
</li>
</ul>
<p><strong>最终得出最好的两种方案 –&gt; source-map（最完整） / cheap-module-souce-map（错误提示一整行忽略列）</strong></p>
<h2 id="5-2-生产环境性能优化配置"><a href="#5-2-生产环境性能优化配置" class="headerlink" title="5.2 生产环境性能优化配置"></a>5.2 生产环境性能优化配置</h2><h3 id="5-2-1-优化打包构建速度"><a href="#5-2-1-优化打包构建速度" class="headerlink" title="5.2.1 优化打包构建速度"></a>5.2.1 优化打包构建速度</h3><h4 id="5-2-1-1-oneof"><a href="#5-2-1-1-oneof" class="headerlink" title="5.2.1.1 oneof"></a>5.2.1.1 oneof</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">      <span class="attr">oneOf</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          <span class="attr">use</span>: [...commonCssLoader]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">          <span class="attr">use</span>: [...commonCssLoader, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 正常来讲，一个文件只能被一个loader处理，当一个文件被多个loader处理时，那么一定要指定loader执行的顺序</span></span><br><span class="line"><span class="comment">        * 先 执行eslint，在执行babel</span></span><br><span class="line"><span class="comment">        *  enforce:&#x27;pre&#x27;  表示优先执行</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">// js做兼容性配置</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">            <span class="attr">presets</span>: [</span><br><span class="line">              [</span><br><span class="line">                <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">// 按需加载</span></span><br><span class="line">                  <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">                  <span class="comment">// 指定corejs版本</span></span><br><span class="line">                  <span class="attr">corejs</span>: &#123;</span><br><span class="line">                    <span class="attr">version</span>: <span class="number">3</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="comment">// 指定兼容性做到哪个版本的浏览器</span></span><br><span class="line">                  <span class="attr">targets</span>: &#123;</span><br><span class="line">                    <span class="attr">chrome</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                    <span class="attr">firefox</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                    <span class="attr">ie</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                    <span class="attr">safari</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">                    <span class="attr">edge</span>: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 图片</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">          <span class="comment">//解析</span></span><br><span class="line">          <span class="attr">parser</span>: &#123;</span><br><span class="line">            <span class="comment">//转base64的条件</span></span><br><span class="line">            <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">              <span class="attr">maxSize</span>: <span class="number">25</span> * <span class="number">1024</span>, <span class="comment">// 25kb</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// [hash:6] 取图片哈希值的前十位</span></span><br><span class="line">          <span class="comment">// [ext] 取文件原来扩展名</span></span><br><span class="line">          <span class="attr">generator</span>: &#123;</span><br><span class="line">            <span class="comment">//与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;image/[name].[hash:6][ext]&#x27;</span>,</span><br><span class="line">            <span class="comment">//打包后对资源的引入，文件命名已经有/img了</span></span><br><span class="line">            <span class="comment">// publicPath: &#x27;./&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 处理html中的img标签</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;html-loader&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 排除 css/js/html资源</span></span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/\.(css|js|html|less|jpg|png|gif)$/</span>,</span><br><span class="line">          <span class="comment">// webpack5以下使用方式</span></span><br><span class="line">          <span class="comment">// loader: &quot;file-loader&quot;</span></span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">          <span class="attr">generator</span>: &#123;</span><br><span class="line">            <span class="comment">//与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;media/[name].[hash:6][ext]&#x27;</span>,</span><br><span class="line">            <span class="comment">//打包后对资源的引入，文件命名已经有/img了</span></span><br><span class="line">            <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-2-1-2-babel缓存"><a href="#5-2-1-2-babel缓存" class="headerlink" title="5.2.1.2 babel缓存"></a>5.2.1.2 babel缓存</h4><p>1.babel缓存 cacheDirectory:true  让第二次打包构建速度变快</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">    <span class="attr">presets</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 按需加载</span></span><br><span class="line">          <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">          <span class="comment">// 指定corejs版本</span></span><br><span class="line">          <span class="attr">corejs</span>: &#123;</span><br><span class="line">            <span class="attr">version</span>: <span class="number">3</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 指定兼容性做到哪个版本的浏览器</span></span><br><span class="line">          <span class="attr">targets</span>: &#123;</span><br><span class="line">            <span class="attr">chrome</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            <span class="attr">firefox</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            <span class="attr">ie</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">            <span class="attr">safari</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">            <span class="attr">edge</span>: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 开启babel缓存</span></span><br><span class="line">    <span class="attr">cacheDirectory</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="5-2-1-3-多进程打包"><a href="#5-2-1-3-多进程打包" class="headerlink" title="5.2.1.3 多进程打包"></a>5.2.1.3 多进程打包</h4><p>当项目中js文件较多，打包较满时，推荐配置使用</p>
<p>使用步骤：</p>
<ol>
<li><p>npm i thread-loader -D</p>
</li>
<li><p>配置loader</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    <span class="comment">// 开启多进程打包</span></span><br><span class="line">    <span class="comment">// 进程启动大概为600ms，进程通信也有开销，只有工作消耗比较长，才需要多进程打包</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;thread-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">workers</span>:<span class="number">2</span> <span class="comment">// 进程2个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">        <span class="attr">presets</span>: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">// 按需加载</span></span><br><span class="line">              <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">              <span class="comment">// 指定corejs版本</span></span><br><span class="line">              <span class="attr">corejs</span>: &#123;</span><br><span class="line">                <span class="attr">version</span>: <span class="number">3</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="comment">// 指定兼容性做到哪个版本的浏览器</span></span><br><span class="line">              <span class="attr">targets</span>: &#123;</span><br><span class="line">                <span class="attr">chrome</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                <span class="attr">firefox</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                <span class="attr">ie</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                <span class="attr">safari</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">                <span class="attr">edge</span>: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 开启babel缓存</span></span><br><span class="line">        <span class="attr">cacheDirectory</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="5-2-1-4-externals"><a href="#5-2-1-4-externals" class="headerlink" title="5.2.1.4 externals"></a>5.2.1.4 externals</h4><p>externals主要作用是拒绝将某些包打包到文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* loader：1.下载 2.使用（配置loader）</span></span><br><span class="line"><span class="comment">* plugins：1.下载 2.引入 3.使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/built.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">//plugins的配置</span></span><br><span class="line">    <span class="comment">//html-webpack-plugin</span></span><br><span class="line">      <span class="comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      <span class="comment">// 需要有结构的HTML文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 复制 &#x27;./src/index.html&#x27; 文件,自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="comment">// 拒绝jQuery这个包被打包进去</span></span><br><span class="line">    <span class="attr">jquery</span>:<span class="string">&#x27;jQuery&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-2-1-5-dll"><a href="#5-2-1-5-dll" class="headerlink" title="5.2.1.5 dll"></a>5.2.1.5 dll</h4><p>dll是可以将某些库分离出来单独打包一次后，以后再打包项目时，不需要再多次打包，提高了打包的效率</p>
<p>使用流程：</p>
<ol>
<li><p>创建 webpack.dll.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 使用dll技术对某些库进行打包（jquery、react、vue）</span></span><br><span class="line"><span class="comment">* 当你运行webpack时，默认查找 webpack.config.js 配置文件</span></span><br><span class="line"><span class="comment">* --》 webpack --config webpack.dll.js</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="comment">// 最终打包生成的[name] --&gt; jquery</span></span><br><span class="line">    <span class="comment">// [&#x27;jquery&#x27;] --&gt; 要打包的库是jquery</span></span><br><span class="line">    <span class="attr">jquery</span>:[<span class="string">&#x27;jquery&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dll&#x27;</span>),</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;[name]_[hash]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="comment">// 打包 生成一个 manifest.json --&gt; 提供和jQuery的映射关系</span></span><br><span class="line">      <span class="keyword">new</span> webpack.<span class="title class_">DllPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;[name]_[hash]&#x27;</span>, <span class="comment">// 映射库的暴露内容名称</span></span><br><span class="line">        <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dll/manifest.json&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>:<span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>运行  webpack –config webpack.dll.js，打包后会在目录下生成 相应的dll目录，以及manifest.json文件</p>
</li>
<li><p>npm i add-asset-html-webpack-plugin -D</p>
</li>
<li><p>配置对应的插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AddAssetHtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;add-asset-html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/built.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">//plugins的配置</span></span><br><span class="line">    <span class="comment">//html-webpack-plugin</span></span><br><span class="line">    <span class="comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">    <span class="comment">// 需要有结构的HTML文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 复制 &#x27;./src/index.html&#x27; 文件,自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 告诉webpack哪些库不参与打包，同时使用的名称也需要改变</span></span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllReferencePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">manifest</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">      <span class="comment">// 配置到后引入对应的jquery</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">AddAssetHtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filepath</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dll/jquery.js&#x27;</span>),</span><br><span class="line">      <span class="attr">publicPath</span>:<span class="string">&#x27;./&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-2-2-优化代码运行的性能"><a href="#5-2-2-优化代码运行的性能" class="headerlink" title="5.2.2 优化代码运行的性能"></a>5.2.2 优化代码运行的性能</h3><h4 id="5-2-2-1-缓存-hash-chunkhash-contenthash"><a href="#5-2-2-1-缓存-hash-chunkhash-contenthash" class="headerlink" title="5.2.2.1 缓存(hash-chunkhash-contenthash)"></a>5.2.2.1 缓存(hash-chunkhash-contenthash)</h4><p>文件资源缓存 让代码上线 运行缓存更好使用</p>
<ol>
<li>修改文件名[hash:10]<ul>
<li>问题：由于js和css同时使用一个hash值，如果重新打包，会导致所有缓存失效（只改动一个文件</li>
</ul>
</li>
<li>chunkhash<ul>
<li>根据chunk生成的hash值，如果 打包来源于同一个chunk，那么hash值就一样</li>
<li>问题：因为css是在js中被引入的，所以同属于一个chunk</li>
</ul>
</li>
<li>contenthash<ul>
<li>根据文件内容生成 hash值，不同文件hash值一定不一样</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//output中的入口js文件</span></span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&quot;js/built.[contenthash:10].js&quot;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//plugins中的css文件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;css/built.[contenthash:10].css&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="5-2-2-2-tree-shaking"><a href="#5-2-2-2-tree-shaking" class="headerlink" title="5.2.2.2 tree shaking"></a>5.2.2.2 tree shaking</h4><p>tree shaking 去除无用代码，减少代码体积</p>
<p>前提：</p>
<ol>
<li>必须使用ES6模块化代码</li>
<li>开启production模式</li>
</ol>
<p>注意：</p>
<ul>
<li>在package.json中配置 “sideEffects”:false 所有代码没有副作用（都可以进行tree shaking）</li>
<li>问题：可能会把css / @babel/lolyfill (副作用)文件干掉</li>
<li>“sideEffects”:[“*.css”]  保留css</li>
</ul>
<h4 id="5-2-2-3-code-split"><a href="#5-2-2-3-code-split" class="headerlink" title="5.2.2.3 code split"></a>5.2.2.3 code split</h4><p>将打包后的js代码按照不同的方式进行分割。</p>
<p>方式一：更改入口文件配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">  <span class="comment">// 多入口：有一个入口，就输出一个bundle</span></span><br><span class="line">  <span class="attr">main</span>:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">test</span>:<span class="string">&#x27;./src/js/test.js&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="comment">// [name]: 取文件名</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&quot;js/[name].[contenthash:10].js&quot;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>方式二：optimization配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以将node_modules中的代码单独打包成一个chunk最终输出</span></span><br><span class="line"><span class="comment">// 自动分析多入口chunk中，有没有公共的文件，如果有会打包成单独一个chunk</span></span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">    <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">    <span class="attr">minSize</span>: <span class="number">20000</span>,</span><br><span class="line">    <span class="attr">minRemainingSize</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">maxAsyncRequests</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">maxInitialRequests</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">enforceSizeThreshold</span>: <span class="number">50000</span>,</span><br><span class="line">    <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">      <span class="attr">defaultVendors</span>: &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">        <span class="attr">priority</span>: -<span class="number">10</span>,</span><br><span class="line">        <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">default</span>: &#123;</span><br><span class="line">        <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">        <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>方式三：通过import()方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过js代码，让某个文件单独打包成一个chunk</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="title function_">import</span>(<span class="comment">/* webpackChunkName:&#x27;test&#x27; */</span><span class="string">&#x27;./js/test&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-4-懒加载和预加载"><a href="#5-2-2-4-懒加载和预加载" class="headerlink" title="5.2.2.4 懒加载和预加载"></a>5.2.2.4 懒加载和预加载</h4><ul>
<li>懒加载：当文件需要时才加载</li>
<li>预加载prefetch：会在使用之前，提前加载js文件</li>
<li>正常加载可以认为是并行加载（同一时间加载多个文件）</li>
<li>预加载 prefetch：等其他资源加载完毕，浏览器空闲了，在偷偷加载资源</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">import</span>(<span class="comment">/* webpackChunkName:&#x27;test&#x27;,webpackPrefetch:true */</span><span class="string">&#x27;./js/test&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;mul&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mul</span>(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-5-PWA"><a href="#5-2-2-5-PWA" class="headerlink" title="5.2.2.5 PWA"></a>5.2.2.5 PWA</h4><p>PWA:渐进式网络开发应用程序（离线可访问）</p>
<p>使用步骤：</p>
<ol>
<li><p>下载 workbox-webpack-plugin：npm i workbox-webpack-plugin -D</p>
</li>
<li><p>使用插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">WorkboxWebpackPlugin</span>.<span class="title class_">GenerateSW</span>(&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 1.帮助serviceWorker快速启动</span></span><br><span class="line"><span class="comment">  * 2. 删除旧的serviceworker</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * 生成一个serviceworker配置文件</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line">  <span class="attr">clientsClaim</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">skipWaiting</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>注册serviceWorker（入口js文件中）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册serviceworker</span></span><br><span class="line"><span class="comment">// 处理兼容性问题</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator)&#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;/service-worker.js&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;serviceworker注册成功了&#x27;</span>)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;serviceworker注册失败了&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.eslint不认识 window、navigator全局变量</span><br><span class="line">  解决：修改package.json中eslintConfig配置</span><br><span class="line">  &quot;eslintConfig&quot;: &#123;</span><br><span class="line">   &quot;extends&quot;: &quot;airbnb-base&quot;,</span><br><span class="line">   &quot;env&quot;: &#123;</span><br><span class="line">     &quot;browser&quot;: true</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line">2.service worker代码必须运行在服务器上</span><br><span class="line">npm i serve -g</span><br><span class="line">serve -s build</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="六、Webpack配置详解"><a href="#六、Webpack配置详解" class="headerlink" title="六、Webpack配置详解"></a>六、Webpack配置详解</h1><h2 id="6-1-entry"><a href="#6-1-entry" class="headerlink" title="6.1 entry"></a>6.1 entry</h2><p>1.string： ‘./src/index.js’ 单入口 打包形成一个chunk，输出一个bundle文件，此时chunk的名称默认是main</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">entry</span>:<span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.array ：[‘./src/index.js’,’./src/add.js’] 多入口 所有入口文件最终会形成一个chunk，输出出去只有 一个bundle文件。一般只有在HMR功能中让HTML热更新生效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">entry</span>: [<span class="string">&#x27;./src/index.js&#x27;</span>,<span class="string">&#x27;./src/add.js&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.object：多入口，有几个文件就形成几个chunk，输出几个bundle文件，此时chunk的名称是key</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">  <span class="attr">index</span>:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">add</span>:<span class="string">&#x27;./src/add.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.特殊用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line"> <span class="comment">// 所有入口文件最终只会形成一个chunk，输出出去只有一个bundle</span></span><br><span class="line">  <span class="attr">index</span>:[<span class="string">&#x27;./src/index.js&#x27;</span>,<span class="string">&#x27;./src/count.js&#x27;</span>],</span><br><span class="line"> <span class="comment">//形成一个chunk</span></span><br><span class="line">  <span class="attr">add</span>:<span class="string">&#x27;./src/add.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-2-output"><a href="#6-2-output" class="headerlink" title="6.2 output"></a>6.2 output</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="comment">// 文件名称 指定名称+目录</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">  <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  <span class="comment">// 所有资源引入公共路径前缀--&gt; &#x27;imgs/a.jpg&#x27; --&gt; &#x27;/imgs/a.jpg&#x27;</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">chunkFilename</span>: <span class="string">&quot;js/[name]_chunk.js&quot;</span>,</span><br><span class="line">  <span class="attr">library</span>: <span class="string">&#x27;[name]&#x27;</span>, <span class="comment">// 整个库向外暴露的变量名</span></span><br><span class="line">  <span class="attr">libraryTarget</span>: <span class="string">&quot;window&quot;</span>  <span class="comment">// 变量名添加到哪个上 window global browser node</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-3-module"><a href="#6-3-module" class="headerlink" title="6.3 module"></a>6.3 module</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// loader配置</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="comment">// 排除node_modules下的文件</span></span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_moudles/</span>,</span><br><span class="line">      <span class="comment">// 只检查src下的js文件</span></span><br><span class="line">      <span class="attr">include</span>: <span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="comment">//  优先执行</span></span><br><span class="line">      <span class="attr">enforce</span>: <span class="string">&quot;pre&quot;</span>,</span><br><span class="line">      <span class="comment">// 延后执行</span></span><br><span class="line">      <span class="comment">// enforce:&quot;post&quot;</span></span><br><span class="line">      <span class="comment">// 单个loader用loader</span></span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;eslint-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 以下配置只会生效一个</span></span><br><span class="line">      <span class="attr">oneOf</span>: []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="6-4-resolve"><a href="#6-4-resolve" class="headerlink" title="6.4 resolve"></a>6.4 resolve</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析模块的规则</span></span><br><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">  <span class="comment">// 配置路径别名:优点：简写路径 缺点：路径没有提示</span></span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="attr">$css</span>:<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;src/css&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置省略文件路径的后缀名</span></span><br><span class="line">  <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;.css&#x27;</span>,<span class="string">&#x27;.jsx&#x27;</span>],</span><br><span class="line">  <span class="comment">// 告诉webpack解析模块时是去哪个目录找</span></span><br><span class="line">  <span class="attr">modules</span>: [<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;../../node_modules&#x27;</span>),<span class="string">&#x27;node_modules&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-5-devServer"><a href="#6-5-devServer" class="headerlink" title="6.5 devServer"></a>6.5 devServer</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="comment">// 运行代码的目录</span></span><br><span class="line">  <span class="comment">// contentBase:resolve(__dirname,&#x27;build&#x27;),</span></span><br><span class="line">  <span class="attr">static</span>: &#123;</span><br><span class="line">    <span class="attr">directory</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">      <span class="comment">// 忽略文件</span></span><br><span class="line">      <span class="attr">ignored</span>:<span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 启动 gzip压缩</span></span><br><span class="line">  <span class="attr">compress</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 端口号</span></span><br><span class="line">  <span class="attr">port</span>:<span class="number">3000</span>,</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  <span class="attr">hot</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 域名</span></span><br><span class="line">  <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="comment">// 自动打开浏览器</span></span><br><span class="line">  <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">  <span class="attr">client</span>:&#123;</span><br><span class="line">    <span class="attr">logging</span>:<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">    <span class="comment">// 如果出错了，不要全屏提示</span></span><br><span class="line">    <span class="attr">overlay</span>:<span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 除了一些 基本启动信息外，其他内容也不要显示</span></span><br><span class="line">  <span class="attr">quiet</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">proxy</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">      <span class="attr">target</span>:<span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;^api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-optimization"><a href="#6-6-optimization" class="headerlink" title="6.6 optimization"></a>6.6 optimization</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">    <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    <span class="comment">// 默认值可以不用写</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *      minSize: 30*1024, // 分割的chunk最小为30kb</span></span><br><span class="line"><span class="comment">    maxSize: 0, // 最大没有限制</span></span><br><span class="line"><span class="comment">    minChunks: 1, // 要提取的chunk最少被引用一次</span></span><br><span class="line"><span class="comment">    maxAsyncRequests: 5,// 按需加载时并行加载的文件最大数量</span></span><br><span class="line"><span class="comment">    maxInitialRequests: 3, // 入口js文件最大并行请求量</span></span><br><span class="line"><span class="comment">    automaticNameDelimiter: &quot;~&quot;, // 名称连接符</span></span><br><span class="line"><span class="comment">    name:true, // 可以使用命名规则</span></span><br><span class="line"><span class="comment">    cacheGroups: &#123; // 分割的chunk组</span></span><br><span class="line"><span class="comment">      // node_modules文件会被打包 到vendors组的chunk中 -- vendors~xxx.js</span></span><br><span class="line"><span class="comment">      // 满足上面的公共规则</span></span><br><span class="line"><span class="comment">      vendor : &#123;</span></span><br><span class="line"><span class="comment">        test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">        priority: -10</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      default:&#123;</span></span><br><span class="line"><span class="comment">        // 要提取的chunk最少被使用两次</span></span><br><span class="line"><span class="comment">        minChunks: 2,</span></span><br><span class="line"><span class="comment">        // 优先级</span></span><br><span class="line"><span class="comment">        priority: -20,</span></span><br><span class="line"><span class="comment">        // 如果当前要打包的模块，和之前已经被提取的模块时 同一个，就会复用，而不是重新打包模块</span></span><br><span class="line"><span class="comment">        reuseExistingChunk: true</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 将当前模块记录其他模块的hash单独打包成为一个文件 runtime</span></span><br><span class="line">  <span class="comment">// 解决：修改a文件导致b文件的contenthash变化</span></span><br><span class="line">  <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="function"><span class="params">entrypoint</span> =&gt;</span><span class="string">`runtime-<span class="subst">$&#123;entrypoint.name&#125;</span>`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">minimizer</span>: [</span><br><span class="line">    <span class="comment">// 配置生产环境的压缩方案</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="comment">// 开启缓存</span></span><br><span class="line">        <span class="attr">cache</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 开启多进程打包</span></span><br><span class="line">        <span class="attr">parallel</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 启动source-map</span></span><br><span class="line">        <span class="attr">sourceMap</span>:<span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
</search>
